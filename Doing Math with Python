#########################################################
###############chapter 1 working with numbers############
#########################################################

下取整数 //
>>>12 // 5
>>>2

取余数 %
>>> 9 % 2
1
>>>

阶乘 **
>>> 2 ** 2
4
>>> 2 ** 10
1024
>>> 64 ** (1/2)   # python 2.7中1/2是0
1
>>> 64 ** (1.0/2) # （1.0）/2 是0.5
8.0


括号（）
>>> 5 + 5 * 5
30
>>> (5 + 5) * 5
50

int函数 #去掉小数部分，保留整数
>>> int(3.8)
3
>>> int(1.4)
1
>>> int(-1.3)
-1


通过fraction模块
>>> from fractions import Fraction
>>> f = Fraction(3, 4)
>>> f
Fraction(3, 4)
>>> f + 1   # 如果式子中只含有Fraction以及整数时，结果依旧是一个fraction
Fraction(7, 4)
>>> f + 1 + 1.5 # 如果式子中含有Fraction以及浮点数时，结果就是浮点数。
3.25


复数
>>> a = 2 + 3j
>>> type(a)
<type 'complex'>
>>> b = complex(3, 3)
>>> b
(3+3j)
>>> a + b
(5+6j)
>>> a - b
(-1+0j)
(-3+15j)
>>> a / b
(0.8333333333333334+0.16666666666666666j)
>>> z = 2 + 3j
>>> z.real
2.0
>>> z.imag
3.0
>>> (z.real ** 2 + z.imag ** 2) ** 0.5
3.605551275463989
>>> abs(z)
3.6055512754639896


Getting User Input

>>> a = input()
12
>>> a
12
>>> a = '1'
>>> int(a)+1
2
>>> float(a) + 1
2.0
>>> int ('2.0')		# int()函数不能使一个含小数的字符串变成整数
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: invalid literal for int() with base 10: '2.0'

>>> a = int(input())
1
>>> a + 1
2
>>> a = int(input())  # python2.7 浮点数也可以
1.0
>>> a + 1
2

分数和负数的输入
>>> a = Fraction(input('Enter a fraction: '))
Enter a fraction: 3/4   # python 2.7 3/4 都是整数
>>> a
Fraction(0, 1)
>>> a = Fraction(input('Enter a fraction: '))
Enter a fraction: 3.0/4
>>> a
Fraction(3, 4)


>>> a = Fraction(input('Enter a fraction: '))
Enter a fraction: 3.0/4
>>> a
Fraction(3, 4)
>>> a = Fraction(input('Enter a fraction: '))
Enter a fraction: 3/0
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<string>", line 1, in <module>
ZeroDivisionError: integer division or modulo by zero

>>> try:
...     a = Fraction(input('Enter a fraction: '))
... except ZeroDivisionError:
...     print('Invalid fraction')
...
Enter a fraction: 3/0
Invalid fraction


>>> z = complex(input('Enter a complex number: '))
Enter a complex number: 2+3j
>>> z
(2+3j)


用程序来做数学
PS C:\Users\Weihong> cat .\ch1ex2.py
def is_factor(a, b):
        if b % a == 0:
                print 'True'
        else:
                print 'False'

a = int(input(' number a: '))
b = int(input(' number b: '))

is_factor(a, b)
PS C:\Users\Weihong> python .\ch1ex2.py
 number a: 4
 number b: 8
True

>>> for i in range(1, 4):
...     print(i)
...
1
2
3
>>> for i in range(5):
...     print(i)
...
0
1
2
3
4
>>> for i in range(1, 11, 2):
...     print(i)
...
1
3
5
7
9

求整数的因子

PS C:\Users\Weihong> cat .\ch1ex3.py
# find the factors of an integer

def factors(b):

        for i in range(1, b+1):
                if b % i == 0:
                        print  (i)

if __name__ == '__main__':

        b = input('Your Number Please: ')
        b = float(b)

        if b > 0 and b.is_integer():
                factors(int(b))
        else:
                print('Please enter a positive integer')

PS C:\Users\Weihong> python .\ch1ex3.py
Your Number Please: 12
1
2
3
4
6
12
PS C:\Users\Weihong> python .\ch1ex3.py
Your Number Please: -9
Please enter a positive integer


format函数
它通过{}和:来代替%。
“映射”示例

通过位置
>>> '{0},{1}'.format('kzc',18)
'kzc,18'
>>> '{},{}'.format('kzc',18)
'kzc,18'
>>> '{1},{0},{1}'.format('kzc',18)
'18,kzc,18'
字符串的format函数可以接受不限个参数，位置可以不按顺序，可以不用或者用多次，不过2.6不能为空{}，2.7才可以。

通过关键字参数
>>> '{name},{age},{name}'.format(age=18,name='kzc')
'kzc,18,kzc'

通过下标
>>> p = ['kzc',18,'apple']
>>> '{0[0]},{0[2]},{0[1]}'.format(p)
'kzc,apple,18'

填充与对齐
填充常跟对齐一起使用
^、<、>分别是居中、左对齐、右对齐，后面带宽度
:号后面带填充的字符，只能是一个字符，不指定的话默认是用空格填充
>>> '{:>5}'.format('189')
'  189'
>>> '{:0>5}'.format('189')
'00189'

精度与类型f
精度常跟类型f一起使用
>>> '{:.2f}'.format(1.567)
'1.57'
>>> '{:.2f}'.format(1.597)
'1.60'

用，号还能用来做金额的千位分隔符。
>>> '{:,}'.format(1234567890)
'1,234,567,890'


乘法表生成
PS C:\Users\Weihong> cat .\ch1ex4.py
# Multiplication table printer

def multi_table(a):

        for i in range(1, 11):
                print('{0} * {1} = {2}'.format(a, i, a*i))

if __name__ == '__main__':		# 你运行当前脚本，就会执行if __name__=="__main__"下的函数，如果你是当模块被其他程序import的，那么就不会执行。
        a = input('Enter a number: ')   # 主要是测试用，测试你写的这个模块有没有实现你想要的功能 
        multi_table(float(a))        
	
PS C:\Users\Weihong> python ch1ex4.py
Enter a number: 4                    
4.0 * 1 = 4.0                        
4.0 * 2 = 8.0                        
4.0 * 3 = 12.0                       
4.0 * 4 = 16.0                       
4.0 * 5 = 20.0                       
4.0 * 6 = 24.0                       
4.0 * 7 = 28.0                       
4.0 * 8 = 32.0                       
4.0 * 9 = 36.0                       
4.0 * 10 = 40.0   


转换单位

PS C:\Users\Weihong> cat .\ch1ex5.py
#Unit convert: Miles and Kilometers

def print_menu():
        print('1. Kilometers to Miles')
        print('2. Miles to Kilometers')

def km_miles( ):
        km = float(input('Enter distance in kilometers: '))
        miles = km/1.609

        print('Distance in miles:{0}'.format(miles))
def miles_km( ):
        miles = float(input('Enter distance in miles: '))
        km = miles * 1.609

        print('Distance in kilometers:{0}'.format(km))

if __name__ == '__main__':
        print_menu()
        choice = input('Which conversion would you like to de?: ')
        if choice ==  1:			# 在python 2.7中 input函数的结果是数字类型
        #if choise == '1':			# 这里'1'表示字符串
                km_miles( )
        if choice ==  2:
                miles_km( )


PS C:\Users\Weihong> python .\ch1ex5.py
1. Kilometers to Miles
2. Miles to Kilometers
Which conversion would you like to de?: 1
Enter distance in kilometers: 23
Distance in miles:14.2945929149


计算二次函数的根
PS C:\Users\Weihong> cat .\ch1ex6.py
#Quadratic equation root calculator

def roots(a, b, c):

        D = (b*b - 4*a*c)**0.5
        x_1 = (-b + D ) / (2*a)
        x_2 = (-b - D ) / (2*a)

        print('x1: {0}'.format(x_1))
        print('x2: {0}'.format(x_2))

if  __name__ == '__main__':
        a = input('Enter a: ')
        b = input('Enter b: ')
        c = input('Enter c: ')
        roots(float(a), float(b), float(c))
PS C:\Users\Weihong> python .\ch1ex6.py
Enter a: 1
Enter b: 2
Enter c: 1
x1: -1.0
x2: -1.0


def roots(a, b, c):

        D = (b*b - 4*a*c)**0.5
        x_1 = (-b + D ) / (2*a)
        x_2 = (-b - D ) / (2*a)

        print('x1: {0}'.format(x_1))
        print('x2: {0}'.format(x_2))

if  __name__ == '__main__':
        a = input('Enter a: ')
        b = input('Enter b: ')
        c = input('Enter c: ')
        roots(complex(a), complex(b), complex(c))

PS C:\Users\Weihong> python .\ch1ex6.py
Enter a: 1
Enter b: 1
Enter c: 1
x1: (-0.5+0.866025403784j)
x2: (-0.5-0.866025403784j)
PS C:\Users\Weihong> python .\ch1ex6.py
Enter a: 1
Enter b: 2
Enter c: 1
x1: (-1+0j)
x2: (-1+0j)
PS C:\Users\Weihong> cat .\ch1ex6.py
#Quadratic equation root calculator




奇偶数判断并打印出之后的10个相应数字
PS C:\Users\Weihong> cat .\ch1ex7.py
def odd_or_even(a):
        if a% 2 == 1:
                print 'This an odd number.'
                for i in range(1, 11):
                        print a
                        a  = a + 2
        else:
                print 'This an even number.'
                for i in range(1, 11):
                        print a
                        a  = a + 2

if __name__ == '__main__':

        a = input('Your Number Please: ')
        a = float(a)

        if a > 0 and a.is_integer():
                odd_or_even(int(a))

        else:
                print('Please enter a positive integer')

PS C:\Users\Weihong> python .\ch1ex7.py
Your Number Please: 5
This an odd number.
5
7
9
11
13
15
17
19
21
23
PS C:\Users\Weihong> python .\ch1ex7.py
Your Number Please: 6
This an even number.
6
8
10
12
14
16
18
20
22
24


强化版乘法表生成

PS C:\Users\Weihong> cat .\ch1ex8.py
# Multiplication table printer

def multi_table(a, b, c):

        for i in range(b, c):
                print('{0} * {1} = {2}'.format(a, i, a*i))

if __name__ == '__main__':
        a = input('Enter a number: ')
        b = input('Enter the first number: ')
        c = input('Enter the last number: ')
        c = c + 1
        multi_table(a, b, c)
PS C:\Users\Weihong>


PS C:\Users\Weihong> python .\ch1ex8.py
Enter a number: 3
Enter the first number: 4
Enter the last number: 12
3 * 4 = 12
3 * 5 = 15
3 * 6 = 18
3 * 7 = 21
3 * 8 = 24
3 * 9 = 27
3 * 10 = 30
3 * 11 = 33
3 * 12 = 36



#########################################################
##########charpter 2 Visualizing Data With Graphs########
#########################################################

列表和元组
列表
>>> simplelist = [1, 2, 3]
>>> simplelist = [0]
>>> simplelist = [1, 2, 3]
>>> simplelist[0]
1
>>> simplelist[1]
2
>>> simplelist[2]
3


>>> stringlist = ['a string', 'b string', 'c string']
>>> stringlist[0]
'a string'
>>> stringlist[1]
'b string'
>>> stringlist[2]
'c string'


>>> emptylist.append(1)
>>> emptylist
[1]
>>> emptylist.append(2)
>>> emptylist
[1, 2]


元组
>>> simpletuple = (1, 2, 3)
>>> simpletuple[0]
1
>>> simpletuple[1]
2
>>> simpletuple[2]
3
元组不能用append函数


列表与元组的迭代
>>> l = [1, 2, 3]
>>> for item in l:
...     print(item)
...
1
2
3




通过Matplotlib作图

>>> x_numbers = [1, 2, 3]
>>> y_numbers = [2, 4, 6]
>>> from pylab import plot,show
>>> plot(x_numbers, y_numbers)
[<matplotlib.lines.Line2D object at 0x05A36C50>]
>>> show()
>>>

生成纽约市的年平均温度
>>> nyc_temp = [53.9, 56.3, 56.4, 53.4, 54.5, 55.8, 56.8 ,55.0, 55.3, 56.7, 56.4, 57.3]
>>> plot(nyc_temp, marker='o')
[<matplotlib.lines.Line2D object at 0x05DDF770>]
>>> show()
生成的图是从0开始的

>>> nyc_temp = [53.9, 56.3, 56.4, 53.4, 54.5, 55.8, 56.8 ,55.0, 55.3, 56.7, 56.4, 57.3]
>>> years = range(2000, 2012)
>>> plot(years, nyc_temp, marker='o')
[<matplotlib.lines.Line2D object at 0x06431390>]
>>> show()
x坐标是2000到2011


>>> nyc_temp_2000 = [31.3, 37.3, 47.2, 51.0, 63.5, 71.3, 72.7, 66.0, 57.0, 45.3, 31.1]
>>> nyc_temp_2006 = [40.9, 35.7, 43.1, 55.7, 63.1, 71.0, 77.9, 66.6, 56.2, 51.9, 43.6]
>>> nyc_temp_2012 = [37.3, 40.9, 50.9, 54.8, 65.1, 71.0, 78.8, 68.8, 58.0, 43.9, 41.5]
>>> months = range(1, 12)
>>> plot(months, nyc_temp_2000, months, nyc_temp_2006, months, nyc_temp_2012)
[<matplotlib.lines.Line2D object at 0x0E633710>, <matplotlib.lines.Line2D object at 0x0E633810>,
D object at 0x0E633B90>]
>>> show()
图中没有标明颜色


增加legend
>>> y1 = [1, 2, 3, 4]
>>> y2 = [2, 6, 4, 7]
>>> x1 = range(1, 5)
>>> plot(x1, y1, x1, y2)
[<matplotlib.lines.Line2D object at 0x0E6B54D0>, <matplotlib.lines.Line2D object at 0x0E6B5510>]
>>>
>>> from pylab import legend
>>> legend(['haha','xixi'])        # 每条线命名
<matplotlib.legend.Legend object at 0x0E6B5890>
>>> show()

改变legend的位置
>>> y1 = [1, 2, 3, 4]
>>> y2 = [2, 6, 4, 7]
>>> x1 = range(1, 5)
>>> plot(x1, y1, x1, y2)
[<matplotlib.lines.Line2D object at 0x05C895B0>, <matpl
>>>
>>> from pylab import legend
>>> legend(['xixi','haha'], loc='upper left') #改变legend的位置
<matplotlib.legend.Legend object at 0x05C89610>
>>> show()


个性化图
增加表头和坐标名
>>> from pylab import plot, show, title, xlabel, ylabel, legend
>>> y1=[1, 2, 3, 4, 5]
>>> y2=[3, 2, 1, 7, 2]
>>> x=range(1,6)
>>> plot(x, y1, x, y2)
[<matplotlib.lines.Line2D object at 0x051E79F0>, <matplotlib.lines.Line2D object at
>>> title('the first plot')		# 表头
<matplotlib.text.Text object at 0x051C98D0>
>>> xlabel('x-axis')			# x坐标的名字
<matplotlib.text.Text object at 0x04FB11B0>
>>> ylabel('y-axis')			# y坐标的名字
<matplotlib.text.Text object at 0x051B01B0>
>>> legend(['num1','num2'])		# 线的名字
<matplotlib.legend.Legend object at 0x051B0930>
>>> show()

坐标轴的设计
>>> nyc_temp = [53.9, 56.3, 56.4, 53.4, 54.5, 55.8, 56.8, 55.0, 55.3, 54.0, 56.7, 56.4, 57.3]
>>> months = range(0,13)
>>> plot(months, nyc_temp, marker='o')
[<matplotlib.lines.Line2D object at 0x05422690>]
>>> from pylab import axis
>>> axis()
(0.0, 12.0, 53.0, 57.5)  # 默认区间
>>> axis(ymin=0)
(0.0, 12.0, 0, 57.5)	# 可以通过ymin，ymax。。改变区间
>>> show()


用pyplot作图
PS C:\Users\Weihong> cat .\ch2ex1.py
# Simple plot using pyplot

import matplotlib.pyplot

def create_graph():
        x_numbers = [1, 2, 3]
        y_numbers = [2, 4, 6]

        matplotlib.pyplot.plot(x_numbers, y_numbers)
        matplotlib.pyplot.show()

if __name__ == '__main__':
        create_graph()


To save us some typing, we can import the pyplot module by entering
import matplotlib.pyplot as plt. Then, we can refer to pyplot with the label
plt in our programs, instead of having to always type matplotlib.pyplot:
为了节约打字时间，可以将matplotlib.pyplot命名为plt
PS C:\Users\Weihong> cat .\ch2ex2.py
# Simple plot using pyplot

import matplotlib.pyplot as plt

def create_graph():
        x_numbers = [1, 2, 3]
        y_numbers = [2, 4, 6]

        plt.plot(x_numbers, y_numbers)
        plt.show()

if __name__ == '__main__':
        create_graph()


保存图片
>>> from pylab import plot,savefig
>>> x = [1, 2, 3]
>>> y = [2, 4, 6]
>>> plot(x, y)
[<matplotlib.lines.Line2D object at 0x05D039F0>]
>>> savefig('mypraph.png')


通过公式作图

万有引力定律
PS C:\Users\Weihong> cat .\ch2ex3.py
# The relationship between gravitational force and
# distance between two bodies

import matplotlib.pyplot as plt

# Draw the graph
def draw_graph(x, y):
        plt.plot(x, y, marker='o')
        plt.xlabel('Distance in meters')
        plt.ylabel('Gravitational force in newtons')
        plt.title('Gravitational force and distance')
        plt.show()

def generate_F_r():
        # Generate values for r
        r = range(100, 1001, 50)
        # Empty list to store the calculated values of F
        F = []

        # Constant, G
        G = 6.674*(10**-11)
        # Two masses
        m1 = 0.5
        m2 = 1.5

        # Calculate force and add it to the list, F
        for dist in r:
                force = G*(m1*m2)/(dist**2)
                F.append(force)

        # call the draw_graph function
        draw_graph(r, F)

if  __name__=='__main__':
        generate_F_r()


抛物线定律
#Draw the trajectory of a body in projectile motion

from matplotlib import pyplot as plt
import math

def draw_graph(x, y):
	plt.plot(x, y)
	plt.xlabel('x-coordinate')
	plt.ylabel('y-coordinate')
	plt.title('Projectile motion of a ball')

def frange(start, final, increment):

	numbers = []
	while start < final:
		numbers.append(start)
		start = start + increment
	
	return numbers

def draw_trajectory(u, theta):

	theta = math.radians(theta)
	g = 9.8

	# Time of flight
	t_flight = 2*u*math.sin(theta)/g
	# Find time intervals
	intervals = frange(0, t_flight, 0.001)

	# List of x and y coordinates
	x = []
	y = []
	for t in intervals:
		x.append(u*math.cos(theta)*t)
		y.append(u*math.sin(theta)*t - 0.5*g*t*t)
	
	draw_graph(x, y)

if __name__ == '__main__':
	try:
		u = float(input('Enter the initial velocity(m/s): '))
		theta = float(input('Enter the angle of projection(degrees): '))
	except ValueError:
		print('You entered an invalid input')
	else:				# try...except...else
		draw_trajectory(u, theta)
		plt.show()

##同时画出三条线
if __name__ == '__main__':
	u_list = [20, 40, 60]
	theta = 45
	for u in u_list:
		draw_trajectory(u, theta)

	plt.legend(['20', '40', '60'])
	plt.show()		




练习
习题1
1.1
#nyc_weather_forcast_basic

import matplotlib.pyplot as plt

def forcast():
	
	time_of_day = ['3:00PM', '6:00PM', '9:00PM', '12:00AM', '3:00AM', '6:00AM', '9:00AM', '12:00PM']
	temp = [34, 34, 32, 28, 27, 24, 26, 29]
	intervals = range(1, len(time_of_day) + 1)
	

	plt.plot(intervals, temp)
	plt.ylim(20,40)		#设置x轴的区间	
	plt.xticks(intervals, time_of_day)
	plt.show()

if __name__ == '__main__':
	forcast( )


1.2
PS C:\Users\Weihong> cat .\ch2ex5.py
#nyc_weather_forcast_basic

import matplotlib.pyplot as plt

def forcast():

        time_of_day = ['3:00PM', '6:00PM', '9:00PM', '12:00AM', '3:00AM', '6:00AM', '9:00AM', '12:00PM']
        temp1 = [34, 34, 32, 28, 27, 24, 26, 29]
        temp2 = [21, 26, 37, 27, 32, 19, 20, 28]
        intervals = range(1, len(time_of_day) + 1)


        plt.plot(intervals, temp1, intervals, temp2)
        plt.ylim(0,40)
        plt.xticks(intervals, time_of_day)
        plt.legend(['New York', 'London'])
        plt.xlabel('time')
        plt.ylabel('temperature')
        plt.show( )

if __name__ == '__main__':
        forcast( )



习题2
2.1
PS C:\Users\Weihong> cat .\ch2ex6a.py
#quadratic function calculator

x_values = [-1, 1, 2, 3, 4, 5]
for x in x_values:
        y = x**2 + 2*x + 1
        print('x={0} y={1}'.format(x, y))

PS C:\Users\Weihong> python .\ch2ex6a.py
x=-1 y=0
x=1 y=4
x=2 y=9
x=3 y=16
x=4 y=25
x=5 y=36

2.2
PS C:\Users\Weihong> cat .\ch2ex6b.py
#the graph of quadratic function calculator

import matplotlib.pyplot as plt

def fig_quad(x, y):
        plt.plot(x, y)
        plt.show( )

if __name__ == '__main__':
        x_values = range( -100, 100, 10)
        y_values = []
        for x in x_values:
                y_values.append(x**2 + 2*x + 1)

        fig_quad(x_values, y_values)


习题3
习题3
3.1
PS C:\Users\Weihong> cat ch2ex7a.py
#Draw the trajectory of a body in projectile motion

from matplotlib import pyplot as plt
import math

def draw_graph(x, y):
        plt.plot(x, y)
        plt.xlabel('x-coordinate')
        plt.ylabel('y-coordinate')
        plt.title('Projectile motion of a ball')

def frange(start, final, increment):

        numbers = []
        while start < final:
                numbers.append(start)
                start = start + increment

        return numbers

def draw_trajectory(u, theta):

        theta = math.radians(theta)
        g = 9.8

        # Time,distance of flight
        t_flight = 2*u*math.sin(theta)/g
        s_max = u*math.cos(theta)*t_flight
        h_max = u*math.sin(theta)*t_flight /2 - 0.5 * g *( t_flight / 2) **2

        print 'The time of flight: %0.2f' % t_flight
        print 'The maximum horizontal distance: %0.2f' % s_max
        print 'The maximun vertical distance: %0.2f' % h_max

        # Find time intervals
        intervals = frange(0, t_flight, 0.001)

        # List of x and y coordinates
        x = []
        y = []
        for t in intervals:
                x.append(u*math.cos(theta)*t)
                y.append(u*math.sin(theta)*t - 0.5*g*t*t)

        draw_graph(x, y)

if __name__ == '__main__':
        try:
                u = float(input('Enter the initial velocity(m/s): '))
                theta = float(input('Enter the angle of projection(degrees): '))
        except ValueError:
                print('You entered an invalid input')
        else:                           # try...except...else
                draw_trajectory(u, theta)
                plt.show()

PS C:\Users\Weihong> python ch2ex7a.py
Enter the initial velocity(m/s): 25
Enter the angle of projection(degrees): 60
The time of flight: 4.42
The maximum horizontal distance: 55.23
The maximun vertical distance: 23.92

3.2
PS C:\Users\Weihong> cat .\ch2ex7b.py
"""

projectile_comparison_gen.py

Compare the projectile motion of a body thrown with various combinations of initial
velocity and angle of projection.
"""

import matplotlib.pyplot as plt
import math

g = 9.8

def draw_graph(x, y):
    plt.plot(x, y)
    plt.xlabel('x-coordinate')
    plt.ylabel('y-coordinate')
    plt.title('Projectile motion at different initial velocities and angles')

def frange(start, final, interval):

    numbers = []
    while start < final:
        numbers.append(start)
        start = start + interval

    return numbers

def draw_trajectory(u, theta, t_flight):
    # list of x and y co-ordinates
    x = []
    y = []
    intervals = frange(0, t_flight, 0.001)
    for t in intervals:
        x.append(u*math.cos(theta)*t)
        y.append(u*math.sin(theta)*t - 0.5*g*t*t)

    #create the graph
    draw_graph(x, y)

if __name__ == '__main__':

        num_trajectories = int(input('How many trajectories? '))

        velocities = []
        angles = []
        for i in range(1, num_trajectories+1):
                v = input('Enter the initial velocity for trajectory{0}(m/s):'.format(i)) #用format函数赋值{0}
                theta = input('Enter the angle of projection for trajectory {0}(degrees): '.format(i))
                velocities.append(float(v))
                angles.append(math.radians(float(theta)))

        for i in range(num_trajectories):
                # calculate time of flight, maximum horizontal distance and
                # maximum vertical distance
                t_flight = 2*velocities[i]*math.sin(angles[i])/g
                S_x = velocities[i]*math.cos(angles[i])*t_flight
                S_y = 0.5*velocities[i]*math.sin(angles[i])*(t_flight) - 0.5*g*(t_flight*0.5)**2
                print('Initial velocity: {0} Angle of Projection: {1}'.format(velocities[i], math.degrees(angles[i])))
                print('T: {0} S_x: {1} S_y: {2}'.format(t_flight, S_x, S_y))
                print()
                draw_trajectory(velocities[i], angles[i], t_flight)

# Add a legend and show the graph
        legends = []
        for i in range(0, num_trajectories):
                legends.append('{0} - {1}'.format(velocities[i], math.degrees(angles[i])))
        plt.legend(legends)
        plt.show()

PS C:\Users\Weihong> python ch2ex7b.py
How many trajectories? 3
Enter the initial velocity for trajectory1(m/s):45
Enter the angle of projection for trajectory 1(degrees): 45
Enter the initial velocity for trajectory2(m/s):45
Enter the angle of projection for trajectory 2(degrees): 60
Enter the initial velocity for trajectory3(m/s):45
Enter the angle of projection for trajectory 3(degrees): 90
Initial velocity: 45.0 Angle of Projection: 45.0
T: 6.49383778641 S_x: 206.632653061 S_y: 51.6581632653
()
Initial velocity: 45.0 Angle of Projection: 60.0
T: 7.95329452455 S_x: 178.949126802 S_y: 77.487244898
()
Initial velocity: 45.0 Angle of Projection: 90.0
T: 9.18367346939 S_x: 2.53052017171e-14 S_y: 103.316326531
()


习题4
4.1
PS C:\Users\Weihong> cat .\ch2ex8a.py
"""
Example of drawing a horizontal bar chart
"""

import matplotlib.pyplot as plt
def create_bar_chart(data, labels):
        # Number of bars
        num_bars = len(data)	# data的数量
        # This list is the point on the y-axis where each
        # Bar is centered. Here it will be [1, 2, 3 ...]
        positions = range(1, num_bars+1)	# 每个柱状图的位置
        plt.barh(positions, data, align = 'center') # 每个柱状图的位置，每个柱状图的数值，在中心放置，barh意味着柱状图是水平的
	#plt.bar(positions, data, align = 'center')
	# set the label of each bar
        plt.yticks(positions, labels)
	#plt.xticks(positions, labels)
        plt.xlabel('Steps')
	#plt.ylabel('Steps')
        plt.ylabel('Day')
	#plt.xlabel('Day')
        plt.title('Number of steps walked')

        # Turns on the grid which may assist in visual estimation
        plt.grid()
        plt.show()

if __name__ == '__main__':
        # Number of steps I walked during the past week
        steps = [6534, 7000, 8900, 10786, 3467, 11045, 5095]
        # Corresponding days
        labels = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        create_bar_chart(steps, labels)

4.2
PS C:\Users\Weihong> cat ch2ex8b.py
"""
Visualizing Your Expenses
"""
import matplotlib.pyplot as plt

def bar_chart(data, labels):
        num_bars = len(data)
        positions = range(1, num_bars+1)
        plt.barh(positions, data, align = 'center')
        plt.yticks(positions, labels)
        plt.xlabel('Expenditure')
        plt.ylabel('Categories')
        plt.title('Weekly expenditures')

        plt.grid()
        plt.show()

if __name__ == '__main__':
        num_categories = int(input('Enter the number of categories: '))
        category = []
        Expenditure = []

        for i in range(1, num_categories+1):
                category_factor = raw_input('Enter category: ')
                Expenditure_number = input('Expenditure:')
                category.append(category_factor)
                Expenditure.append(Expenditure_number)

        bar_chart(Expenditure, category)


PS C:\Users\Weihong> python ch2ex8b.py
Enter the number of categories: 4
Enter category: Food
Expenditure:70
Enter category: Transpotation
Expenditure:35
Enter category: Entertainment
Expenditure:30
Enter category: Phone/Internet
Expenditure:30


斐波那契数列
PS C:\Users\Weihong> cat .\ch2ex9.py
"""
fibonacci_goldenration.py
"""

import matplotlib.pyplot as plt

def fibo(n):
        if n  == 1:
                return [1]
        if n == 2:
                return[1, 1]

        a = 1
        b = 1
        # first two members of the series
        series = [a, b]
        for i in range(n):
                c = a + b
                series.append(c)
                a = b
                b = c

        return series

def plot_ratio(series):
        ratios = [ ]
        for i in range(len(series)-1):
                ratios.append(float(series[i+1])/series[i])
        plt.plot(ratios)
        plt.title('Ratio between Fibonacci numbers & Golden ratio')
        plt.ylabel('Ratio')
        plt.xlabel('No.')
        plt.show( )

if __name__ == '__main__':
        num = 100
        series = fibo(num)
        plot_ratio(series)



#########################################################
#######chapter 3 Describing data with statistics#########
#########################################################
平均数
>>> shortlist = [1, 2, 3]
>>> sum(shortlist)
6
>>> len(shortlist)
3

PS C:\Users\Weihong> cat .\ch3ex1.py
"""
Calculating the mean
"""

def calculate_mean(numbers):
        s = sum(numbers)
        N = len(numbers)
        # Calculate the mean
        mean = float(s)/N

        return mean

if __name__ == '__main__':
        donations = [100, 60, 70, 900, 100, 200, 500, 500, 503, 600, 1000, 1200]
        mean = calculate_mean(donations)
        N = len(donations)
        print('Mean donation over the last {0} days is {1}'.format(N, mean))
PS C:\Users\Weihong> python ch3ex1.py
Mean donation over the last 12 days is 477.75


中位数
>>> samplelist = [4, 1, 3]
>>> samplelist.sort()
>>> samplelist
[1, 3, 4]


PS C:\Users\Weihong> cat .\ch3ex2.py
"""
Calculating the median
"""

def calculate_median(numbers):
        N = len(numbers)
        numbers.sort( )

        #Find the median
        if N % 2 == 0:
                # if N is even
                m1 = N/2 - 1
                m2 = (N/2)
                # Convert to integer, match position
                median = (numbers[m1] + numbers[m2])/2
        else:
                m = (N+1)/2 - 1
                median = numbers[m]

        return median

if __name__ == '__main__':
        donations = [100, 60, 70, 900, 100, 200, 500, 500, 503, 600, 1000, 1200]
        median = calculate_median(donations)
        N = len(donations)
        print('Median donation over the last {0} days is {1}'.format(N, median))

PS C:\Users\Weihong> python ch3ex2.py
Median donation over the last 12 days is 500



计算数字的频率
>>> simplelist = [4, 2, 1, 4]
>>> from collections import Counter
>>> c = Counter(simplelist)
>>> c.most_common()
[(4, 2), (1, 1), (2, 1)]
>>> c.most_common(1)  #出现次数最多的数字，以及它的次数
[(4, 2)]
>>> c.most_common(2)
[(4, 2), (1, 1)]
>>> mode = c.most_common(1)
>>> mode
[(4, 2)]
>>> mode[0]
(4, 2)
>>> mode[0][0]
4


PS C:\Users\Weihong> cat ch3ex3.py
"""
Calculating the mode
"""

from collections import Counter # 从collections中引入Counter

def calculate_mode(numbers):
        c = Counter(numbers)	# c是Counter（numbers）的一个实例化
        mode = c.most_common(1)	# most_common中第一个元组以列表形式赋值于mode
        return mode[0][0]	# 返回值为列表元素第一个元组元素中的第一个值

if __name__ == '__main__':
        scores = [7, 8, 9, 2, 10, 9, 9, 9, 9, 4, 5, 6, 1, 5, 6, 7, 8, 6, 1, 10]
        mode = calculate_mode(scores)

        print('The mode of the list of numbers is: {0}'.format(mode))
PS C:\Users\Weihong> python ch3ex3.py
The mode of the list of numbers is: 9



PS C:\Users\Weihong> cat ch3ex4.py
"""
Calculating the mode when the list of numbers may
have multiple modes
"""

from collections import Counter

def calculate_mode(numbers):

        c = Counter(numbers)
        numbers_freq = c.most_common()
        max_count = numbers_freq[0][1]	# 第一个元组中第二个元素是频率最高数的次数

        modes = []	
        for num in numbers_freq:	# num是numbers_freq中的元素因此num是一个二维元组
                if num[1] == max_count:
                        modes.append(num[0])
        return modes

if __name__ == '__main__':
        scores = [5, 5, 5, 4, 4, 4, 9, 1, 3]
        modes = calculate_mode(scores)
        print('The mode(s) of the list of numbers are:')
        for mode in modes:
                print(mode)
PS C:\Users\Weihong> python ch3ex4.py
The mode(s) of the list of numbers are:
4
5


生成频率表格
PS C:\Users\Weihong> cat .\ch3ex5.py
"""
Frequency table for a list of numbers
"""

from collections import Counter

def frequency_table(numbers):
        table = Counter(numbers)
        print 'Number\tFrequency'
        for number in table.most_common():
                print('{0}\t{1}'.format(number[0], number[1]))

if __name__ == '__main__':
        scores = [7, 8, 9, 2, 10, 9, 9, 9, 9, 4, 5, 6, 1, 5, 6, 7, 8, 6, 1, 10]
        frequency_table(scores)
PS C:\Users\Weihong> python ch3ex5.py
Number  Frequency
9       5
6       3
1       2
5       2
7       2
8       2
10      2
2       1
4       1


按数字排序
PS C:\Users\Weihong> cat .\ch3ex6.py
"""
Frequency table for a list of numbers
Enhanced to display the table sorted by the numbers
"""
from collections import Counter

def frequency_table(numbers):
        table = Counter(numbers)
        numbers_freq = table.most_common( )
        numbers_freq.sort( )

        print('Number\tFrequency')
        for number in numbers_freq:
                print('{0}\t{1}'.format(number[0], number[1]))

if __name__ == '__main__':
        scores = [7, 8, 9, 2, 10, 9, 9, 9, 9, 4, 5, 6, 1, 5, 6, 7, 8, 6, 1, 10]
        frequency_table(scores)

PS C:\Users\Weihong> python ch3ex6.py
Number  Frequency
1       2
2       1
4       1
5       2
6       3
7       2
8       2
9       5
10      2


数据的分部

数据的范围
PS C:\Users\Weihong> cat .\ch3ex7.py
"""
Find the range
"""

def find_range(numbers):

        lowest = min(numbers)
        highest = max(numbers)
        # Find the range
        r = highest - lowest

        return lowest, highest, r

if __name__ == '__main__':
        donations = [100, 60, 70, 900, 100, 200, 500, 500, 503, 600, 1000, 1200]
        lowest, highest, r =  find_range(donations)
        print('Lowest: {0} Highest: {1} Range: {2}'.format(lowest, highest, r))

PS C:\Users\Weihong> python ch3ex7.py
Lowest: 60 Highest: 1200 Range: 1140


计算方差和标准差
PS C:\Users\Weihong> cat .\ch3ex8.py
"""
Find the variance and standard deviation of a list of numbers
"""

def calculate_mean(numbers):
        s = sum(numbers)
        N = len(numbers)
        # Calculate the mean
        mean = float(s)/N	#float()使s变成浮点数

        return mean

def find_differences(numbers):
        # Find the mean
        mean = calculate_mean(numbers)
        # Find the differences from the mean
        diff = []
        for num in numbers:
                diff.append(num - mean)
        return diff

def calculate_variance(numbers):
        #Find the list of differences
        diff = find_differences(numbers)
        #Find the squared differences
        squared_diff = []
        for d in diff:
                squared_diff.append(d**2)
        # Find the variance
        sum_squared_diff = sum(squared_diff)
        variance = sum_squared_diff/len(numbers)
        return variance

if __name__ == '__main__':
        donations = [100, 60, 70, 900, 100, 200, 500, 500, 503, 600, 1000, 1200]
        variance = calculate_variance(donations)
        print('The variance of the list of numbers is {0}'.format(variance))

        std = variance**0.5
        print('The standard deviation of the list of numbers is {0}'.format(std))

PS C:\Users\Weihong> python .\ch3ex8.py
The variance of the list of numbers is 141047.354167
The standard deviation of the list of numbers is 375.562716689


计算两组数据的关系
>>> simple_list1 = [1, 2, 3, 4]
>>> simple_list2 = [4, 5, 6, 7]
>>> for x, y in zip(simple_list1, simple_list2):
...     print(x, y)
...
(1, 4)
(2, 5)
(3, 6)
(4, 7)


>>> prod = []
>>> for x, y in zip(simple_list1, simple_list2):
...     prod.append(x*y)
...
>>> print prod
[4, 10, 18, 28]


计算相关系数
PS C:\Users\Weihong> cat ch3ex9.py
def find_corr_x_y(x, y):
        n = len(x)

        # Find the sum of the products
        prod = []
        for xi, yi in zip(x, y):
                prod.append(xi*yi)

        sum_prod_x_y = sum(prod)
        sum_x = sum(x)
        sum_y = sum(y)
        squared_sum_x = sum_x**2
        squared_sum_y = sum_y**2

        x_square = []
        for xi in x:
                x_square.append(xi**2)
        x_square_sum = sum(x_square)

        y_square = []
        for yi in y:
                y_square.append(yi**2)
        y_square_sum = sum(y_square)

        #Use formula to calculate correlation
        numerator = n*sum_prod_x_y - sum_x*sum_y
        denominator_term1 = n*x_square_sum - squared_sum_x
        denominator_term2 = n*y_square_sum - squared_sum_y
        denominator = (denominator_term1*denominator_term2)**0.5
        correlation = float(numerator)/denominator

        return correlation

if __name__ == '__main__':
        x = [1, 2, 3, 4, 5, 6]
        y = [3, 5, 0, 3, 10, 12]
        a = find_corr_x_y(x, y)
        print ('The correlation is {0}'.format(a))
PS C:\Users\Weihong> python ch3ex9.py
The correlation is 0.733103511309


高中成绩与大学入学考试之间的关系
做散点图
>>> x = [1, 2, 3, 4]
>>> y = [2, 4, 6, 8]
>>> import matplotlib.pyplot as plt
>>> plt.scatter(x,y)
<matplotlib.collections.PathCollection object at 0x052246B0>
>>> plt.show()


PS C:\Users\Weihong> cat .\ch3ex10.py
"""
the scatter figure
"""
import matplotlib.pyplot as plt

def fig(x, y):
        plt.scatter(x, y)
        plt.title('The Scatter Figure')
        plt.ylabel('College admission test scores') #注意格式，必须tab键
        plt.xlabel('High school grades')
        plt.show( )

if __name__ =='__main__':
        x = [90, 92, 95, 96, 87, 87, 90, 95, 98, 96]
        y = [85, 87, 86, 97, 96, 88, 89, 98, 98, 87]
        fig(x, y)


多图
PS C:\Users\Weihong> cat .\ch3ex11.py
import numpy as np

import matplotlib.pyplot as plt


plt.figure(1)

plt.figure(2)	# 创建图标2

ax1 = plt.subplot(211)	# 在图标2中 创建2列1行的空间，将第一（1）的位置命名为ax1

ax2 = plt.subplot(212)


x = np.linspace(0, 3, 100)

for i in xrange(5):
        plt.figure(1)
        plt.plot(x, np.exp(i*x/3))
        plt.sca(ax1)
        plt.plot(x, np.sin(i*x))
        plt.sca(ax2)
        plt.plot(x, np.cos(i*x))


plt.show()


PS C:\Users\Weihong> cat .\ch3ex12.py
import matplotlib.pyplot as plt

x = [1, 2, 3]
y1 = [ 1, 2, 3]
y2 = [2, 4, 6]

plt.subplot(211) 
plt.plot(x, y1)
plt.subplot(212)
plt.plot(x, y2)

plt.show()


PS C:\Users\Weihong> cat ch3ex13.py
"""
multi-scatter figures
"""

import matplotlib.pyplot as plt

x = [10.0, 8.0, 13.0, 9.0, 11.0, 14.0, 6.0, 4.0 ,12.0, 7.0, 5.0]
y1 = [8.04, 6.95, 7.58, 8.81, 8.33, 9.96, 7.24, 4.26, 10.84, 4.82, 5.68]
y2 = [9.14, 8.14,8.74, 8.77, 9.26, 8.10, 6.13, 3.10, 9.13, 7.26, 4.74]

plt.subplot(211)
plt.scatter(x, y1)
plt.title('The First Scatter')
plt.ylabel('y1')
plt.subplot(212)
plt.scatter(x, y2)
plt.title('The Second Scatter')
plt.xlabel('x1')
plt.ylabel('y2')
plt.show()


从一个文本文件中读取数据
PS C:\Users\Weihong> python ch3ex14.py
Sum of the numbers: 5733.0
PS C:\Users\Weihong> cat ch3ex14.py
#Find the sum of numbers stored in a file
def sum_data(filename):
        s = 0
        with open(filename) as f:	# with函数等价为Python中的with语句中要求对象实现__enter__和__exit__函数
                for line in f:
                        s = s + float(line)	# 将数字的形式改为浮点数
        print('Sum of the numbers: {0}'.format(s))

if __name__ == '__main__':
        sum_data('data.txt')

PS C:\Users\Weihong> python ch3ex14.py
Sum of the numbers: 5733.0


PS C:\Users\Weihong> cat ch3ex15.py
"""
Calculating the mean of numbers stored in a file
"""
def read_data(filename):

        numbers = []
        with open(filename) as f:
                for line in f:
                        numbers.append(float(line))

        return numbers

def calculate_mean(numbers):
        s = sum(numbers)
        N = len(numbers)
        mean = s/N

        return mean

if __name__ == '__main__':
        data = read_data('data.txt')
        mean = calculate_mean(data)
        print('Mean: {0}'.format(mean))

PS C:\Users\Weihong> python ch3ex15.py
Mean: 477.75


从一个CSV文件中读取数据
PS C:\Users\Weihong> cat number.csv
Number,squared
10,100
9,81
22,484

PS C:\Users\Weihong> cat ch3ex16.py
import csv

def read_csv(filename):

        numbers = []
        squared = []
        with open(filename) as f:
                reader = csv.reader(f)	#reader函数读取CSV文件，将文件对象f转为一个参数并返回一个指针指向CSV文件的第一行
                next(reader)		#指向下一行
                next(reader)		#指向下一行
                for row in reader:
                        print('The first number: {0}'.format(row[0]))
                        print('The second number:{0}'.format(row[1]))

if __name__ == '__main__':
        read_csv('number.csv')


PS C:\Users\Weihong> python ch3ex16.py
The first number: 9
The second number:81
The first number: 22
The second number:484


PS C:\Users\Weihong> cat ch3ex17.py
import csv
import matplotlib.pyplot as plt

def scatter_plot(x, y):
        plt.scatter(x, y)
        plt.xlabel('Number')
        plt.ylabel('Square')
        plt.show()

def read_csv(filename):

        numbers = []
        squared = []
        with open(filename) as f:
                reader = csv.reader(f)
                next(reader)
                for row in reader:
                        numbers.append(int(row[0]))
                        squared.append(int(row[1]))
                return numbers, squared

if __name__ == '__main__':
        numbers, squared = read_csv('number.csv')
        scatter_plot(numbers, squared)


习题
习题1

PS C:\Users\Weihong> cat ch3ex19.py
def find_corr_x_y(x, y):
#       L1 = len(x)
#       L2 = len(y)
        if len(x) != len(y):
                print('The two sets of numbers are of unequal size')
                return None

        n = len(x)

        # Find the sum of the products
        prod = []
        for xi, yi in zip(x, y):
                prod.append(xi*yi)

        sum_prod_x_y = sum(prod)
        sum_x = sum(x)
        sum_y = sum(y)
        squared_sum_x = sum_x**2
        squared_sum_y = sum_y**2

        x_square = []
        for xi in x:
                x_square.append(xi**2)
        x_square_sum = sum(x_square)

        y_square = []
        for yi in y:
                y_square.append(yi**2)
        y_square_sum = sum(y_square)

        #Use formula to calculate correlation
        numerator = n*sum_prod_x_y - sum_x*sum_y
        denominator_term1 = n*x_square_sum - squared_sum_x
        denominator_term2 = n*y_square_sum - squared_sum_y
        denominator = (denominator_term1*denominator_term2)**0.5
        correlation = float(numerator)/denominator

        return correlation

def generate_data(m, n):
        x = range(0, m)
        y = [4*xi for xi in range(0, n)]
        return x, y

if __name__ == '__main__':
        x, y = generate_data(7, 10)
        corr = find_corr_x_y(x, y)
        if not corr:
                print('Correlation could not be calculated')
        else:
                print('The correlation coefficient between x and y is {0}'.format(corr))

PS C:\Users\Weihong> python ch3ex19.py
The two sets of numbers are of unequal size
Correlation could not be calculated



习题2

PS C:\Users\Weihong> cat ch3ex20.py
"""
Calculate their mean, median, mode, variance, and standard deviation
"""

from collections import Counter

def calculate_mean(numbers):
        s = sum(numbers)
        N = len(numbers)
        mean = float(s) / N
        return mean

def calculate_median(numbers):
        N = len(numbers)
        if N % 2 == 0:
                m1 = N / 2 - 1
                m2 = N / 2
                median = (numbers[m1] + numbers[m2]) / 2
        else:
                m = (N + 1) / 2 -1
                median = numbers[m]

        return median

def calculate_mode(numbers):
        c = Counter(numbers)
        mode = c.most_common(1)
        return mode[0][0]

def calculate_variance(numbers):
        mean = calculate_mean(numbers)
        diff = []
        for num in numbers:
                diff.append(num - mean)

        squared_diff = []
        for d in diff:
                squared_diff.append(d**2)

        # Find the variance
        sum_squared_diff = sum(squared_diff)
        variance = sum_squared_diff/len(numbers)
        return variance

def read_data(filename):
        numbers = []
        with open(filename) as f:
                for line in f:
                        numbers.append(float(line))
        return numbers

if __name__ == '__main__':
        data = read_data('data.txt')
        mean = calculate_mean(data)
        median = calculate_median(data)
        mode = calculate_mode(data)
        variance = calculate_variance(data)
        std = variance**0.5
        print('The mean of the list is {0}'.format(mean))
        print('The median of the list is {0}'.format(median))
        print('The mode of the list is {0}'.format(mode))
        print('The variance of the list is {0}'.format(variance))
        print('The std of the list is {0}'.format(std))

PS C:\Users\Weihong> python ch3ex20.py
The mean of the list is 477.75
The median of the list is 350.0
The mode of the list is 500.0
The variance of the list is 141047.354167
The std of the list is 375.562716689


可以用python的库
'''
statistics_calculator.py

Read numbers from a file, calculate and print statistical measures:
mean, median, mode, variance, standard deviation
'''

from stats import mean, median, mode, variance_sd

def read_data(filename):
    numbers = []
    with open(filename) as f:
        for line in f:
            numbers.append(float(line))

    return numbers

if __name__=='__main__':
    data = read_data('mydata.txt')
    m = mean(data)
    median = median(data)
    mode = mode(data)
    variance, sd = variance_sd(data)
    print('Mean: {0:.5f}'.format(m))
    print('Median: {0:.5f}'.format(median))
    print('Mode: {0:.5f}'.format(mode))
    print('Variance: {0:.5f}'.format(variance))
    print('Standard deviation: {0:.5f}'.format(sd))


习题3 Experiment with Other CSV Data
习题3 Experiment with Other CSV Data

>>> a = [1, 2, 3, 4, 5, 6, 7]
>>> b = ['{1}-{0}'.format(a[i], a[i+1]) for i in range(len(a)-1)]
>>> b
['2-1', '3-2', '4-3', '5-4', '6-5', '7-6']
>>>


PS C:\Users\Weihong> python ch3ex21.py
Mean Growth:2562366.15385
Median Growth:2476370.00000
Variance Growth:188985554755.28403
Std Growth:434724.68846
PS C:\Users\Weihong> cat ch3ex21.py
"""
Calculate their mean, median, mode, variance, and standard deviation
"""

import csv
import matplotlib.pyplot as plt
import numpy as np

def read_csv(filename):

        years = []
        population = []
        with open(filename) as f:
                reader = csv.reader(f)
                next(reader)
                for row in reader:
                        year = row[0].split('-')[0]
                        years.append(year)
                        population.append(float(row[1]))
                years = years[::-1]
                population = population[::-1]
                growth = []
                for i in range(len(population)-1):
                        growth.append(population[i+1] - population[i])

        print('Mean Growth:{0:.5f}'.format(np.mean(growth)))
        print('Median Growth:{0:.5f}'.format(np.median(growth)))
        print('Variance Growth:{0:.5f}'.format(np.var(growth)))
        print('Std Growth:{0:.5f}'.format(np.std(growth)))

        return years, population, growth

def plot_population_diff(growth, years):

        xaxis_positions = range(0, len(years) - 1)
        xaxis_labels = ['{0} - {1}'.format(years[i], years[i+1]) for i in range(len(years) -1)]
        plt.plot( growth, 'r-')
        plt.title('Population Growth in consecutive years')
        plt.ylabel('Populaiton Growth')
        plt.xlabel('Year')
        plt.xticks(xaxis_positions, xaxis_labels,rotation=90)

if __name__ == '__main__':
        years, population, growth = read_csv('USA_SP_POP_TOTL.csv')
        plot_population_diff(growth, years)
        plt.show( )



习题4 percentile

PS C:\Users\Weihong> cat ch3ex22.py
"""
percentile_score.py

Calculate the number from a list of numbers which corresponds
to a specific percentile.

This implements the method described at
http://web.stanford.edu/class/archive/anthsci/anthsci192/anthsci192.1064/handouts/calculating%20percentiles.pdf
"""

def find_percentile_score(data, percentile):
        if percentile < 0 or percentile > 100:
                return None
        data.sort()
        if percentile == 0:
                return data[0]
        if percentile == 100:
                return data[-1]
        n = len(data)
        i = ((n*percentile)/100) + 0.5

        if i.is_integer():
                real_idx = int(i-1)
                return data[real_idx]
        else:
                k = int(i)
                f = i - k
                real_idx_1 = k - 1
                real_idx_2 = k
                return (1-f)*data[real_idx_1] + f*data[real_idx_2]

def read_data(filename):
        numbers = []
        with open(filename) as f:
                for line in f:
                        numbers.append(float(line))
        return numbers

if __name__ == '__main__':
        percentile = float(input('Enter the percentile score you want to calculate:'))
        data = read_data('marks.txt')
        percentile_score = find_percentile_score(data, percentile)
        if percentile_score:
                print('The score at {0} percentile: {1}'.format(percentile, percentile_score))
        else:
                print('Could not find the score corresponding to {0} percentile'.format(percentile))

PS C:\Users\Weihong> python ch3ex22.py
Enter the percentile score you want to calculate:26
The score at 26.0 percentile: 14.5



习题5: Creating a Grouped Frequency Table
PS C:\Users\Weihong> cat .\marks.txt
11
20
18
18
16
11
16
18
17
16.5
18.5
19.5
16.5
14.5
13.5
12.5
10.5
15.5
13.5
16.5
20
18
19.5
15
18


PS C:\Users\Weihong> cat ch3ex23.py
"""
grouped_frequency.py
Create a grouped frequency  table from a list of numbers
"""

def create_class(numbers, n):
        low = min(numbers)
        high = max(numbers)

        # width of each class
        width = (high - low) / n
        classes = []
        a = low
        b = low + width
        while a < (high - width):
                classes.append((a, b))
                a = b
                b = a + width
        # The last class may be of size
        # less than width
        classes.append((a, high+1))
#       print classes
        return classes					# classes((10.50, 15.25), (15.25, 21.00))

def classify(numbers, classes):
        # Create a list with the same number of elements
        # as the number of classes
        count = [0] * len(classes)			# count = [0, 0]
        for n in numbers:				# 在列表中的数 比如 18
                for index, c in enumerate(classes):	# for-loop 首先 index = 0，c=(10.50, 15.25). 18 不在范围里
                        if n >= c[0] and n < c[1]:	# index = 1， c = (15.25, 21.00), 18在范围里
                                count[index] += 1	# count[1] = count[1] + 1
                                break			# 退出当前for-loop 回到 for n in numbers：
#       print count
        return count

def read_data(filename):
        numbers = []
        with open(filename) as f:
                for line in f:
                        numbers.append(float(line))
        return numbers

if __name__ == '__main__':

        num_classes = int(input('Enter the number of classes:'))
        numbers = read_data('marks.txt')

        classes = create_class(numbers, num_classes)
        count = classify(numbers, classes)
        for c, cnt in zip(classes, count):		# zip函数
                print('{0:.2f} - {1:.2f} \t {2}'.format(c[0], c[1], cnt))

PS C:\Users\Weihong> python ch3ex23.py
Enter the number of classes:2
10.50 - 15.25    8
15.25 - 21.00    17

zip函数
>>> x = [1, 2, 3]
>>> y = [4, 5, 6]
>>> z = zip(x, y)
>>> z
[(1, 4), (2, 5), (3, 6)]


#########################################################
####chapter 3 Algebra and Symb olic Math with SymPy######
#########################################################

>>> import sympy
>>> from sympy import Symbol
>>> x = Symbol('x')
>>> x + x + 1
2*x + 1

>>> a = Symbol('y')	# a 可以看成是一个Symbol的对象，所创建的Symbol必须是字符串
>>> y + y + y +3
>>> a + a + a +3
3*y + 3


Working with Expressions

Factorizing and Expanding Expression
>>> from sympy import Symbol
>>> x = Symbol('x')
>>> y = Symbol('y')
>>> z = Symbol('z')
>>> from sympy import factor
>>> expr = x**2 - y**2
>>> factor(expr)
(x - y)*(x + y)


>>> from sympy import factor, expand
>>> from sympy import factor, expand, pprint
>>> expr = x**2 - y**2
>>> factor(expr)
(x - y)*(x + y)
>>> factors = factor(expr)
>>> expand(factors)
x**2 - y**2
>>> expr = expand(factors)
>>> expr
x**2 - y**2
>>> pprint(expr)
 2    2
x  - y

>>> expr = 1 + 2*x + 2*x**2
>>> pprint(expr)
   2
2*x  + 2*x + 1	# 从高次项到低次项

>>> from sympy import init_printing
>>> init_printing(order = 'rev - lex')
>>> pprint(expr)
>>> init_printing(order = 'rev-lex')
>>> pprint(expr)
             2
1 + 2*x + 2*x	# 从低次项到高次项


例子1
"""
Print the series:
x + x**2/2 + x**3/3 +.....x**n/n
"""

from sympy import Symbol, pprint, init_printing
def print_series(n):

        #Initialize printing system with reverse order
        init_printing(order='rev-lex')

        x = Symbol('x')	
        series = x
        for i in range(2, n+1):
                series = series + (x**i)/i
        pprint(series)

if __name__ == '__main__':
        n = input('Enter the number of terms you want in the series: ')
        print_series(int(n))
PS C:\Users\Weihong> python ch4ex1.py
Enter the number of terms you want in the series: 4
     2    3    4
    x    x    x
x + -- + -- + --
    2    3    4

数值带入

>>> from sympy import Symbol, pprint, init_printing
>>> x = Symbol('x')
>>> y = Symbol('y')
>>> x*x + x*y +x*y + y*y
x**2 + 2*x*y + y**2
>>> expr = x*x + x*y +x*y + y*y
>>> res = expr.subs({x:1, y:2})	# subs函数，{x:1, y:2}一个字典 
>>> res
9
>>> expr.subs({x:1-y})
y**2 + 2*y*(-y + 1) + (-y + 1)**2	# 也可以用代数式来替代

>>> expr_subs=expr.subs({x:1-y})
>>> from sympy import simplify
>>> simplify(expr_subs)	# 进一步简化，进行计算
1

计算一系列的数值

PS C:\Users\Weihong> cat ch4ex2.py
"""
print the series:
"""

from sympy import Symbol, pprint, init_printing
def print_series(n, x_value):

        # Initialize printing system with reverse order
        init_printing(order='rev-lex')

        x = Symbol('x')
        series = x
        for i in range(2, n+1):
                series = series + (x**i)/i

        pprint(series)

        # Evaluate the series at x_value
        series_value = series.subs({x:x_value})
        print('Value of the series at {0}:{1}'.format(x_value, series_value))

if __name__ == '__main__':
        n = input('Enter the number of terms you want in the series:')
        x_value = input('Enter the value of x at which you want to evaluate the series: ')

        print_series(int(n), float(x_value))

PS C:\Users\Weihong> python ch4ex2.py
Enter the number of terms you want in the series:5
Enter the value of x at which you want to evaluate the series: 1.2
     2    3    4    5
    x    x    x    x
x + -- + -- + -- + --
    2    3    4    5
Value of the series at 1.2:3.51206400000000


将字符串转化为数学表达式

>>> from sympy import sympify
>>> expr = raw_input('Enter a mathematical expression: ')	# python2.7 必须是raw_input
Enter a mathematical expression: x**2 + 3*x	# 输入格式必须正确
>>> expr=sympify(expr)	# sympify函数可以将字符串转变为数学表达式
>>> expr
x**2 + 3*x
>>> 2*expr
2*x**2 + 6*x


表达式的乘积

PS C:\Users\Weihong> cat ch4ex3.py
"""
Product of two expressions
"""

from sympy import expand, sympify
from sympy.core.sympify import SympifyError

def product(expr1, expr2):
        prod = expand(expr1*expr2)
        print(prod)

if __name__ == '__main__':
        expr1 = raw_input('Enter the first expression: ')
        expr2 = raw_input('Enter the second expression: ')

        try:
                expr1 = sympify(expr1)
                expr2 = sympify(expr2)
        except SympifyError:
                print('Invalid input')
        else:
                product(expr1, expr2)

PS C:\Users\Weihong> python ch4ex3.py
Enter the first expression: x**2 + x*2 + x
Enter the second expression: x**3 + x*3 + x
x**5 + 3*x**4 + 4*x**3 + 12*x**2


解方程
>>> from sympy import Symbol, solve
>>> x = Symbol('x')
>>> expr = x - 5 -7 # 默认数字为0
>>> solve(expr)
[12]

>>> from sympy import Symbol, solve
>>> x = Symbol('x')
>>> expr = x - 5 -7
>>> solve(expr)
[12]

>>> expr = x**2 + 5*x + 4
>>> solve(expr, dict=True)	# dict = True意味将输出文件的形式定位字典
[{x: -4}, {x: -1}]

>>> expr = x**2 + x + 4
>>> solve(expr, dict=True)
[{x: -1/2 - sqrt(15)*I/2}, {x: -1/2 + sqrt(15)*I/2}]	# 虚数的形式


解含参数的方程
>>> from sympy import Symbol, pprint, init_printing, solve
>>> x = Symbol('x')	
>>> a = Symbol('a')
>>> b = Symbol('b')
>>> c = Symbol('c')
>>> expr = a*x*x + b*x + c
>>> solve(expr, x, dict=True)	# 解方程 以x为未知数，结果以字典形式表示
[{x: (-b + sqrt(-4*a*c + b**2))/(2*a)}, {x: -(b + sqrt(-4*a*c + b**2))/(2*a)}]


>>> s = Symbol('s')
>>> u = Symbol('u')
>>> t = Symbol('t')
>>> a = Symbol('a')
>>> expr = u*t + (1/2)*a*t*t - s   # 书写错误，在python2.7中（1/2）不可以
>>> t_expr = solve(expr, t, dict = True)
>>> pprint(t_expr)
     s
[{t: -}]
     u
>>> expr = u*t + 0.5*a*t*t - s
>>> t_expr = solve(expr, t, dict = True)
>>> pprint(t_expr)
             ______________        /       ______________\
            /            2         |      /            2 |
     -u + \/  2.0*a*s + u         -\u + \/  2.0*a*s + u  /
[{t: ----------------------}, {t: -------------------------}]
               a                              a


解决线性代数
>>> x = Symbol('x')
>>> y = Symbol('y')
>>> expr1 = 2*x +3*y - 6
>>> expr2 = 3*x + 2*y - 12
>>> solve((expr1, expr2), dict = True)  # 解两个方程
[{x: 24/5, y: -6/5}]


>>> x = Symbol('x')
>>> y = Symbol('y')
>>> expr1 = 2*x +3*y - 6
>>> expr2 = 3*x + 2*y - 12
>>> solve((expr1, expr2), dict = True)
[{x: 24/5, y: -6/5}]
>>> soln = solve((expr1, expr2), dict = True) 
>>> soln	# soln是一个列表，第一个元素是一个字典
[{x: 24/5, y: -6/5}]
>>> soln = soln[0] # soln变成一个字典
>>> expr1.subs({x:soln[x], y:soln[y]})
0
>>> expr2.subs({x:soln[x], y:soln[y]})
0


用Sympy作图
matplotlib作图必须是数值，而Sympy则可以是方程
>>> from sympy.plotting import plot
>>> from sympy  import Symbol
>>> x = Symbol('x')
>>> plot(2*x+3)

>>> from sympy.plotting import plot
>>> from sympy  import Symbol
>>> x = Symbol('x')
>>> plot(2*x+3)
<sympy.plotting.plot.Plot object at 0x040CCE50>
>>> plot(2*x+3, (x, -5, 5), title = 'A Line', xlabel='x', ylabel='2x+3')	# (x, -5, 5)x的取值范围


输入方程并作图
>>> from sympy import sympify
>>> expr = sympify(expr)
>>> y = Symbol('y')	# 告诉SymPy哪一个是变量
>>> solve(expr, y)
[-2*x/3 + 2]



PS C:\Users\Weihong> cat ch4ex4.py
"""
Plot the graph of an input expression
"""

from sympy import Symbol, sympify, solve
from sympy.plotting import plot

def plot_expression(expr):

        y = Symbol('y')
        solutions = solve(expr, y)
        expr_y = solutions[0]
        plot(expr_y)

if __name__ == '__main__':

        expr = raw_input('Enter your expression in terms of x and y:')
        try:
                expr = sympify(expr)
        except SympifyError:
                print('Invalid input')
        else:
                plot_expression(expr)

PS C:\Users\Weihong> python ch4ex4.py
Enter your expression in terms of x and y:x*x - y


做多图
>>> from sympy.plotting import plot
>>> from sympy import Symbol
>>> x = Symbol('x')
>>> plot(2*x+3, 3*x+1)
<sympy.plotting.plot.Plot object at 0x0312D390>


>>> x = Symbol('x')
>>> p = plot(2*x+3, 3*x+1, legend=True, show=False)
>>> p[0].line_color = 'b'	# 使Sympy中的线有颜色
>>> p[1].line_color = 'r'
>>> p.show()


习题

习题1 Factor Finder

PS C:\Users\Weihong> python ch4ex5.py
Enter your expression in terms of x and y:x*x-y*y
(x - y)*(x + y)
PS C:\Users\Weihong> cat ch4ex5.py
"""
Factor Finder
"""

from sympy import sympify, factor, SympifyError

def factorize(expr):
        return factor(expr)


if __name__ == '__main__':

        expr = raw_input('Enter your expression in terms of x and y:')
        try:
                expr = sympify(expr)
        except SympifyError:
                print('Invalid input')
        else:
                print(factorize(expr))


习题2 

我的版本

PS C:\Users\Weihong> cat ch4ex6.py
"""
Graphical Equation Solver
"""
from sympy import sympify, SympifyError, Symbol, solve
from sympy.plotting import plot

def cal_solution(expr1, expr2):
        x = Symbol('x')
        y = Symbol('y')
        soln = solve((expr1, expr2), dict = True)
        soln = soln[0]
        return soln

def plot_fig(expr1, expr2):
        y = Symbol('y')	# 将x定义为未知数
        expr1 = solve(expr1, y)[0]	# 用x的表达式来描述y，solve(expr1, y)的输出是一个列表，将第一个值赋给expr1
        expr2 = solve(expr2, y)[0]
        plot(expr1, expr2)

if __name__ ==  '__main__':
        expr1 = raw_input('Enter your expression in terms of x and y: ')
        expr2 = raw_input('Enter your expression in terms of x and y: ')
        try:
                expr1 = sympify(expr1)
                expr2 = sympify(expr2)
        except SympifyError:
                print('Invalid input')
        else:
                #print(' x = {0} and y = {1}'.format(cal_solution(expr1, expr2)['x'],cal_solution(expr1, expr2)['y'] ))
                print(cal_solution(expr1, expr2))
                plot_fig(expr1, expr2)

PS C:\Users\Weihong> python ch4ex6.py
Enter your expression in terms of x and y: x-y-1
Enter your expression in terms of x and y: x+y-4
{x: 5/2, y: 3/2}



标准答案
'''

graphical_eq_solve.py

Graphical equation solver
'''

from sympy import Symbol, sympify, solve, SympifyError
from sympy.plotting import plot

def solve_plot_equations(eq1, eq2, x, y):
    # Solve
    solution = solve((eq1, eq2), dict=True)
    if solution:
        print('x: {0} y: {1}'.format(solution[0][x], solution[0][y]))
    else:
        print('No solution found')
    # Plot
    eq1_y = solve(eq1,'y')[0]
    eq2_y = solve(eq2, 'y')[0]
    plot(eq1_y, eq2_y, legend=True)
    
 

if __name__=='__main__':

    eq1 = input('Enter your first equation : ')
    eq2 = input('Enter your second equation: ')

    try:
        eq1 = sympify(eq1)
        eq2 = sympify(eq2)
    except SympifyError:
        print('Invalid input')
    else:
        x = Symbol('x')
        y = Symbol('y')
        # check if the expressions consist of only two variables
        eq1_symbols = eq1.atoms(Symbol)
        eq2_symbols = eq2.atoms(Symbol)
        
        if len(eq1_symbols)> 2 or len(eq2_symbols) > 2:
            print('The equations must have only two variables - x and y')
        elif x not in eq1_symbols or y not in eq1_symbols:
            print('First equation must have only x and y variables')
        elif x not in eq2_symbols or y not in eq2_symbols:
            print('Second equation must have only x and y variables')       
        else:
            solve_plot_equations(eq1, eq2, x, y)



习题3 Summing a Series

我的版本
PS C:\Users\Weihong> cat ch4ex7.py
"""
Summing a Series
"""
from sympy import sympify, SympifyError, Symbol, summation, pprint

def sum_expr(expr, num):
        a = Symbol('a')
        d = Symbol('d')
        n = Symbol('n')
        s = summation(expr, (n, 1, num))
        pprint (s)


if __name__ == '__main__':
        expr = raw_input('Enter the nth term: ')
        num = input('Enter the number of terms:')
        try:
                expr = sympify(expr)
        except SympifyError:
                print('Invalid input')
        else:
                sum_expr(expr, num)
PS C:\Users\Weihong> python ch4ex7.py
Enter the nth term: a+(n-1)*d
Enter the number of terms:3
3*a + 3*d

标准答案
'''
series_summation.py

Sum an arbitrary series
'''

from sympy import summation, sympify, Symbol, pprint
def find_sum(n_term, num_terms):
    n = Symbol('n')
    s = summation(n_term, (n, 1, num_terms))
    pprint(s)


if __name__ == '__main__':
    n_term = sympify(input('Enter the nth term: '))
    num_terms = int(input('Enter the number of terms: '))

    find_sum(n_term, num_terms)      


习题4 Solving Single-Variable Inequalities
>>> from sympy import Poly, Symbol, solve_poly_inequality
>>> x = Symbol('x')		# 告诉Sympy x是变量
>>> ineq_obj = -x**2 + 4 < 0	# 用ineq_obj来表示不等式
>>> lhs = ineq_obj.lhs		# 将不等式中的多项式-x**2+4（参数lhs）赋值于lhs
>>> p = Poly(lhs, x)		# 通过Poly函数，将不等式赋值于对象p
>>> rel = ineq_obj.rel_op	# 将关系式（rel_op参数）赋值于rel
>>> solve_poly_inequality(p, rel)
[(-oo, -2), (2, oo)]


>>> from sympy import Poly, Symbol, solve_rational_inequalities
>>> x = Symbol('x')
>>> ineq_obj = ((x-1)/(x+2)) > 0
>>> lhs = ineq_obj.lhs
>>> numer, denom = lhs.as_numer_denom()		# 通过as.numer_denom()函数 将分子与分母分别赋值于numer和denom
>>> p1 = Poly(numer)
>>> p2 = Poly(denom)
>>> rel = ineq_obj.rel_op
>>> solve_rational_inequalities([[((p1, p2), rel)]])
(-oo, -2) U (1, oo)


>>> from sympy import sin, Symbol, solve_univariate_inequality, solve
>>> x = Symbol('x')
>>> ineq_obj = sin(x) - 0.6 > 0
>>> solve_univariate_inequality(ineq_obj, x, relational=False)
(0.643501108793284, 2.49809154479651)

我的版本

PS C:\Users\Weihong> cat ch4ex8.py
"""
Solving Inequality
"""

from sympy import sympify, SympifyError, Symbol
from sympy import Poly, solve_poly_inequality, solve_rational_inequalities, solve_univariate_inequality

def sol_ineq(expr):
        x = Symbol('x')
        lhs = expr.lhs
        rel = expr.rel_op
        if lhs.is_polynomial():
                p = Poly(lhs, x)
                print(solve_poly_inequality(p, rel))
        elif lhs.is_rational_function():
                numer, denom = lhs.as_numer_denom()
                p1 = Poly(numer)
                p2 = Poly(denom)
                print(solve_rational_inequalities([[((p1, p2), rel)]]))
        else:
                print(solve_univariate_inequality(expr, x, relational=False))


if __name__ == '__main__':
        expr = raw_input('Enter the inequality: ')
        try:
                expr = sympify(expr)
        except SymifyError:
                print('Invalid input')
        else:
                sol_ineq(expr)

PS C:\Users\Weihong> python ch4ex8.py
Enter the inequality: -x**2+4 < 0
[(-oo, -2), (2, oo)]
PS C:\Users\Weihong> notepad ch4ex8.py
PS C:\Users\Weihong> python ch4ex8.py
Enter the inequality: ((x-1)/(x+2)) > 0
(-oo, -2) U (1, oo)
PS C:\Users\Weihong> python ch4ex8.py
Enter the inequality: sin(x)-0.6 > 0
(0.643501108793284, 2.49809154479651)


标准答案
''
isolve.py

Single variable inequality solver
'''

from sympy import Symbol, sympify, SympifyError
from sympy import solve_poly_inequality, solve_rational_inequalities, solve_univariate_inequality, Poly
from sympy.core.relational import Relational, Equality

def isolve(ineq_obj):
    x = Symbol('x')

    expr = ineq_obj.lhs
    rel = ineq_obj.rel_op
    
    if expr.is_polynomial():
        p = Poly(expr, x)
        return solve_poly_inequality(p, rel)
    elif expr.is_rational_function():
        p1, p2 = expr.as_numer_denom()
        num  = Poly(p1)
        denom = Poly(p2)
        return solve_rational_inequalities([[((num, denom), rel)]])
    else:
        return solve_univariate_inequality(ineq_obj , x, relational=False)

if __name__ == '__main__':
    ineq = input('Enter the inequality to solve: ')
    try:
        ineq_obj = sympify(ineq)
    except SympifyError:
        print('Invalid inequality')
    else:
        # We check if the input expression is an inequality here
        if isinstance(ineq_obj, Relational) and not isinstance(ineq_obj, Equality):
            print(isolve(ineq_obj))
        else:
            print('Invalid inequality')


#########################################################
#######chapter 4 Playing with Sets and Probability#######
#########################################################

集合的建立
>>> from sympy import FiniteSet
>>> s = FiniteSet(2, 4, 6)
>>> s
{2, 4, 6}

>>> from sympy import FiniteSet
>>> from fractions import Fraction
>>> s = FiniteSet(1, 1.5, Fraction(1, 5))	# 集合中的元素可以有多种
>>> s
{1/5, 1, 1.5}
>>> len(s)					# 通过len函数可以知道集合中元素的个数
3


>>> 4 in s		# 检查该数字是否在集合中
False
>>> 1 in s
True


>>> s = FiniteSet()	# 创建一个空的集合
>>> s
EmptySet()


>>> members = [1, 2, 3]
>>> s = FiniteSet(*members)	# 将列表中的元素传递至集合
>>> s
{1, 2, 3}


集合的重复和顺序
>>> members = [1, 2, 3, 2]
>>> FiniteSet(*members)
{1, 2, 3}
>>> s=FiniteSet(*members)
>>> for i in s:
...     print(i)	# 顺序可能不一样
...
1
2
3

>>> s = FiniteSet(3, 4, 5)	# 集合的顺序是任意的
>>> t = FiniteSet(5, 4, 3)
>>> s == t
True

子集、包含集、全子集
>>> s = FiniteSet(1)
>>> t = FiniteSet(1, 2)
>>> s.is_subset(t)	# s是t的子集
True
>>> t.is_subset(s)	# t不是s的子集
False

>>> s.is_superset(t)	# s不包含t
False
>>> t.is_superset(s)	# t包含s
True


>>> s = FiniteSet(1, 2, 3)
>>> ps = s.powerset()
>>> ps
{EmptySet(), {1}, {2}, {3}, {1, 2}, {1, 3}, {2, 3}, {1, 2, 3}}	# 列出全部子集


>>> from sympy import FiniteSet
>>> s = FiniteSet(1, 2, 3)	
>>> t = FiniteSet(1, 2, 3)
>>> s.is_proper_subset(t)	# s是t的真子集吗？不是
False
>>> t.is_proper_superset(s)	# t真包含于s吗？ 不是
False


>>> t = FiniteSet(1, 2, 3, 4)
>>> s.is_proper_subset(t)
True
>>> t.is_proper_superset(s)
True

集合的操作

并集和交集
>>> from sympy import FiniteSet
>>> s = FiniteSet(1, 2, 3)
>>> t = FiniteSet(2, 4, 6)
>>> s.union(t)		# 并集
{1, 2, 3, 4, 6}
>>> s.intersect(t)	# 交集
{2}

>>> u = FiniteSet(3, 5, 7)	# 多个集合的并集与交集
>>> s.union(t).union(u)
{1, 2, 3, 4, 5, 6, 7}
>>> s.intersect(t).intersect(u)
EmptySet()


笛卡尔积
>>> s = FiniteSet(1, 2)
>>> t = FiniteSet(3, 4)
>>> p = s*t		# 两个集合中所有元素对的集合
>>> p
{1, 2} x {3, 4}
>>> for elem in p:
...     print(elem)
...
(1, 3)
(1, 4)
(2, 3)
(2, 4)


应用一个方程去乘一个变量的集合

PS C:\Users\Weihong> cat ch5ex1.py
from sympy import FiniteSet, pi
def time_period(length):
        g = 9.8
        T = 2*pi*(length/g)**0.5
        return T

if __name__ == '__main__':
        L = FiniteSet(15, 18, 21, 22.5, 25)
        for l in L:
                t = time_period(l/100)
                print('Length:{0} cm Time Period:{1:.3f}s'.format(float(l), float(t)))

PS C:\Users\Weihong> python ch5ex1.py
Length:15.0 cm Time Period:0.777s
Length:18.0 cm Time Period:0.852s
Length:21.0 cm Time Period:0.920s
Length:22.5 cm Time Period:0.952s
Length:25.0 cm Time Period:1.004s


不同重力加速度，不同结果

PS C:\Users\Weihong> cat .\ch5ex2.py
from sympy import FiniteSet, pi

def time_period(length, g):

        T = 2*pi*(length/g)**0.5
        return T

if __name__ == '__main__':

        L = FiniteSet(15, 18, 21, 22.5, 25)
        g_values = FiniteSet(9.8, 9.78, 9.83)
        print('{0:^15}{1:^15}{2:^15}'.format('Length(cm)', 'Gravity(m/s^2)', 'Time Period(s)'))
        for elem in L*g_values:		# 笛卡尔积 所有长度与重力加速的组合
                l = elem[0]
                g = elem[1]
                t = time_period(l/100, g)

                print('{0:^15}{1:^15}{2:^15.3f}'.format(float(l), float(g), float(t)))	# 15表示长度， ^表示中点

PS C:\Users\Weihong> python ch5ex2.py
  Length(cm)   Gravity(m/s^2) Time Period(s)
     15.0           9.78           0.778
     15.0            9.8           0.777
     15.0           9.83           0.776
     18.0           9.78           0.852
     18.0            9.8           0.852
     18.0           9.83           0.850
     21.0           9.78           0.921
     21.0            9.8           0.920
     21.0           9.83           0.918
     22.5           9.78           0.953
     22.5            9.8           0.952
     22.5           9.83           0.951
     25.0           9.78           1.005
     25.0            9.8           1.004
     25.0           9.83           1.002


概率
PS C:\Users\Weihong> cat ch5ex3.py
from sympy import FiniteSet

def probability(space, event):
        return float(len(event))/len(space)

def check_prime(number):
        if number != 1:
                for factor in range(2, number):
                        if number % factor == 0:
                                return False
        else:
                return False
        return True

if __name__ == '__main__':
        space = FiniteSet(*range(1, 21))
        prime = []
        for num in space:
                if check_prime(num):
                        prime.append(num)
        event = FiniteSet(*prime)
        p = probability(space, event)

        print('Sample space:{0}'.format(space))
        print('Event:{0}'.format(event))
        print('Probability of rolling a prime:{0:.5f}'.format(p))
PS C:\Users\Weihong> python ch5ex3.py
Sample space:{1, 2, 3, ..., 18, 19, 20}
Event:{2, 3, 5, 7, 11, 13, 17, 19}
Probability of rolling a prime:0.40000


计算A事件或者B事件的概率

>>> from sympy import FiniteSet
>>> s = FiniteSet(1, 2, 3, 4, 5, 6)	
>>> a = FiniteSet(2, 3, 5)	# 质数
>>> b = FiniteSet(1, 3, 5)	# 奇数
>>> e = a.union(b)		# 两个集合的并集
>>> len(e)/len(s)
0
>>> float(len(e))/len(s)	# a或b发生的概率
0.6666666666666666


计算A事件和者B事件的概率
>>> e = a.intersect(b)		# a与b的交集
>>> float(len(e))/len(s)
0.3333333333333333


生成随机数
>>> import random
>>> random.randint(1,6)
1
>>> random.randint(1,6)
4


roll到一个数

PS C:\Users\Weihong> cat ch5ex4.py
"""
Roll a die until the total score is 20
"""

import matplotlib.pyplot as plt
import random

target_score = 20

def roll():
        return random.randint(1, 6)

if __name__ == '__main__':
        score = 0
        num_rolls = 0
        while score < target_score:
                die_roll = roll()
                num_rolls += 1
                print('Rolled: {0}'.format(die_roll))
                score += die_roll

        print('Score of {0} reached in {1} rolls'.format(score, num_rolls))

PS C:\Users\Weihong> python ch5ex4.py
Rolled: 6
Rolled: 6
Rolled: 1
Rolled: 6
Rolled: 4
Score of 23 reached in 5 rolls


到达目标数值的概率
PS C:\Users\Weihong> python ch5ex5.py
Enter the target score: 25
Enter the maximum number of rolls allowed: 5
Probability: 0.01620
PS C:\Users\Weihong> cat ch5ex5.py
from sympy import FiniteSet
import random

def find_prob(target_score, max_rolls):

        die_sides = FiniteSet(1, 2, 3, 4, 5, 6)
        # Sample space
        s = die_sides**max_rolls
        # Find the event set
        if max_rolls > 1:
                success_rolls = [ ]
                for elem in s:
                        if sum(elem) == target_score:
                                success_rolls.append(elem)
        else:
                if target_score > 6:
                        success_rolls = []
                else:
                        success_rolls = []
                        for roll in die_sides:
                                if roll >= target_score:
                                        success_rolls.append(roll)
        e = FiniteSet(*success_rolls)
        return float(len(e))/len(s)

if __name__ == '__main__':

        target_score = int(input('Enter the target score: '))
        max_rolls = int(input('Enter the maximum number of rolls allowed: '))
        p = find_prob(target_score, max_rolls)
        print('Probability: {0:.5f}'.format(p))


Nonuniform Random Numbers
PS C:\Users\Weihong> python ch5ex6.py
1.0
[0.16666666666666666, 0.3333333333333333, 0.6666666666666666, 1.0]
0.406368450062
20
PS C:\Users\Weihong> cat ch5ex6.py
"""
Simulate a fictional ATM that dispenses dollar bills
of various denominations with varying probability
"""

import random

def get_index(probability):
        c_probability = 0
        sum_probability = []
        for p in probability:
                c_probability += float(p)
                sum_probability.append(c_probability)
        print c_probability
        print sum_probability
        r = random.random()
        print r
        for index, sp in enumerate(sum_probability):
                if r <= sp:
                        return index
        return len(probability)-1

def dispense():

        dollar_bills = [5, 10, 20, 50]
        probability = [1.0/6, 1.0/6, 1.0/3, 1.0/3]
        bill_index = get_index(probability)
        return dollar_bills[bill_index]

if __name__ == '__main__':
        a = dispense()
        print a


习题
习题1
PS C:\Users\Weihong> cat ch5ex7.py
"""
Draw a Venn diagram for two sets
"""

from matplotlib_venn import venn2
import matplotlib.pyplot as plt
from sympy import FiniteSet

def draw_venn(sets):

        venn2(subsets=(s1,s2), set_labels=('S', 'T'))	#venn2函数 命名图中两个集合的名字
        plt.show()

if __name__ =='__main__':

        s1 = FiniteSet(1, 3, 5, 7, 9, 11, 13, 15, 17, 19)
        s2 = FiniteSet(2, 3, 5, 7, 11, 13, 17, 19)

        draw_venn([s1, s2])


PS C:\Users\Weihong> cat ch5ex8.py
import csv
from matplotlib_venn import venn2
import matplotlib.pyplot as plt
from sympy import FiniteSet

def read_csv(filename):
        football = []
        others = []
        with open(filename) as f:
                reader = csv.reader(f)
                next(reader)
                for row in reader:
                        if row[1] == '1':
                                football.append(row[0])
                        if row[2] == '1':
                                others.append(row[0])
        return football, others

def draw_venn(sets):

        venn2(subsets=(s1, s2), set_labels = ('football', 'others'))
        plt.show()

if __name__ == '__main__':

        football,others = read_csv('sports.csv')
        s1 = FiniteSet(*football)
        print s1
        s2 = FiniteSet(*others)
        print s2
        draw_venn([s1, s2])



习题2

我的答案

PS C:\Users\Weihong> cat ch5ex9.py
import random

def large_num_law(Trials):
        result = []
        for a in Trials:
                trial = 0
                num = 0
                while trial <= a:
                        ran = random.randint(1, 6)
                        num = num + ran
                        trial += 1
                print('Trials: {0} Trial average: {1:.3f}'.format(a, float(num)/a))

if __name__ == '__main__':
        Trials = [100, 1000, 10000, 100000, 500000]
        print 'Expected value: 3.5'
        large_num_law(Trials)
	PS C:\Users\Weihong> python ch5ex9.py
Expected value: 3.5
Trials: 100 Trial average: 3.530
Trials: 1000 Trial average: 3.467
Trials: 10000 Trial average: 3.488
Trials: 100000 Trial average: 3.493
Trials: 500000 Trial average: 3.504

标准答案
'''
law_ln.py

Verify the law of large numbers using a six sided die roll as an example
'''
import random

def roll(num_trials):
    rolls = []
    for t in range(num_trials):
        rolls.append(random.randint(1, 6))
    return sum(rolls)/num_trials

if __name__ == '__main__':
    expected_value = 3.5
    print('Expected value: {0}'.format(expected_value))
    for trial in [100, 1000, 10000, 100000, 500000]:
        avg = roll(trial)
        print('Trials: {0} Trial average {1}'.format(trial, avg))

PS C:\Users\Weihong> python ch5ex9a.py
Expected value: 3.5
Trials: 100 Trial average 3.48
Trials: 1000 Trial average 3.495
Trials: 10000 Trial average 3.5085
Trials: 100000 Trial average 3.51182
Trials: 500000 Trial average 3.497628


习题3
>>> import random
>>> random.random()

我的答案
PS C:\Users\Weihong> cat .\ch5ex10.py
import random

def game(start_amount):

        amount = start_amount
        toss = 0
        while amount > 0:
                delta = random.random()
                if delta > 0.5:
                        amount = amount + 1.0
                        print('Heads! Current amount: {0}'.format(amount))
                else:
                        amount = amount - 1.5
                        print('Tails! Current amount: {0}'.format(amount))
                toss += 1
        print('Game over: (Current amount: {0}, Coin tosses: {1})'.format(amount, toss))

if __name__  ==  '__main__' :

        start_amount = input('Enter your starting amount: ')
        game(start_amount)

PS C:\Users\Weihong> python ch5ex10.py
Enter your starting amount: 10.0
Tails! Current amount: 8.5
Tails! Current amount: 7.0
Heads! Current amount: 8.0
Tails! Current amount: 6.5
Tails! Current amount: 5.0
Tails! Current amount: 3.5
Heads! Current amount: 4.5
Tails! Current amount: 3.0
Tails! Current amount: 1.5
Tails! Current amount: 0.0
Game over: (Current amount: 0.0, Coin tosses: 10)


标准答案
'''
game_tosses.py

A player wins 1$ for every head and loses 1.5$ for every tail. 
The game is over when the player's balance reaches 0$
'''
import random

def play(start_amount):

    win_amount = 1
    loss_amount = 1.5

    cur_amount = start_amount
    tosses = 0

    while cur_amount > 0:
        tosses += 1
        toss = random.randint(0, 1)
        if toss == 0:
            cur_amount += win_amount
            print('Heads! Current amount: {0}'.format(cur_amount))
        else:
            cur_amount -= loss_amount
            print('Tails! Current amount: {0}'.format(cur_amount))
    print('Game over :( Current amount: {0}. Coin tosses: {1}'.format(cur_amount, tosses))

if __name__ == '__main__':
    start_amount = float(input('Enter your starting amount: '))
    play(start_amount)



习题4：Shuffling a Deck of Cards

PS C:\Users\Weihong> cat ch5ex11.py
"""
shuffle_enhanced.py
"""

import random

class Card:					# 创建一个叫Card的类
        def __init__(self, suite, rank):	# 两个属性
                self.suite = suite
                self.rank = rank

def initialize_deck():
        suites = ['Clubs', 'Diamonds', 'Hearts', 'Spades']
        ranks = ['Ace', '2', '3']
        cards = []
        for suite in suites:
                for rank in ranks:
                        card = Card(suite, rank)	# card是Card（）的一个实例化 全局变量
                        cards.append(card)
        return cards

def shuffle_and_print(cards):
        random.shuffle(cards)
        for card in cards:
                print('{0} 0f {1}'.format(card.rank, card.suite))

if __name__ == '__main__':
        cards = initialize_deck()
        shuffle_and_print(cards)

PS C:\Users\Weihong> python ch5ex11.py
3 0f Diamonds
2 0f Clubs
Ace 0f Clubs
2 0f Diamonds
Ace 0f Spades
3 0f Clubs
Ace 0f Hearts
2 0f Spades
3 0f Spades
Ace 0f Diamonds
2 0f Hearts
3 0f Hearts


习题5 Estimating the Area of a Circle
PS C:\Users\Weihong> cat ch5ex12.py
'''
estimate_circle_area.py

Estimate the area of a circle
'''
import math
import random

def estimate(radius, total_points):
        center = (radius, radius)

        in_circle = 0
        for i in range(total_points):
                x = random.uniform(0, 2*radius) # 生成一个实数在0到2*radius的区间里
                y = random.uniform(0, 2*radius)
                p = (x, y)
                # distance of the point created from circle's center
                d = math.sqrt((p[0] - center[0])**2 + (p[1] - center[1])**2)
                if d <= radius:
                        in_circle += 1

        area_of_square = (2*radius)**2
        return (float(in_circle)/total_points)*area_of_square

if __name__ == '__main__':
        radius = float(input('Radius: '))
        area_of_circle = math.pi*radius**2
        for points in [10**3, 10**5, 10**6]:
                print('Area: {0}, Estimated ({1}): {2}'. format(area_of_circle, points, estimate(radius, points)))

PS C:\Users\Weihong> python ch5ex12.py
Radius: 2
Area: 12.5663706144, Estimated (1000): 12.88
Area: 12.5663706144, Estimated (100000): 12.53568
Area: 12.5663706144, Estimated (1000000): 12.575472

Estimating the Value of Pi
PS C:\Users\Weihong> cat ch5ex13.py
"""
estimate_pi.py

Estimate the value of Pi
"""

import math
import random

def estimate(total_points):
        radius = 1
        center = (radius, radius)

        in_circle = 0
        for i in range(total_points):
                x = random.uniform(0, 2*radius)
                y = random.uniform(0, 2*radius)
                p = (x, y)
                # distance from circle's center
                d = math.sqrt((p[0] - center[0])**2 + (p[1] - center[1])**2)
                if d <= radius:
                        in_circle += 1
        return (float(in_circle)/total_points)*4

if __name__ == '__main__':
        for points in [10**3, 10**5, 10**6]:
                print('Known value: {0}, Estimated( {1}: {2})'. format(math.pi, points, estimate(points)))
PS C:\Users\Weihong> python ch5ex13.py
Known value: 3.14159265359, Estimated( 1000: 3.088)
Known value: 3.14159265359, Estimated( 100000: 3.14272)
Known value: 3.14159265359, Estimated( 1000000: 3.140652)





#########################################################
#####chapter 4 Drawing Geometric Shapes and Fractals#####
#########################################################
>>> import matplotlib.pyplot as plt
>>> x = [1, 2, 3]
>>> y = [1, 2, 3]
>>> plt.plot(x, y)
[<matplotlib.lines.Line2D object at 0x05124650>]
>>> plt.show()

>>> import matplotlib.pyplot as plt
>>> x = [1, 2, 3]
>>> y = [1, 2, 3]
>>> fig = plt.figure()
>>> ax = plt.axes()
>>> plt.plot(x, y)
[<matplotlib.lines.Line2D object at 0x052EA790>]
>>> plt.show()


Besides manually creating Figure and Axes objects, you can use two
different functions in the pyplot module to get a reference to the current
Figure and Axes objects. When you call the gcf() function, it returns a reference
to the current Figure, and when you call the gca() function, it returns
a reference to the current Axes. An interesting feature of these functions
is that each will create the respective object if it doesn’t already exist. How
these functions work will become clearer as we make use of them later in
this chapter.


Drawing a Circle
PS C:\Users\Weihong> cat ch6ex1.py
"""
Example of using matplotlib's Circle patch
"""

import matplotlib.pyplot as plt

def create_circle():
        circle = plt.Circle((0, 0), radius = 0.5)	# circle 是Circle程序的一个对象
        return circle					# 返回circle这个对象

def show_shape(patch):
        ax = plt.gca()					# ax是plt.gca()的一个对象，存储着当前坐标轴的信息
        ax.add_patch(patch)				# 一般我们不会直接对Axes.lines或者Axes.patches属性进行操作，
							# 而是调用add_line或者add_patch等方法，这些方法帮助我们完成许多属性设置工作：
							# 这里ax.add_patch(patch)将ax属性添加到patch中

	plt.axis('scaled')				# scaled自动调节坐标范围
        plt.show()

if __name__ == '__main__':
        c = create_circle()
        show_shape(c)



Creating Animated Figures
PS C:\Users\Weihong> cat ch6ex2.py
"""
A growing circle
"""

from matplotlib import pyplot as plt
from matplotlib import animation

def create_circle():
        circle = plt.Circle((0,0), 0.05)
        return circle

def update_radius(i, circle):
        circle.radius = i*0.5
        return circle,

def create_animation():
        fig = plt.gcf()
        ax = plt.axes(xlim=(-10, 10), ylim=(-10, 10))
        ax.set_aspect('equal')
        circle = create_circle()
        ax.add_patch(circle)
        anim = animation.FuncAnimation(fig, update_radius, fargs = (circle,), frames = 30, interval = 50)
        plt.title('Simple Circle Animation')
        plt.show()

if __name__ == '__main__':
        create_animation()


#########explaination##########
We start by importing the animation module from the matplotlib package.
The create_animation() function carries out the core functionality here.
It gets a reference to the current Figure object using the gcf() function at u
and then creates the axes with limits of –10 and 10 for both the x- and y-axes.
After that, it creates a Circle object that represents a circle with a radius
of 0.05 and a center at (0, 0) and adds this circle to the current axes at v.
Then, we create a FuncAnimation object w, which passes the following data
about the animation we want to create:

fig--This is the current Figure object.

update_radius--This function will be responsible for drawing every
frame. It takes two arguments (1)a frame number that is automatically
passed to it when called and (2) the patch object that we want to update
every frame. This function also must return the object.

update_radius函数有两个参数(1)frame的个数，该函数会自动传到该函数 
(2)这个patch的对象，这里是（circle，），后面有逗号说明这是一个元组


fargs This tuple consists of all the arguments to be passed to the
update_radius() function other than the frame number. If there are no
such arguments to pass, this keyword argument need not be specified.


frames This is the number of frames in the animation. Our function
update_radius() is called this many times. Here, we’ve arbitrarily chosen
30 frames.


interval This is the time interval in milliseconds between two frames.
If your animation seems too slow, decrease this value; if it seems too
fast, increase this value.

We then set a title using the title() function and, finally, show the figure
using the show() function.

As mentioned earlier, the update_radius() function is responsible for
updating the property of the circle that will change each frame. Here, we
set the radius to i*0.5, where i is the frame number. As a result, you see
a circle that grows every frame for 30 frames—thus, the radius of the largest
circle is 15. Because the axes’ limits are set at –10 and 10, this gives the
effect of the circle exceeding the figure’s dimensions. When you run the
program, you’ll see your first animated figure, as shown in Figure 6-3.
You’ll notice that the animation continues until you close the matplotlib
window. This is the default behavior, which you can change by setting
the keyword argument to repeat=False when you create the FuncAnimation
object.


Animating a Projectile’s Trajectory
PS C:\Users\Weihong> cat ch6ex3.py
"""
Animate the trajectory of an object in projectile motion
"""

from matplotlib import pyplot as plt
from matplotlib import animation
import math

g = 9.8

def get_intervals(u, theta):

        t_flight = 2*u*math.sin(theta)/g	# 飞行的时间
        intervals = []				# 间隔的列表
        start = 0				
        interval = 0.005
        while start < t_flight:
                intervals.append(start)
                start = start + interval	
        return intervals			# 返回intervals的列表为[0, 0.005, 0.010, 0.015 ...]

def update_position(i, circle, intervals, u, theta):

        t = intervals[i]
        x = u*math.cos(theta)*t
        y = u*math.sin(theta)*t - 0.5*g*t*t
        circle.center = x, y
        return circle,

def create_animation(u, theta):

        intervals = get_intervals(u, theta)

        xmin = 0
        xmax = u*math.cos(theta)*intervals[-1]
        ymin = 0
        t_max = u*math.sin(theta)/g
        ymax = u*math.sin(theta)*t_max - 0.5*g*t_max**2
        fig = plt.gcf()				# fig是plt.gcf的一个实例化

        ax = plt.axes(xlim = (xmin, xmax), ylim = (ymin, ymax))

        circle = plt.Circle((xmin, ymin), 1.0)
        ax.set_aspect('equal')
        ax.add_patch(circle)

        anim = animation.FuncAnimation(fig, update_position,		# 对象， 图片更改函数， update_position函数所需的变量
                        fargs = (circle, intervals, u, theta),		# 图片个数，时间间隔1ms，不重复
                        frames = len(intervals), interval=1,
                        repeat = False)

        plt.title('Projectile Motion')
        plt.xlabel('X')
        plt.ylabel('Y')
        plt.show()

if __name__ == '__main__':
        try:
                u = float(input('Enter the initial velocity(m/s): '))			# 初始速度，格式为float
                theta = float(input('Enter the angle of projection(degrees): '))	# 初始角度，格式为float
        except ValueError:
                print('You entered an invalid input')
        else:
                theta = math.radians(theta)	# 将角度变成弧度制
                create_animation(u, theta)	# 运行create_animation函数



Drawing Fractals

Transformations of Points in a Plane

>>> import random	
>>> l = [1, 2, 3]
>>> random.choice(l)	# 该函数用于元组，数列，字符串 当用于字符串时，返回一个随机的字符
1
>>> random.choice(l)
2
>>> random.choice(l)
3
>>> random.choice(l)
2
>>> random.choice(l)
3


PS C:\Users\Weihong> cat ch6ex4.py
"""
Example of selecting a transformation from two equally probable
transformations
"""

import matplotlib.pyplot as plt
import random

def transformation_1(p):
        x = p[0]
        y = p[1]
        return x + 1, y - 1

def transformation_2(p):
        x = p[0]
        y = p[1]
        return x + 1, y + 1

def transform(p):
        # List of transformation functions
        transformations = [transformation_1, transformation_2]
        # Pick a random transformation function and call it
        t = random.choice(transformations)	# 从transformations中随机选一个元素
        x, y = t(p)
        return x, y

def build_trajectory(p, n):
        x = [p[0]]	# 元组p的第一个元素
        y = [p[1]]	# 元组p的第二个元素
        for i in range(n):
                p = transform(p)
                x.append(p[0])
                y.append(p[1])
        return x, y

if __name__ ==  '__main__':
        #Initial point
        p = (1, 1)	# 初始点的坐标
        n = int(input('Enter the number of iterations: '))	#迭代次数
        x, y = build_trajectory(p, n)
        # Plot
        #plt.axes(xlim = (0, 100), ylim = (0,100))
        plt.plot(x, y)
        plt.xlabel('X')
        plt.ylabel('Y')
        plt.show()



Drawing the Barnsley Fern

PS C:\Users\Weihong> cat ch6ex5.py
"""
Draw a Barnsley Fern
"""

import random
import matplotlib.pyplot as plt

def transformation_1(p):
        x = p[0]
        y = p[1]
        x1 = 0.85*x + 0.04*y
        y1 = -0.04*x + 0.85*y + 1.6
        return x1, y1

def transformation_2(p):
        x = p[0]
        y = p[1]
        x1 = 0.2*x - 0.26*y
        y1 = 0.23*x + 0.22*y +1.6
        return x1, y1

def transformation_3(p):
        x = p[0]
        y = p[1]
        x1 = -0.15*x + 0.28*y
        y1 = 0.26*x + 0.24*y + 0.44
        return x1, y1

def transformation_4(p):
        x = p[0]
        y = p[1]
        x1 = 0
        y1 = 0.16*y
        return x1, y1

def get_index(probability):
        r = random.random()
#       print r
        c_probability = 0
        sum_probability = []
        for p in probability:
                c_probability += p
                sum_probability.append(c_probability)
        for item, sp in enumerate(sum_probability):
                if r <= sp:
#                       print item
                        return item

        return len(probability)-1

def transform(p):
        # List of transformation functions
        transformations = [transformation_1, transformation_2, transformation_3, transformation_4]
        probability = [0.85, 0.07, 0.07, 0.01]
        # Pick a random transformation function and call it
        tindex = get_index(probability)
        t = transformations[tindex]
#       print t
        x, y = t(p)
        return x, y

def draw_fern(n):
        # We start with(0, 0)
        x = [0]
        y = [0]

        x1, y1 = 0.0, 0.0
        for i in range(n):
                x1, y1 = transform((x1, y1))
                x.append(x1)
                y.append(y1)
#       print x, y
        return x, y

if __name__ == '__main__':
        n = int(input('Enter the number of points in the Fern: '))
        x, y = draw_fern(n)
        # Plot the points
        #plt.axes(xlim=(0,15), ylim=(0, 15))
        plt.plot(x, y, 'o')
        plt.title('Fern with {0} points'.format(n))
        plt.show()


习题
习题1 #1: Packing Circles into a Square
PS C:\Users\Weihong> cat ch6ex6.py
"""
Draw a square
"""

from matplotlib import pyplot as plt

def draw_square():
        ax = plt.axes(xlim = (0, 6), ylim = (0, 6))
        square = plt.Polygon([(1, 1), (5, 1), (5, 5), (1, 5)], closed = True)
        ax.add_patch(square)
        plt.show()

if __name__ == '__main__':
        draw_square()


PS C:\Users\Weihong> cat ch6ex7.py
"""
Packing Circle into a Square
"""
from matplotlib import pyplot as plt

def draw_square():
        square = plt.Polygon([(1, 1), (5, 1), (5, 5), (1, 5)], closed = True)
        return square

def draw_circle(x, y):
        circle = plt.Circle((x, y), radius = 0.5, fc = 'w')
        return circle

def pack():
        ax = plt.axes(xlim = (1, 5), ylim = (1, 5))
        s = draw_square()
        ax.add_patch(s)
        y = 1.5
        while y < 5:
                x = 1.5
                while x < 5:
                        c = draw_circle(x, y)
                        ax.add_patch(c)
                        x += 1.0
                y += 1.0

        plt.axis('scaled')
        plt.show()

if __name__ == '__main__':
        pack( )


标准答案

'''
circle_in_square.py

Circles in a square
'''

from matplotlib import pyplot as plt

def draw_square():
    square = plt.Polygon([(1, 1), (5, 1), (5, 5), (1, 5)], closed=True)
    return square

def draw_circle(x, y):
    circle = plt.Circle((x, y), radius=0.5, fc='y')
    return circle

if __name__ == '__main__':

    ax = plt.gca()
    s = draw_square()
    ax.add_patch(s)
    y = 1.5
    while y < 5:
        x = 1.5
        while x < 5:
            c = draw_circle(x, y)
            ax.add_patch(c)

            x += 1.0
        y += 1.0

    plt.axis('scaled') 
    plt.show()  


习题2 #2: Drawing the Sierpin′ ski Triangle
PS C:\Users\Weihong> cat ch6ex8.py
"""
Drawing the Triangle
"""
import random
import matplotlib.pyplot as plt

def transformation_1(p):
        x = p[0]
        y = p[1]
        x1 = 0.5*x
        y1 = 0.5*y
        return x1, y1

def transformation_2(p):
        x = p[0]
        y = p[1]
        x1 = 0.5*x + 0.5
        y1 = 0.5*y + 0.5
        return x1, y1

def transformation_3(p):
        x = p[0]
        y = p[1]
        x1 = 0.5*x + 1
        y1 = 0.5*y
        return x1, y1

def get_index(probability):
        r = random.random()
#       print r
        c_probability = 0
        sum_probability = []
        for p in probability:
                c_probability += p
                sum_probability.append(c_probability)
#       print sum_probability
        for item, sp in enumerate(sum_probability):
                if r <= sp:
#                       print item
                        return item
        #return len(probability)-1

def transform(p):
        # List of transformation functions
        transformations = [transformation_1, transformation_2, transformation_3]
        probability = [1.0/3, 1.0/3, 1.0/3]
        # Pick a random transformation function and call it
        tindex = get_index(probability)
        t = transformations[tindex]
        x, y = t(p)
#       print x, y
        return x, y

def draw_tri(n):
        x = [0]
        y = [0]

        x1, y1 = 0.0, 0.0
        for i in range(n):
                x1, y1 = transform((x1, y1))
                x.append(x1)
                y.append(y1)
        return x, y

if __name__ == '__main__':
        n = int(input('Enter the number of points in this Triangle: '))
        x, y = draw_tri(n)
        plt.plot(x, y, 'o')
        plt.title('Triangle with {0} points'.format(n))
        plt.show()



习题3 #3 Exploring Hénon’s Function
PS C:\Users\Weihong> cat ch5ex9.py
"""
Exploring Henon's Function
"""
import matplotlib.pyplot as plt

def transformation(p):
        x = p[0]
        y = p[1]
        x1 = y + 1 - 1.4*x*x
        y1 = 0.3 * x

        return x1, y1

def draw(n):
        x = [1]
        y = [1]

        x1, y1 = 1.0, 1.0
        for i in range(n):
                x1, y1 = transformation((x1, y1))
                x.append(x1)
                y.append(y1)
        return x, y

if __name__ == '__main__':
        n = int(input('Enter the number of points: '))
        x, y = draw(n)
        plt.plot(x, y, 'o')
        plt.title('Triangle with {0} points'. format(n))
        plt.show()



































































































