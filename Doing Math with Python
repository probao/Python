#########################################################
###############chapter 1 working with numbers############
#########################################################

下取整数 //
>>>12 // 5
>>>2

取余数 %
>>> 9 % 2
1
>>>

阶乘 **
>>> 2 ** 2
4
>>> 2 ** 10
1024
>>> 64 ** (1/2)   # python 2.7中1/2是0
1
>>> 64 ** (1.0/2) # （1.0）/2 是0.5
8.0


括号（）
>>> 5 + 5 * 5
30
>>> (5 + 5) * 5
50

int函数 #去掉小数部分，保留整数
>>> int(3.8)
3
>>> int(1.4)
1
>>> int(-1.3)
-1


通过fraction模块
>>> from fractions import Fraction
>>> f = Fraction(3, 4)
>>> f
Fraction(3, 4)
>>> f + 1   # 如果式子中只含有Fraction以及整数时，结果依旧是一个fraction
Fraction(7, 4)
>>> f + 1 + 1.5 # 如果式子中含有Fraction以及浮点数时，结果就是浮点数。
3.25


复数
>>> a = 2 + 3j
>>> type(a)
<type 'complex'>
>>> b = complex(3, 3)
>>> b
(3+3j)
>>> a + b
(5+6j)
>>> a - b
(-1+0j)
(-3+15j)
>>> a / b
(0.8333333333333334+0.16666666666666666j)
>>> z = 2 + 3j
>>> z.real
2.0
>>> z.imag
3.0
>>> (z.real ** 2 + z.imag ** 2) ** 0.5
3.605551275463989
>>> abs(z)
3.6055512754639896


Getting User Input

>>> a = input()
12
>>> a
12
>>> a = '1'
>>> int(a)+1
2
>>> float(a) + 1
2.0
>>> int ('2.0')		# int()函数不能使一个含小数的字符串变成整数
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: invalid literal for int() with base 10: '2.0'

>>> a = int(input())
1
>>> a + 1
2
>>> a = int(input())  # python2.7 浮点数也可以
1.0
>>> a + 1
2

分数和负数的输入
>>> a = Fraction(input('Enter a fraction: '))
Enter a fraction: 3/4   # python 2.7 3/4 都是整数
>>> a
Fraction(0, 1)
>>> a = Fraction(input('Enter a fraction: '))
Enter a fraction: 3.0/4
>>> a
Fraction(3, 4)


>>> a = Fraction(input('Enter a fraction: '))
Enter a fraction: 3.0/4
>>> a
Fraction(3, 4)
>>> a = Fraction(input('Enter a fraction: '))
Enter a fraction: 3/0
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<string>", line 1, in <module>
ZeroDivisionError: integer division or modulo by zero

>>> try:
...     a = Fraction(input('Enter a fraction: '))
... except ZeroDivisionError:
...     print('Invalid fraction')
...
Enter a fraction: 3/0
Invalid fraction


>>> z = complex(input('Enter a complex number: '))
Enter a complex number: 2+3j
>>> z
(2+3j)


用程序来做数学
PS C:\Users\Weihong> cat .\ch1ex2.py
def is_factor(a, b):
        if b % a == 0:
                print 'True'
        else:
                print 'False'

a = int(input(' number a: '))
b = int(input(' number b: '))

is_factor(a, b)
PS C:\Users\Weihong> python .\ch1ex2.py
 number a: 4
 number b: 8
True

>>> for i in range(1, 4):
...     print(i)
...
1
2
3
>>> for i in range(5):
...     print(i)
...
0
1
2
3
4
>>> for i in range(1, 11, 2):
...     print(i)
...
1
3
5
7
9

求整数的因子

PS C:\Users\Weihong> cat .\ch1ex3.py
# find the factors of an integer

def factors(b):

        for i in range(1, b+1):
                if b % i == 0:
                        print  (i)

if __name__ == '__main__':

        b = input('Your Number Please: ')
        b = float(b)

        if b > 0 and b.is_integer():
                factors(int(b))
        else:
                print('Please enter a positive integer')

PS C:\Users\Weihong> python .\ch1ex3.py
Your Number Please: 12
1
2
3
4
6
12
PS C:\Users\Weihong> python .\ch1ex3.py
Your Number Please: -9
Please enter a positive integer


format函数
它通过{}和:来代替%。
“映射”示例

通过位置
>>> '{0},{1}'.format('kzc',18)
'kzc,18'
>>> '{},{}'.format('kzc',18)
'kzc,18'
>>> '{1},{0},{1}'.format('kzc',18)
'18,kzc,18'
字符串的format函数可以接受不限个参数，位置可以不按顺序，可以不用或者用多次，不过2.6不能为空{}，2.7才可以。

通过关键字参数
>>> '{name},{age},{name}'.format(age=18,name='kzc')
'kzc,18,kzc'

通过下标
>>> p = ['kzc',18,'apple']
>>> '{0[0]},{0[2]},{0[1]}'.format(p)
'kzc,apple,18'

填充与对齐
填充常跟对齐一起使用
^、<、>分别是居中、左对齐、右对齐，后面带宽度
:号后面带填充的字符，只能是一个字符，不指定的话默认是用空格填充
>>> '{:>5}'.format('189')
'  189'
>>> '{:0>5}'.format('189')
'00189'

精度与类型f
精度常跟类型f一起使用
>>> '{:.2f}'.format(1.567)
'1.57'
>>> '{:.2f}'.format(1.597)
'1.60'

用，号还能用来做金额的千位分隔符。
>>> '{:,}'.format(1234567890)
'1,234,567,890'


乘法表生成
PS C:\Users\Weihong> cat .\ch1ex4.py
# Multiplication table printer

def multi_table(a):

        for i in range(1, 11):
                print('{0} * {1} = {2}'.format(a, i, a*i))

if __name__ == '__main__':		# 你运行当前脚本，就会执行if __name__=="__main__"下的函数，如果你是当模块被其他程序import的，那么就不会执行。
        a = input('Enter a number: ')   # 主要是测试用，测试你写的这个模块有没有实现你想要的功能 
        multi_table(float(a))        
	
PS C:\Users\Weihong> python ch1ex4.py
Enter a number: 4                    
4.0 * 1 = 4.0                        
4.0 * 2 = 8.0                        
4.0 * 3 = 12.0                       
4.0 * 4 = 16.0                       
4.0 * 5 = 20.0                       
4.0 * 6 = 24.0                       
4.0 * 7 = 28.0                       
4.0 * 8 = 32.0                       
4.0 * 9 = 36.0                       
4.0 * 10 = 40.0   


转换单位

PS C:\Users\Weihong> cat .\ch1ex5.py
#Unit convert: Miles and Kilometers

def print_menu():
        print('1. Kilometers to Miles')
        print('2. Miles to Kilometers')

def km_miles( ):
        km = float(input('Enter distance in kilometers: '))
        miles = km/1.609

        print('Distance in miles:{0}'.format(miles))
def miles_km( ):
        miles = float(input('Enter distance in miles: '))
        km = miles * 1.609

        print('Distance in kilometers:{0}'.format(km))

if __name__ == '__main__':
        print_menu()
        choice = input('Which conversion would you like to de?: ')
        if choice ==  1:			# 在python 2.7中 input函数的结果是数字类型
        #if choise == '1':			# 这里'1'表示字符串
                km_miles( )
        if choice ==  2:
                miles_km( )


PS C:\Users\Weihong> python .\ch1ex5.py
1. Kilometers to Miles
2. Miles to Kilometers
Which conversion would you like to de?: 1
Enter distance in kilometers: 23
Distance in miles:14.2945929149


计算二次函数的根
PS C:\Users\Weihong> cat .\ch1ex6.py
#Quadratic equation root calculator

def roots(a, b, c):

        D = (b*b - 4*a*c)**0.5
        x_1 = (-b + D ) / (2*a)
        x_2 = (-b - D ) / (2*a)

        print('x1: {0}'.format(x_1))
        print('x2: {0}'.format(x_2))

if  __name__ == '__main__':
        a = input('Enter a: ')
        b = input('Enter b: ')
        c = input('Enter c: ')
        roots(float(a), float(b), float(c))
PS C:\Users\Weihong> python .\ch1ex6.py
Enter a: 1
Enter b: 2
Enter c: 1
x1: -1.0
x2: -1.0


def roots(a, b, c):

        D = (b*b - 4*a*c)**0.5
        x_1 = (-b + D ) / (2*a)
        x_2 = (-b - D ) / (2*a)

        print('x1: {0}'.format(x_1))
        print('x2: {0}'.format(x_2))

if  __name__ == '__main__':
        a = input('Enter a: ')
        b = input('Enter b: ')
        c = input('Enter c: ')
        roots(complex(a), complex(b), complex(c))

PS C:\Users\Weihong> python .\ch1ex6.py
Enter a: 1
Enter b: 1
Enter c: 1
x1: (-0.5+0.866025403784j)
x2: (-0.5-0.866025403784j)
PS C:\Users\Weihong> python .\ch1ex6.py
Enter a: 1
Enter b: 2
Enter c: 1
x1: (-1+0j)
x2: (-1+0j)
PS C:\Users\Weihong> cat .\ch1ex6.py
#Quadratic equation root calculator




奇偶数判断并打印出之后的10个相应数字
PS C:\Users\Weihong> cat .\ch1ex7.py
def odd_or_even(a):
        if a% 2 == 1:
                print 'This an odd number.'
                for i in range(1, 11):
                        print a
                        a  = a + 2
        else:
                print 'This an even number.'
                for i in range(1, 11):
                        print a
                        a  = a + 2

if __name__ == '__main__':

        a = input('Your Number Please: ')
        a = float(a)

        if a > 0 and a.is_integer():
                odd_or_even(int(a))

        else:
                print('Please enter a positive integer')

PS C:\Users\Weihong> python .\ch1ex7.py
Your Number Please: 5
This an odd number.
5
7
9
11
13
15
17
19
21
23
PS C:\Users\Weihong> python .\ch1ex7.py
Your Number Please: 6
This an even number.
6
8
10
12
14
16
18
20
22
24


强化版乘法表生成

PS C:\Users\Weihong> cat .\ch1ex8.py
# Multiplication table printer

def multi_table(a, b, c):

        for i in range(b, c):
                print('{0} * {1} = {2}'.format(a, i, a*i))

if __name__ == '__main__':
        a = input('Enter a number: ')
        b = input('Enter the first number: ')
        c = input('Enter the last number: ')
        c = c + 1
        multi_table(a, b, c)
PS C:\Users\Weihong>


PS C:\Users\Weihong> python .\ch1ex8.py
Enter a number: 3
Enter the first number: 4
Enter the last number: 12
3 * 4 = 12
3 * 5 = 15
3 * 6 = 18
3 * 7 = 21
3 * 8 = 24
3 * 9 = 27
3 * 10 = 30
3 * 11 = 33
3 * 12 = 36



#########################################################
##########charpter 2 Visualizing Data With Graphs########
#########################################################

列表和元组
列表
>>> simplelist = [1, 2, 3]
>>> simplelist = [0]
>>> simplelist = [1, 2, 3]
>>> simplelist[0]
1
>>> simplelist[1]
2
>>> simplelist[2]
3


>>> stringlist = ['a string', 'b string', 'c string']
>>> stringlist[0]
'a string'
>>> stringlist[1]
'b string'
>>> stringlist[2]
'c string'


>>> emptylist.append(1)
>>> emptylist
[1]
>>> emptylist.append(2)
>>> emptylist
[1, 2]


元组
>>> simpletuple = (1, 2, 3)
>>> simpletuple[0]
1
>>> simpletuple[1]
2
>>> simpletuple[2]
3
元组不能用append函数


列表与元组的迭代
>>> l = [1, 2, 3]
>>> for item in l:
...     print(item)
...
1
2
3




通过Matplotlib作图

>>> x_numbers = [1, 2, 3]
>>> y_numbers = [2, 4, 6]
>>> from pylab import plot,show
>>> plot(x_numbers, y_numbers)
[<matplotlib.lines.Line2D object at 0x05A36C50>]
>>> show()
>>>

生成纽约市的年平均温度
>>> nyc_temp = [53.9, 56.3, 56.4, 53.4, 54.5, 55.8, 56.8 ,55.0, 55.3, 56.7, 56.4, 57.3]
>>> plot(nyc_temp, marker='o')
[<matplotlib.lines.Line2D object at 0x05DDF770>]
>>> show()
生成的图是从0开始的

>>> nyc_temp = [53.9, 56.3, 56.4, 53.4, 54.5, 55.8, 56.8 ,55.0, 55.3, 56.7, 56.4, 57.3]
>>> years = range(2000, 2012)
>>> plot(years, nyc_temp, marker='o')
[<matplotlib.lines.Line2D object at 0x06431390>]
>>> show()
x坐标是2000到2011


>>> nyc_temp_2000 = [31.3, 37.3, 47.2, 51.0, 63.5, 71.3, 72.7, 66.0, 57.0, 45.3, 31.1]
>>> nyc_temp_2006 = [40.9, 35.7, 43.1, 55.7, 63.1, 71.0, 77.9, 66.6, 56.2, 51.9, 43.6]
>>> nyc_temp_2012 = [37.3, 40.9, 50.9, 54.8, 65.1, 71.0, 78.8, 68.8, 58.0, 43.9, 41.5]
>>> months = range(1, 12)
>>> plot(months, nyc_temp_2000, months, nyc_temp_2006, months, nyc_temp_2012)
[<matplotlib.lines.Line2D object at 0x0E633710>, <matplotlib.lines.Line2D object at 0x0E633810>,
D object at 0x0E633B90>]
>>> show()
图中没有标明颜色


增加legend
>>> y1 = [1, 2, 3, 4]
>>> y2 = [2, 6, 4, 7]
>>> x1 = range(1, 5)
>>> plot(x1, y1, x1, y2)
[<matplotlib.lines.Line2D object at 0x0E6B54D0>, <matplotlib.lines.Line2D object at 0x0E6B5510>]
>>>
>>> from pylab import legend
>>> legend(['haha','xixi'])        # 每条线命名
<matplotlib.legend.Legend object at 0x0E6B5890>
>>> show()

改变legend的位置
>>> y1 = [1, 2, 3, 4]
>>> y2 = [2, 6, 4, 7]
>>> x1 = range(1, 5)
>>> plot(x1, y1, x1, y2)
[<matplotlib.lines.Line2D object at 0x05C895B0>, <matpl
>>>
>>> from pylab import legend
>>> legend(['xixi','haha'], loc='upper left') #改变legend的位置
<matplotlib.legend.Legend object at 0x05C89610>
>>> show()


个性化图
增加表头和坐标名
>>> from pylab import plot, show, title, xlabel, ylabel, legend
>>> y1=[1, 2, 3, 4, 5]
>>> y2=[3, 2, 1, 7, 2]
>>> x=range(1,6)
>>> plot(x, y1, x, y2)
[<matplotlib.lines.Line2D object at 0x051E79F0>, <matplotlib.lines.Line2D object at
>>> title('the first plot')		# 表头
<matplotlib.text.Text object at 0x051C98D0>
>>> xlabel('x-axis')			# x坐标的名字
<matplotlib.text.Text object at 0x04FB11B0>
>>> ylabel('y-axis')			# y坐标的名字
<matplotlib.text.Text object at 0x051B01B0>
>>> legend(['num1','num2'])		# 线的名字
<matplotlib.legend.Legend object at 0x051B0930>
>>> show()

坐标轴的设计
>>> nyc_temp = [53.9, 56.3, 56.4, 53.4, 54.5, 55.8, 56.8, 55.0, 55.3, 54.0, 56.7, 56.4, 57.3]
>>> months = range(0,13)
>>> plot(months, nyc_temp, marker='o')
[<matplotlib.lines.Line2D object at 0x05422690>]
>>> from pylab import axis
>>> axis()
(0.0, 12.0, 53.0, 57.5)  # 默认区间
>>> axis(ymin=0)
(0.0, 12.0, 0, 57.5)	# 可以通过ymin，ymax。。改变区间
>>> show()


用pyplot作图
PS C:\Users\Weihong> cat .\ch2ex1.py
# Simple plot using pyplot

import matplotlib.pyplot

def create_graph():
        x_numbers = [1, 2, 3]
        y_numbers = [2, 4, 6]

        matplotlib.pyplot.plot(x_numbers, y_numbers)
        matplotlib.pyplot.show()

if __name__ == '__main__':
        create_graph()


To save us some typing, we can import the pyplot module by entering
import matplotlib.pyplot as plt. Then, we can refer to pyplot with the label
plt in our programs, instead of having to always type matplotlib.pyplot:
为了节约打字时间，可以将matplotlib.pyplot命名为plt
PS C:\Users\Weihong> cat .\ch2ex2.py
# Simple plot using pyplot

import matplotlib.pyplot as plt

def create_graph():
        x_numbers = [1, 2, 3]
        y_numbers = [2, 4, 6]

        plt.plot(x_numbers, y_numbers)
        plt.show()

if __name__ == '__main__':
        create_graph()


保存图片
>>> from pylab import plot,savefig
>>> x = [1, 2, 3]
>>> y = [2, 4, 6]
>>> plot(x, y)
[<matplotlib.lines.Line2D object at 0x05D039F0>]
>>> savefig('mypraph.png')


通过公式作图

万有引力定律
PS C:\Users\Weihong> cat .\ch2ex3.py
# The relationship between gravitational force and
# distance between two bodies

import matplotlib.pyplot as plt

# Draw the graph
def draw_graph(x, y):
        plt.plot(x, y, marker='o')
        plt.xlabel('Distance in meters')
        plt.ylabel('Gravitational force in newtons')
        plt.title('Gravitational force and distance')
        plt.show()

def generate_F_r():
        # Generate values for r
        r = range(100, 1001, 50)
        # Empty list to store the calculated values of F
        F = []

        # Constant, G
        G = 6.674*(10**-11)
        # Two masses
        m1 = 0.5
        m2 = 1.5

        # Calculate force and add it to the list, F
        for dist in r:
                force = G*(m1*m2)/(dist**2)
                F.append(force)

        # call the draw_graph function
        draw_graph(r, F)

if  __name__=='__main__':
        generate_F_r()


抛物线定律
#Draw the trajectory of a body in projectile motion

from matplotlib import pyplot as plt
import math

def draw_graph(x, y):
	plt.plot(x, y)
	plt.xlabel('x-coordinate')
	plt.ylabel('y-coordinate')
	plt.title('Projectile motion of a ball')

def frange(start, final, increment):

	numbers = []
	while start < final:
		numbers.append(start)
		start = start + increment
	
	return numbers

def draw_trajectory(u, theta):

	theta = math.radians(theta)
	g = 9.8

	# Time of flight
	t_flight = 2*u*math.sin(theta)/g
	# Find time intervals
	intervals = frange(0, t_flight, 0.001)

	# List of x and y coordinates
	x = []
	y = []
	for t in intervals:
		x.append(u*math.cos(theta)*t)
		y.append(u*math.sin(theta)*t - 0.5*g*t*t)
	
	draw_graph(x, y)

if __name__ == '__main__':
	try:
		u = float(input('Enter the initial velocity(m/s): '))
		theta = float(input('Enter the angle of projection(degrees): '))
	except ValueError:
		print('You entered an invalid input')
	else:				# try...except...else
		draw_trajectory(u, theta)
		plt.show()

##同时画出三条线
if __name__ == '__main__':
	u_list = [20, 40, 60]
	theta = 45
	for u in u_list:
		draw_trajectory(u, theta)

	plt.legend(['20', '40', '60'])
	plt.show()		




练习
习题1
1.1
#nyc_weather_forcast_basic

import matplotlib.pyplot as plt

def forcast():
	
	time_of_day = ['3:00PM', '6:00PM', '9:00PM', '12:00AM', '3:00AM', '6:00AM', '9:00AM', '12:00PM']
	temp = [34, 34, 32, 28, 27, 24, 26, 29]
	intervals = range(1, len(time_of_day) + 1)
	

	plt.plot(intervals, temp)
	plt.ylim(20,40)		#设置x轴的区间	
	plt.xticks(intervals, time_of_day)
	plt.show()

if __name__ == '__main__':
	forcast( )


1.2
PS C:\Users\Weihong> cat .\ch2ex5.py
#nyc_weather_forcast_basic

import matplotlib.pyplot as plt

def forcast():

        time_of_day = ['3:00PM', '6:00PM', '9:00PM', '12:00AM', '3:00AM', '6:00AM', '9:00AM', '12:00PM']
        temp1 = [34, 34, 32, 28, 27, 24, 26, 29]
        temp2 = [21, 26, 37, 27, 32, 19, 20, 28]
        intervals = range(1, len(time_of_day) + 1)


        plt.plot(intervals, temp1, intervals, temp2)
        plt.ylim(0,40)
        plt.xticks(intervals, time_of_day)
        plt.legend(['New York', 'London'])
        plt.xlabel('time')
        plt.ylabel('temperature')
        plt.show( )

if __name__ == '__main__':
        forcast( )



习题2
2.1
PS C:\Users\Weihong> cat .\ch2ex6a.py
#quadratic function calculator

x_values = [-1, 1, 2, 3, 4, 5]
for x in x_values:
        y = x**2 + 2*x + 1
        print('x={0} y={1}'.format(x, y))

PS C:\Users\Weihong> python .\ch2ex6a.py
x=-1 y=0
x=1 y=4
x=2 y=9
x=3 y=16
x=4 y=25
x=5 y=36

2.2
PS C:\Users\Weihong> cat .\ch2ex6b.py
#the graph of quadratic function calculator

import matplotlib.pyplot as plt

def fig_quad(x, y):
        plt.plot(x, y)
        plt.show( )

if __name__ == '__main__':
        x_values = range( -100, 100, 10)
        y_values = []
        for x in x_values:
                y_values.append(x**2 + 2*x + 1)

        fig_quad(x_values, y_values)


习题3
习题3
3.1
PS C:\Users\Weihong> cat ch2ex7a.py
#Draw the trajectory of a body in projectile motion

from matplotlib import pyplot as plt
import math

def draw_graph(x, y):
        plt.plot(x, y)
        plt.xlabel('x-coordinate')
        plt.ylabel('y-coordinate')
        plt.title('Projectile motion of a ball')

def frange(start, final, increment):

        numbers = []
        while start < final:
                numbers.append(start)
                start = start + increment

        return numbers

def draw_trajectory(u, theta):

        theta = math.radians(theta)
        g = 9.8

        # Time,distance of flight
        t_flight = 2*u*math.sin(theta)/g
        s_max = u*math.cos(theta)*t_flight
        h_max = u*math.sin(theta)*t_flight /2 - 0.5 * g *( t_flight / 2) **2

        print 'The time of flight: %0.2f' % t_flight
        print 'The maximum horizontal distance: %0.2f' % s_max
        print 'The maximun vertical distance: %0.2f' % h_max

        # Find time intervals
        intervals = frange(0, t_flight, 0.001)

        # List of x and y coordinates
        x = []
        y = []
        for t in intervals:
                x.append(u*math.cos(theta)*t)
                y.append(u*math.sin(theta)*t - 0.5*g*t*t)

        draw_graph(x, y)

if __name__ == '__main__':
        try:
                u = float(input('Enter the initial velocity(m/s): '))
                theta = float(input('Enter the angle of projection(degrees): '))
        except ValueError:
                print('You entered an invalid input')
        else:                           # try...except...else
                draw_trajectory(u, theta)
                plt.show()

PS C:\Users\Weihong> python ch2ex7a.py
Enter the initial velocity(m/s): 25
Enter the angle of projection(degrees): 60
The time of flight: 4.42
The maximum horizontal distance: 55.23
The maximun vertical distance: 23.92

3.2
PS C:\Users\Weihong> cat .\ch2ex7b.py
"""

projectile_comparison_gen.py

Compare the projectile motion of a body thrown with various combinations of initial
velocity and angle of projection.
"""

import matplotlib.pyplot as plt
import math

g = 9.8

def draw_graph(x, y):
    plt.plot(x, y)
    plt.xlabel('x-coordinate')
    plt.ylabel('y-coordinate')
    plt.title('Projectile motion at different initial velocities and angles')

def frange(start, final, interval):

    numbers = []
    while start < final:
        numbers.append(start)
        start = start + interval

    return numbers

def draw_trajectory(u, theta, t_flight):
    # list of x and y co-ordinates
    x = []
    y = []
    intervals = frange(0, t_flight, 0.001)
    for t in intervals:
        x.append(u*math.cos(theta)*t)
        y.append(u*math.sin(theta)*t - 0.5*g*t*t)

    #create the graph
    draw_graph(x, y)

if __name__ == '__main__':

        num_trajectories = int(input('How many trajectories? '))

        velocities = []
        angles = []
        for i in range(1, num_trajectories+1):
                v = input('Enter the initial velocity for trajectory{0}(m/s):'.format(i)) #用format函数赋值{0}
                theta = input('Enter the angle of projection for trajectory {0}(degrees): '.format(i))
                velocities.append(float(v))
                angles.append(math.radians(float(theta)))

        for i in range(num_trajectories):
                # calculate time of flight, maximum horizontal distance and
                # maximum vertical distance
                t_flight = 2*velocities[i]*math.sin(angles[i])/g
                S_x = velocities[i]*math.cos(angles[i])*t_flight
                S_y = 0.5*velocities[i]*math.sin(angles[i])*(t_flight) - 0.5*g*(t_flight*0.5)**2
                print('Initial velocity: {0} Angle of Projection: {1}'.format(velocities[i], math.degrees(angles[i])))
                print('T: {0} S_x: {1} S_y: {2}'.format(t_flight, S_x, S_y))
                print()
                draw_trajectory(velocities[i], angles[i], t_flight)

# Add a legend and show the graph
        legends = []
        for i in range(0, num_trajectories):
                legends.append('{0} - {1}'.format(velocities[i], math.degrees(angles[i])))
        plt.legend(legends)
        plt.show()

PS C:\Users\Weihong> python ch2ex7b.py
How many trajectories? 3
Enter the initial velocity for trajectory1(m/s):45
Enter the angle of projection for trajectory 1(degrees): 45
Enter the initial velocity for trajectory2(m/s):45
Enter the angle of projection for trajectory 2(degrees): 60
Enter the initial velocity for trajectory3(m/s):45
Enter the angle of projection for trajectory 3(degrees): 90
Initial velocity: 45.0 Angle of Projection: 45.0
T: 6.49383778641 S_x: 206.632653061 S_y: 51.6581632653
()
Initial velocity: 45.0 Angle of Projection: 60.0
T: 7.95329452455 S_x: 178.949126802 S_y: 77.487244898
()
Initial velocity: 45.0 Angle of Projection: 90.0
T: 9.18367346939 S_x: 2.53052017171e-14 S_y: 103.316326531
()


习题4
4.1
PS C:\Users\Weihong> cat .\ch2ex8a.py
"""
Example of drawing a horizontal bar chart
"""

import matplotlib.pyplot as plt
def create_bar_chart(data, labels):
        # Number of bars
        num_bars = len(data)	# data的数量
        # This list is the point on the y-axis where each
        # Bar is centered. Here it will be [1, 2, 3 ...]
        positions = range(1, num_bars+1)	# 每个柱状图的位置
        plt.barh(positions, data, align = 'center') # 每个柱状图的位置，每个柱状图的数值，在中心放置，barh意味着柱状图是水平的
	#plt.bar(positions, data, align = 'center')
	# set the label of each bar
        plt.yticks(positions, labels)
	#plt.xticks(positions, labels)
        plt.xlabel('Steps')
	#plt.ylabel('Steps')
        plt.ylabel('Day')
	#plt.xlabel('Day')
        plt.title('Number of steps walked')

        # Turns on the grid which may assist in visual estimation
        plt.grid()
        plt.show()

if __name__ == '__main__':
        # Number of steps I walked during the past week
        steps = [6534, 7000, 8900, 10786, 3467, 11045, 5095]
        # Corresponding days
        labels = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        create_bar_chart(steps, labels)

4.2
PS C:\Users\Weihong> cat ch2ex8b.py
"""
Visualizing Your Expenses
"""
import matplotlib.pyplot as plt

def bar_chart(data, labels):
        num_bars = len(data)
        positions = range(1, num_bars+1)
        plt.barh(positions, data, align = 'center')
        plt.yticks(positions, labels)
        plt.xlabel('Expenditure')
        plt.ylabel('Categories')
        plt.title('Weekly expenditures')

        plt.grid()
        plt.show()

if __name__ == '__main__':
        num_categories = int(input('Enter the number of categories: '))
        category = []
        Expenditure = []

        for i in range(1, num_categories+1):
                category_factor = raw_input('Enter category: ')
                Expenditure_number = input('Expenditure:')
                category.append(category_factor)
                Expenditure.append(Expenditure_number)

        bar_chart(Expenditure, category)


PS C:\Users\Weihong> python ch2ex8b.py
Enter the number of categories: 4
Enter category: Food
Expenditure:70
Enter category: Transpotation
Expenditure:35
Enter category: Entertainment
Expenditure:30
Enter category: Phone/Internet
Expenditure:30


斐波那契数列
PS C:\Users\Weihong> cat .\ch2ex9.py
"""
fibonacci_goldenration.py
"""

import matplotlib.pyplot as plt

def fibo(n):
        if n  == 1:
                return [1]
        if n == 2:
                return[1, 1]

        a = 1
        b = 1
        # first two members of the series
        series = [a, b]
        for i in range(n):
                c = a + b
                series.append(c)
                a = b
                b = c

        return series

def plot_ratio(series):
        ratios = [ ]
        for i in range(len(series)-1):
                ratios.append(float(series[i+1])/series[i])
        plt.plot(ratios)
        plt.title('Ratio between Fibonacci numbers & Golden ratio')
        plt.ylabel('Ratio')
        plt.xlabel('No.')
        plt.show( )

if __name__ == '__main__':
        num = 100
        series = fibo(num)
        plot_ratio(series)



#########################################################
#######chapter 3 Describing data with statistics#########
#########################################################
平均数
>>> shortlist = [1, 2, 3]
>>> sum(shortlist)
6
>>> len(shortlist)
3

PS C:\Users\Weihong> cat .\ch3ex1.py
"""
Calculating the mean
"""

def calculate_mean(numbers):
        s = sum(numbers)
        N = len(numbers)
        # Calculate the mean
        mean = float(s)/N

        return mean

if __name__ == '__main__':
        donations = [100, 60, 70, 900, 100, 200, 500, 500, 503, 600, 1000, 1200]
        mean = calculate_mean(donations)
        N = len(donations)
        print('Mean donation over the last {0} days is {1}'.format(N, mean))
PS C:\Users\Weihong> python ch3ex1.py
Mean donation over the last 12 days is 477.75


中位数
>>> samplelist = [4, 1, 3]
>>> samplelist.sort()
>>> samplelist
[1, 3, 4]


PS C:\Users\Weihong> cat .\ch3ex2.py
"""
Calculating the median
"""

def calculate_median(numbers):
        N = len(numbers)
        numbers.sort( )

        #Find the median
        if N % 2 == 0:
                # if N is even
                m1 = N/2 - 1
                m2 = (N/2)
                # Convert to integer, match position
                median = (numbers[m1] + numbers[m2])/2
        else:
                m = (N+1)/2 - 1
                median = numbers[m]

        return median

if __name__ == '__main__':
        donations = [100, 60, 70, 900, 100, 200, 500, 500, 503, 600, 1000, 1200]
        median = calculate_median(donations)
        N = len(donations)
        print('Median donation over the last {0} days is {1}'.format(N, median))

PS C:\Users\Weihong> python ch3ex2.py
Median donation over the last 12 days is 500



计算数字的频率
>>> simplelist = [4, 2, 1, 4]
>>> from collections import Counter
>>> c = Counter(simplelist)
>>> c.most_common()
[(4, 2), (1, 1), (2, 1)]
>>> c.most_common(1)  #出现次数最多的数字，以及它的次数
[(4, 2)]
>>> c.most_common(2)
[(4, 2), (1, 1)]
>>> mode = c.most_common(1)
>>> mode
[(4, 2)]
>>> mode[0]
(4, 2)
>>> mode[0][0]
4


PS C:\Users\Weihong> cat ch3ex3.py
"""
Calculating the mode
"""

from collections import Counter # 从collections中引入Counter

def calculate_mode(numbers):
        c = Counter(numbers)	# c是Counter（numbers）的一个实例化
        mode = c.most_common(1)	# most_common中第一个元组以列表形式赋值于mode
        return mode[0][0]	# 返回值为列表元素第一个元组元素中的第一个值

if __name__ == '__main__':
        scores = [7, 8, 9, 2, 10, 9, 9, 9, 9, 4, 5, 6, 1, 5, 6, 7, 8, 6, 1, 10]
        mode = calculate_mode(scores)

        print('The mode of the list of numbers is: {0}'.format(mode))
PS C:\Users\Weihong> python ch3ex3.py
The mode of the list of numbers is: 9



PS C:\Users\Weihong> cat ch3ex4.py
"""
Calculating the mode when the list of numbers may
have multiple modes
"""

from collections import Counter

def calculate_mode(numbers):

        c = Counter(numbers)
        numbers_freq = c.most_common()
        max_count = numbers_freq[0][1]	# 第一个元组中第二个元素是频率最高数的次数

        modes = []	
        for num in numbers_freq:	# num是numbers_freq中的元素因此num是一个二维元组
                if num[1] == max_count:
                        modes.append(num[0])
        return modes

if __name__ == '__main__':
        scores = [5, 5, 5, 4, 4, 4, 9, 1, 3]
        modes = calculate_mode(scores)
        print('The mode(s) of the list of numbers are:')
        for mode in modes:
                print(mode)
PS C:\Users\Weihong> python ch3ex4.py
The mode(s) of the list of numbers are:
4
5


生成频率表格
PS C:\Users\Weihong> cat .\ch3ex5.py
"""
Frequency table for a list of numbers
"""

from collections import Counter

def frequency_table(numbers):
        table = Counter(numbers)
        print 'Number\tFrequency'
        for number in table.most_common():
                print('{0}\t{1}'.format(number[0], number[1]))

if __name__ == '__main__':
        scores = [7, 8, 9, 2, 10, 9, 9, 9, 9, 4, 5, 6, 1, 5, 6, 7, 8, 6, 1, 10]
        frequency_table(scores)
PS C:\Users\Weihong> python ch3ex5.py
Number  Frequency
9       5
6       3
1       2
5       2
7       2
8       2
10      2
2       1
4       1


按数字排序
PS C:\Users\Weihong> cat .\ch3ex6.py
"""
Frequency table for a list of numbers
Enhanced to display the table sorted by the numbers
"""
from collections import Counter

def frequency_table(numbers):
        table = Counter(numbers)
        numbers_freq = table.most_common( )
        numbers_freq.sort( )

        print('Number\tFrequency')
        for number in numbers_freq:
                print('{0}\t{1}'.format(number[0], number[1]))

if __name__ == '__main__':
        scores = [7, 8, 9, 2, 10, 9, 9, 9, 9, 4, 5, 6, 1, 5, 6, 7, 8, 6, 1, 10]
        frequency_table(scores)

PS C:\Users\Weihong> python ch3ex6.py
Number  Frequency
1       2
2       1
4       1
5       2
6       3
7       2
8       2
9       5
10      2


数据的分部

数据的范围
PS C:\Users\Weihong> cat .\ch3ex7.py
"""
Find the range
"""

def find_range(numbers):

        lowest = min(numbers)
        highest = max(numbers)
        # Find the range
        r = highest - lowest

        return lowest, highest, r

if __name__ == '__main__':
        donations = [100, 60, 70, 900, 100, 200, 500, 500, 503, 600, 1000, 1200]
        lowest, highest, r =  find_range(donations)
        print('Lowest: {0} Highest: {1} Range: {2}'.format(lowest, highest, r))

PS C:\Users\Weihong> python ch3ex7.py
Lowest: 60 Highest: 1200 Range: 1140


计算方差和标准差
PS C:\Users\Weihong> cat .\ch3ex8.py
"""
Find the variance and standard deviation of a list of numbers
"""

def calculate_mean(numbers):
        s = sum(numbers)
        N = len(numbers)
        # Calculate the mean
        mean = float(s)/N	#float()使s变成浮点数

        return mean

def find_differences(numbers):
        # Find the mean
        mean = calculate_mean(numbers)
        # Find the differences from the mean
        diff = []
        for num in numbers:
                diff.append(num - mean)
        return diff

def calculate_variance(numbers):
        #Find the list of differences
        diff = find_differences(numbers)
        #Find the squared differences
        squared_diff = []
        for d in diff:
                squared_diff.append(d**2)
        # Find the variance
        sum_squared_diff = sum(squared_diff)
        variance = sum_squared_diff/len(numbers)
        return variance

if __name__ == '__main__':
        donations = [100, 60, 70, 900, 100, 200, 500, 500, 503, 600, 1000, 1200]
        variance = calculate_variance(donations)
        print('The variance of the list of numbers is {0}'.format(variance))

        std = variance**0.5
        print('The standard deviation of the list of numbers is {0}'.format(std))

PS C:\Users\Weihong> python .\ch3ex8.py
The variance of the list of numbers is 141047.354167
The standard deviation of the list of numbers is 375.562716689


计算两组数据的关系
>>> simple_list1 = [1, 2, 3, 4]
>>> simple_list2 = [4, 5, 6, 7]
>>> for x, y in zip(simple_list1, simple_list2):
...     print(x, y)
...
(1, 4)
(2, 5)
(3, 6)
(4, 7)


>>> prod = []
>>> for x, y in zip(simple_list1, simple_list2):
...     prod.append(x*y)
...
>>> print prod
[4, 10, 18, 28]


计算相关系数
PS C:\Users\Weihong> cat ch3ex9.py
def find_corr_x_y(x, y):
        n = len(x)

        # Find the sum of the products
        prod = []
        for xi, yi in zip(x, y):
                prod.append(xi*yi)

        sum_prod_x_y = sum(prod)
        sum_x = sum(x)
        sum_y = sum(y)
        squared_sum_x = sum_x**2
        squared_sum_y = sum_y**2

        x_square = []
        for xi in x:
                x_square.append(xi**2)
        x_square_sum = sum(x_square)

        y_square = []
        for yi in y:
                y_square.append(yi**2)
        y_square_sum = sum(y_square)

        #Use formula to calculate correlation
        numerator = n*sum_prod_x_y - sum_x*sum_y
        denominator_term1 = n*x_square_sum - squared_sum_x
        denominator_term2 = n*y_square_sum - squared_sum_y
        denominator = (denominator_term1*denominator_term2)**0.5
        correlation = float(numerator)/denominator

        return correlation

if __name__ == '__main__':
        x = [1, 2, 3, 4, 5, 6]
        y = [3, 5, 0, 3, 10, 12]
        a = find_corr_x_y(x, y)
        print ('The correlation is {0}'.format(a))
PS C:\Users\Weihong> python ch3ex9.py
The correlation is 0.733103511309


高中成绩与大学入学考试之间的关系
做散点图
>>> x = [1, 2, 3, 4]
>>> y = [2, 4, 6, 8]
>>> import matplotlib.pyplot as plt
>>> plt.scatter(x,y)
<matplotlib.collections.PathCollection object at 0x052246B0>
>>> plt.show()


PS C:\Users\Weihong> cat .\ch3ex10.py
"""
the scatter figure
"""
import matplotlib.pyplot as plt

def fig(x, y):
        plt.scatter(x, y)
        plt.title('The Scatter Figure')
        plt.ylabel('College admission test scores') #注意格式，必须tab键
        plt.xlabel('High school grades')
        plt.show( )

if __name__ =='__main__':
        x = [90, 92, 95, 96, 87, 87, 90, 95, 98, 96]
        y = [85, 87, 86, 97, 96, 88, 89, 98, 98, 87]
        fig(x, y)


多图
PS C:\Users\Weihong> cat .\ch3ex11.py
import numpy as np

import matplotlib.pyplot as plt


plt.figure(1)

plt.figure(2)	# 创建图标2

ax1 = plt.subplot(211)	# 在图标2中 创建2列1行的空间，将第一（1）的位置命名为ax1

ax2 = plt.subplot(212)


x = np.linspace(0, 3, 100)

for i in xrange(5):
        plt.figure(1)
        plt.plot(x, np.exp(i*x/3))
        plt.sca(ax1)
        plt.plot(x, np.sin(i*x))
        plt.sca(ax2)
        plt.plot(x, np.cos(i*x))


plt.show()


PS C:\Users\Weihong> cat .\ch3ex12.py
import matplotlib.pyplot as plt

x = [1, 2, 3]
y1 = [ 1, 2, 3]
y2 = [2, 4, 6]

plt.subplot(211) 
plt.plot(x, y1)
plt.subplot(212)
plt.plot(x, y2)

plt.show()


PS C:\Users\Weihong> cat ch3ex13.py
"""
multi-scatter figures
"""

import matplotlib.pyplot as plt

x = [10.0, 8.0, 13.0, 9.0, 11.0, 14.0, 6.0, 4.0 ,12.0, 7.0, 5.0]
y1 = [8.04, 6.95, 7.58, 8.81, 8.33, 9.96, 7.24, 4.26, 10.84, 4.82, 5.68]
y2 = [9.14, 8.14,8.74, 8.77, 9.26, 8.10, 6.13, 3.10, 9.13, 7.26, 4.74]

plt.subplot(211)
plt.scatter(x, y1)
plt.title('The First Scatter')
plt.ylabel('y1')
plt.subplot(212)
plt.scatter(x, y2)
plt.title('The Second Scatter')
plt.xlabel('x1')
plt.ylabel('y2')
plt.show()


从一个文本文件中读取数据
PS C:\Users\Weihong> python ch3ex14.py
Sum of the numbers: 5733.0
PS C:\Users\Weihong> cat ch3ex14.py
#Find the sum of numbers stored in a file
def sum_data(filename):
        s = 0
        with open(filename) as f:	# with函数等价为Python中的with语句中要求对象实现__enter__和__exit__函数
                for line in f:
                        s = s + float(line)	# 将数字的形式改为浮点数
        print('Sum of the numbers: {0}'.format(s))

if __name__ == '__main__':
        sum_data('data.txt')

PS C:\Users\Weihong> python ch3ex14.py
Sum of the numbers: 5733.0


PS C:\Users\Weihong> cat ch3ex15.py
"""
Calculating the mean of numbers stored in a file
"""
def read_data(filename):

        numbers = []
        with open(filename) as f:
                for line in f:
                        numbers.append(float(line))

        return numbers

def calculate_mean(numbers):
        s = sum(numbers)
        N = len(numbers)
        mean = s/N

        return mean

if __name__ == '__main__':
        data = read_data('data.txt')
        mean = calculate_mean(data)
        print('Mean: {0}'.format(mean))

PS C:\Users\Weihong> python ch3ex15.py
Mean: 477.75


从一个CSV文件中读取数据
PS C:\Users\Weihong> cat number.csv
Number,squared
10,100
9,81
22,484

PS C:\Users\Weihong> cat ch3ex16.py
import csv

def read_csv(filename):

        numbers = []
        squared = []
        with open(filename) as f:
                reader = csv.reader(f)	#reader函数读取CSV文件，将文件对象f转为一个参数并返回一个指针指向CSV文件的第一行
                next(reader)		#指向下一行
                next(reader)		#指向下一行
                for row in reader:
                        print('The first number: {0}'.format(row[0]))
                        print('The second number:{0}'.format(row[1]))

if __name__ == '__main__':
        read_csv('number.csv')


PS C:\Users\Weihong> python ch3ex16.py
The first number: 9
The second number:81
The first number: 22
The second number:484


PS C:\Users\Weihong> cat ch3ex17.py
import csv
import matplotlib.pyplot as plt

def scatter_plot(x, y):
        plt.scatter(x, y)
        plt.xlabel('Number')
        plt.ylabel('Square')
        plt.show()

def read_csv(filename):

        numbers = []
        squared = []
        with open(filename) as f:
                reader = csv.reader(f)
                next(reader)
                for row in reader:
                        numbers.append(int(row[0]))
                        squared.append(int(row[1]))
                return numbers, squared

if __name__ == '__main__':
        numbers, squared = read_csv('number.csv')
        scatter_plot(numbers, squared)































