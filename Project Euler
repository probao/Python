###Problem1###
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000.

Anwer
PS C:\Users\Weihong> cat problem_1.py
def multi(n):
        result = []
        for i in range(1, n):
                if i % 3 == 0 or i % 5 == 0:
                        result.append(i)
        #print result
        return sum(result)

if __name__ == '__main__':
        n = int(input('The number:'))
        print('The sum is {0}'.format(multi(n)))
        
 
###problem2###       
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
  
Answer：
PS C:\Users\Weihong> cat problem_2.py
"""
considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-value
d terms
"""

def fibo():
        a = 1
        b = 2
        even = [2]
        series = [a, b]
        while b < 4000000:
                c = a + b
                a = b
                b = c
                if b % 2 == 0:
                        even.append(b)
        return sum(even)

if __name__ == '__main__':
        print('The sum is {0}'.format(fibo()))

  
  
###problem3###
The prime factors of 13195 are 5, 7, 13 and 29.
What is the largest prime factor of the number 600851475143 ?
PS C:\Users\Weihong> cat problem_3.py
import math

def factors(b):
        factors = []
        for i in xrange(1, int(math.sqrt(b))+2):
                if b % i == 0:
                        factors.append(i)
        return factors

def check_prime(number):
        if number != 1:
                for factor in xrange(2, number):
                        if number % factor == 0:
                                return False
        else:
                return False
        return True

if __name__ == '__main__':
        b = input('The number: ')
        f = factors(b)
        prime = []
        for number in f:
                if check_prime(number):
                        prime.append(number)
        print prime


 ###problem4###
 A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.

Find the largest palindrome made from the product of two 3-digit numbers.
PS C:\Users\Weihong> cat problem_4.py
def group():
        group = []
        for number_1 in range(100, 1000):
                for number_2 in range(number_1, 1000):
                        a = number_1*number_2
                        group.append(a)
        return group

def six_digit(group):
        six_digit = []
        for i in group:
                if len("%d"%i) == 6:
                        six_digit.append(i)
        return six_digit

def check_palin(six_digit):
        palin_number = []
        for i in six_digit:
                tmp = '%d'%i	# 数字转字符串
                if tmp[0] == tmp[5] and tmp[1] == tmp[4] and tmp[2] == tmp[3]:
                        palin_number.append(i)
        return palin_number

if __name__ == '__main__':
        group = group()
        six_digit = six_digit(group)
        print  max(check_palin(six_digit))
        
PS C:\Users\Weihong> python problem_4.py
906609        




###problem5###
2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

PS C:\Users\Weihong> python problem_5.py
232792560
PS C:\Users\Weihong> cat problem_5.py
from fractions import gcd

def lcm(a, b):
        tmp1 = reduce(gcd, [a, b])
        lcm = a*b // tmp1
        return lcm

if __name__ == '__main__':
        a = range(1, 21)
        sum = reduce(lcm, a)
        print sum


python中的reduce内建函数是一个二元操作函数，他用来将一个数据集合（链表，元组等）中的所有数据进行下列操作：
用传给reduce中的函数 func()（必须是一个二元操作函数）先对集合中的第1，2个数据进行操作，得到的结果再与第三个数据用func()函数运算，最后得到一个结果。
如：

Python代码
def myadd(x,y):    
    return x+y    
sum=reduce(myadd,(1,2,3,4,5,6,7))    
print sum   
def myadd(x,y): return x+y sum=reduce(myadd,(1,2,3,4,5,6,7)) print sum  



###problem6###
Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 ? 385 = 2640.
Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.

PS C:\Users\Weihong> python problem_6.py
The difference is 25164150
PS C:\Users\Weihong> cat problem_6.py
def the_square_of_sum(a):
        sum1 = 0
        for number1 in a:
                sum1 = sum1 + number1
        return sum1**2

def the_sum_of_square(a):
        sum2 = 0
        for number2 in a:
                factor = number2**2
                sum2 = sum2 + factor
        return sum2

if __name__ == '__main__':
        a = range(1, 101)
        print('The difference is {0}'.format(the_square_of_sum(a)-the_sum_of_square(a)))


###problem7###
By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.

What is the 10 001st prime number?


PS C:\Users\Weihong> cat .\problem_7.py
def check_prime(number):
        if number != 1:
                for factor in range(2, number):
                        if number % factor == 0:
                                return False
        else:
                return False
        return True

if __name__ == '__main__':
        n = int(input('Which prime do you want: '))
        prime = []
        i = 0
        number = 1
        while i < n:
                if check_prime(number):
                        prime.append(number)
                        i += 1
                number += 1
        print(prime[-1])
        #print(prime)
PS C:\Users\Weihong> python .\problem_7.py
Which prime do you want: 10001
104743




###problem8###
Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?

PS C:\Users\Weihong> cat .\problem_8.py
num ='\
73167176531330624919225119674426574742355349194934\
96983520312774506326239578318016984801869478851843\
85861560789112949495459501737958331952853208805511\
12540698747158523863050715693290963295227443043557\
66896648950445244523161731856403098711121722383113\
62229893423380308135336276614282806444486645238749\
30358907296290491560440772390713810515859307960866\
70172427121883998797908792274921901699720888093776\
65727333001053367881220235421809751254540594752243\
52584907711670556013604839586446706324415722155397\
53697817977846174064955149290862569321978468622482\
83972241375657056057490261407972968652414535100474\
82166370484403199890008895243450658541227588666881\
16427171479924442928230863465674813919123162824586\
17866458359124566529476545682848912883142607690042\
24219022671055626321111109370544217506941658960408\
07198403850962455444362981230987879927244284909188\
84580156166097919133875499200524063689912560717606\
05886116467109405077541002256983155200055935729725\
71636269561882670428252483600823257530420752963450'

biggest = 0
i = 0
while i < len(num) - 12:
        one = int(num[i])
        two = int(num[i+1])
        thre = int(num[i+2])
        fou = int(num[i+3])
        fiv = int(num[i+4])
        six = int(num[i+5])
        svn = int(num[i+6])
        eight = int(num[i+7])
        nine = int(num[i+8])
        ten = int(num[i+9])
        eleven = int(num[i+10])
        twelve = int(num[i+11])
        thirteen = int(num[i+12])
        product = one*two*thre*fou*fiv*six*svn*eight*nine*ten*eleven*twelve*thirteen
        if product  > biggest:
                numbers = []
                biggest = product
                numbers = [one, two, thre, fou, fiv, six, svn, eight, nine, ten, eleven, twelve, thirteen]
        i += 1

print(biggest)
print(numbers)

PS C:\Users\Weihong> python problem_8.py
23514624000
[5, 5, 7, 6, 6, 8, 9, 6, 6, 4, 8, 9, 5]






###problem9###
A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
a2 + b2 = c2
For example, 32 + 42 = 9 + 16 = 25 = 52.
There exists exactly one Pythagorean triplet for which a + b + c = 1000.
Find the product abc.


PS C:\Users\Weihong> cat .\problem_9.py
import math

def calculate(a, b):
        a = float(a)
        b = float(b)
        tmp = a + b + math.sqrt(a**2 + b**2)
        return tmp

if __name__ == '__main__':
        result = []
        part1 = range(1, 1000)
        part2 = range(1, 1000)
        for a in part1:
                for b in part2:
                        if calculate(a, b) == 1000:
                                c = math.sqrt(a**2 + b**2)
                                result.append(a)
                                result.append(b)
                                result.append(c)

        print('Three number are {0}, {1} and {2}'.format(result[0], result[1], result[2]))
PS C:\Users\Weihong> python problem_9.py
Three number are 200, 375 and 425.0



###problem10###
The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
Find the sum of all the primes below two million.

PS C:\Users\Weihong> cat problem_10.py
import math

def check_prime(number):
        if number != 1:
                for factor in range(2, int(math.sqrt(number))+1):
                        if number % factor == 0:
                                return False
        else:
                return False
        return True

if __name__ == '__main__':
        sum = 0
        for i in range(1, 2000001):
                if check_prime(i):
                        sum = sum + i
        print('The sum is {0}'.format(sum))
PS C:\Users\Weihong> python problem_10.py
The sum is 142913828922



###problem11###
The product of these numbers is 26 × 63 × 78 × 14 = 1788696.
What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?


test
PS C:\Users\Weihong> cat example.txt
08 02 22
49 49 99
81 49 31

PS C:\Users\Weihong> cat test4p11.py	# 读取文件生成列表
def read_data(filename):
        group = [[], [], []]
        i = 0
        with open(filename) as f:
                for line in f:
                        tmp = line.split()	# split的用法
                        group[i] = [ int(m) for m in tmp]
                        i += 1
        return group

if __name__ == '__main__':

        group = read_data('example.txt')
        print group

PS C:\Users\Weihong> python test4p11.py
[[8, 2, 22], [49, 49, 99], [81, 49, 31]]




PS C:\Users\Weihong> cat problem_11.py
def read_data(filename):
        group = [[] for i in range(20)]
        i = 0
        with open(filename) as f:
                for line in f:
                        tmp = line.split()
                        group[i] = [ int(m) for m in tmp ]
                        i += 1
        return group

def horizon(group):
        result = []
        for i in range(20):
                for j in range(17):
                        answer = group[i][j]*group[i][j+1]*group[i][j+2]*group[i][j+3]
                        result.append(answer)
                        j += 1
                i += 1
        return max(result)


def vertical(group):
        result = []
        for i in range(17):
                for j in range(20):
                        answer = group[i][j]*group[i+1][j]*group[i+2][j]*group[i+3][j]
                        result.append(answer)
                        j += 1
                i += 1
        return max(result)

def tilt_1(group):
        result = []
        for i in range(17):
                for j in range(17):
                        answer = group[i][j]*group[i+1][j+1]*group[i+2][j+2]*group[i+3][j+3]
                        result.append(answer)
                        j += 1
                i += 1
        return max(result)

def tilt_2(group):
        result = []
        for i in range(17):
                for j in range(3, 20):
                        answer = group[i][j]*group[i+1][j-1]*group[i+2][j-2]*group[i+3][j-3]
                        result.append(answer)
                        j += 1
                i += 1
        return max(result)



if __name__ == '__main__':

        group = read_data('problem_11.txt')
        answer = max([horizon(group), vertical(group),  tilt_1(group), tilt_2(group)])
        print ('The largest product in the grid: {0}'.format(answer))

PS C:\Users\Weihong> python problem_11.py
The largest product in the grid: 70600674









###problem12###
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:
 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?



PS C:\Users\Weihong> cat .\problem_12.py
import math

def  factors(b):
        factors = []
        for i in range (1,int(math.sqrt(b))):
                if b % i == 0:
                        factors.append(i)
        return factors

if __name__ == '__main__':
        i = 2
        n = 0
        while n  <= 500:
                sum = 0
                for a in range(1, i+1):
                        sum = sum + a
                i += 1
                f = factors(sum)
                n = len(f)*2
        print('The number is {0}'.format(sum))
PS C:\Users\Weihong> python problem_12.py
The number is 76576500








###Problem 13###
Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.


PS C:\Users\Weihong> python .\problem_13.py
The first 10 digit: 5537376230
PS C:\Users\Weihong> cat .\problem_13.py.
def read_data(filename):

        numbers = []
        with open(filename) as f:
                for line in f:
                        numbers.append(float(line))
        return numbers

if __name__ == '__main__':
        data = read_data('large_num.txt')
        sum_num = sum(data)
        sum_string = '%d' % sum_num
        print('The first 10 digit: {0}'.format(sum_string[0:10]))
PS C:\Users\Weihong> python .\problem_13.py.
The first 10 digit: 5537376230



###Problem 14###
It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms.
Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.
Which starting number, under one million, produces the longest chain?
NOTE: Once the chain starts the terms are allowed to go above one million.

PS C:\Users\Weihong> cat .\problem_14.py
def collatz(n):
        group = [n]
        while n > 1:
                if n % 2 == 0:
                        n = n/2
                        group.append(n)
                else:
                        n = 3*n + 1
                        group.append(n)
        return group


if __name__ == '__main__':
        i =1000000
        max_group = []
        the_number = 0

        while i > 1:
                if i not in max_group:
                        #print i
                        group = collatz(i)
                        if len(group) > len(max_group):
                                max_group = group
                                the_number = i
                        i -= 1
                else:
                        #print i
                        i -= 1

        print('The number is {0}'.format(the_number))

PS C:\Users\Weihong> python problem_14.py
The number is 837799



###Problem 15###
Lattice paths
How many such routes are there through a 20×20 grid?

PS C:\Users\Weihong> cat problem_15.py
import math

n = input(' The length:')
a = math.factorial(2*n)
b = math.factorial(n)
result = a /(b*b)

print result
PS C:\Users\Weihong> python problem_15.py
 The length:20
137846528820





###problem16###
2^15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.
What is the sum of the digits of the number 2^1000?



PS C:\Users\Weihong> cat .\problem_16.py
def factorial(n):
        i = 0
        result = 1
        while i < n:
                result = result * 2
                i += 1
        print result
        return result

def sum(result):
        result_string = '%d' % result # 将数字变为字符串
        total_num = 0
        for i in result_string:
                total_num = total_num + int(i)	# 字符串中每个字母变成数字再加和
        return total_num

if __name__ == '__main__':
        n = input('the number: ')
        result = factorial(n)
        print('The answer is {0}.'.format(sum(result)))

PS C:\Users\Weihong> python problem_16.py
the number: 1000
107150860718626732094842504906000181056140481170553360744375038837035105112493612249319837881569585812759467291755314682
518714528569231404359845775746985748039345677748242309854210746050623711418779541821530464749835819412673987675591655439
46077062914571196477686542167660429831652624386837205668069376
The answer is 1366.


###problem17###
If the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.
If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?

PS C:\Users\Weihong> cat problem_17.py
number = {1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five', 6: 'six', 7: 'seven', 8: 'eight', 9: 'nine', 10: 'ten',		# 字典的运用
 11: 'eleven', 12: 'twelve', 13: 'thirteen', 14: 'fourteen', 15: 'fifteen', 16: 'sixteen', 17: 'seventeen', 18: 'eighte
en', 19: 'nineteen', 20: 'twenty', 30: 'thirty', 40: 'forty', 50: 'fifty', 60: 'sixty', 70: 'seventy', 80: 'eighty', 90
: 'ninety', 100: 'onehundredand', 200: 'twohundredand', 300: 'threehundredand', 400: 'fourhundredand', 500: 'fivehundre
dand', 600: 'sixhundredand', 700: 'sevenhundredand', 800: 'eighthundredand', 900: 'ninehundredand', 1000: 'onethousand'
}

total = ''	# 中间不能有空格
for i in range(1, 1001):
        if number.has_key(i):
#               print i
                total = total + number[i]
        else:
#               print i
                a = int(i/100)*100
                if number.has_key(a):
                        total = total + number[a]
                b = i - a
                if number.has_key(i - a):
                        total = total + number[i - a]
                else:
                        c = int((i - a)/10) * 10
                        d = i - a -c
                        total = total + number[c]
                        total = total + number[d]

#print total
print len(total) - 27

PS C:\Users\Weihong> python problem_17.py
21124





###Problem 18###
By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.

 3
 7 4
 2 4 6
 8 5 9 3

That is, 3 + 7 + 4 + 9 = 23.

Find the maximum total from top to bottom of the triangle below:

 75
 95 64
 17 47 82
 18 35 87 10
 20 04 82 47 65
 19 01 23 75 03 34
 88 02 77 73 07 63 67
 99 65 04 28 06 16 70 92
 41 41 26 56 83 40 80 70 33
 41 48 72 33 47 32 37 16 94 29
 53 71 44 65 25 43 91 52 97 51 14
 70 11 33 28 77 73 17 78 39 68 17 57
 91 71 52 38 17 14 91 43 58 50 27 29 48
 63 66 04 68 89 53 67 30 73 16 69 87 40 31
 04 62 98 27 23 09 70 98 73 93 38 53 60 04 23

NOTE: As there are only 16384 routes, it is possible to solve this problem by trying every route. However, Problem 67, is the same challenge with a triangle containing one-hundred rows; it cannot be solved by brute force, and requires a clever method! ;o)



PS C:\Users\Weihong> cat .\problem_13.py
a = [75]
b = [95, 64]
c = [17, 47, 82]
d = [18, 35, 87, 10]
e = [20, 4, 82, 47, 65]
f = [19, 1, 23, 75, 3, 34]
g = [88, 2, 77, 73, 7, 63, 67]
h = [99, 65, 4, 28, 6, 16, 70, 92]
p = [41, 41, 26, 56, 83, 40, 80, 70, 33]
q = [41, 48, 72, 33, 47, 32, 37, 16, 94, 29]
k = [53, 71, 44, 65, 25, 43, 91, 52, 97, 51, 14]
l = [70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57]
m = [91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48]
n = [63, 66, 4, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31]
o = [4, 62, 98, 27, 23, 9, 70, 98, 73, 93, 38, 53, 60, 4, 23]


A = [a, b, c, d, e, f, g, h, p, q, k, l, m, n, o]

#a = [3]
#b = [7, 4]
#c = [2, 4, 6]
#d = [8, 5, 9, 3]

#A = [a, b, c, d]

i = len(A) - 2
j = 0

while i >= 0:
        for j in range(len(A[i])):
                number_origin = A[i][j]
                number_1 = A[i+1][j]
                number_2 = A[i+1][j+1]
                larger = max(number_1, number_2)
                A[i][j] = number_origin + larger
        i = i -1

print A[0][0]



#while i  <= 14:
#       larger = max(A[i][j], A[i][j+1])
#       print larger
#       j = A[i].index(max(A[i][j], A[i][j+1]))
#       sum += larger
#       i += 1


#print sum

PS C:\Users\Weihong> python .\problem_13.py
1074


###Problem 20###
n! means n × (n ? 1) × ... × 3 × 2 × 1
For example, 10! = 10 × 9 × ... × 3 × 2 × 1 = 3628800,
and the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.
Find the sum of the digits in the number 100!


PS C:\Users\Weihong> cat problem_20.py
def factorial(n):
        result = 1
        for i in range(1, n+1):
                result = result*i
        return result

if __name__ == '__main__':
        result = factorial(100)
        result_str = '%d' % result
        answer = 0
        for num in result_str:
                answer = answer +int(num)
        print('The answer is {0}'.format(answer))
PS C:\Users\Weihong> python problem_20.py
The answer is 648




###Problem 21###
Let d(n) be defined as the sum of proper divisors of n (numbers less than n which divide evenly into n).
If d(a) = b and d(b) = a, where a ≠ b, then a and b are an amicable pair and each of a and b are called amicable numbers.
For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284. 
The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.
Evaluate the sum of all the amicable numbers under 10000.


PS C:\Users\Weihong> cat problem_21.py
def factor(b):
        factors = []
        for i in range(1, b):
                if b % i == 0:
                        factors.append(i)
        M = sum(factors)
        return M

A = range(10001)
B = [0, 1]

for i in range(2, 10001):
        B.append(factor(i))

#print len(B)
answer = []
for i in range(10001):
        if  A[i] < 10000 and B[i] < 10000 and A[i] == B[B[i]] and B[i] == A[B[i]] and A[i] != B[i]:
                answer.append(i)
key = sum(answer)
print key
PS C:\Users\Weihong> python problem_21.py
31626




###Problem22###
Using names.txt (right click and 'Save Link/Target As...'), a 46K text file containing over five-thousand first names,
begin by sorting it into alphabetical order. Then working out the alphabetical value for each name, 
multiply this value by its alphabetical position in the list to obtain a name score.
For example, when the list is sorted into alphabetical order, COLIN, which is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list. 
So, COLIN would obtain a score of 938 × 53 = 49714.
What is the total of all the name scores in the file?


My version
PS C:\Users\Weihong> python problem_22.py
871198282
PS C:\Users\Weihong> cat problem_22.py
def read_data(filename):
        name = ''
        group = []
        with open(filename) as f:
                for line in f:
                        name = line	# 读取文件中的行并存储为字符串
        for i in name.split(','):	# 以逗号为分隔符
                group.append(i[1:-1])	# 不要双引号，取第二个字符到倒数第二个字符
        group = sorted(group)		# 排序
        return group

def calculate_point(group):
        P = []
        i = 0
        for name in group:
                i = i + 1
                sum = 0
                total = 0
                for letter in name:
                        sum = sum + dic[letter]
                total = i * sum
                P.append(total)
        return P


if __name__ == '__main__':
        dic = {'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5, 'F': 6, 'G':7, 'H': 8, 'I': 9, 'J':10, 'K': 11, 'L': 12 , 'M': 13
, 'N': 14, 'O': 15, 'P': 16, 'Q': 17, 'R': 18, 'S': 19, 'T': 20, 'U': 21, 'V': 22, 'W': 23, 'X': 24, 'Y': 25, 'Z': 26}
        group = read_data('p022_names.txt')
        point = calculate_point(group)
        #print group
        print sum(point)

nice version
基础知识enumerate函数
>>> for i, j in enumerate(('a', 'b', 'c'), 1):	# 参数1 标明起始数为1
...     print i, j
...
1 a
2 b
3 c
>>> for i, j in enumerate(('a', 'b', 'c'), 2): # 类似的例子
...     print i, j
...
2 a
3 b
4 c


PS C:\Users\Weihong> cat .\problem_22short.py
from string import ascii_uppercase	# 从string库中引入ascii_uppercase, 在ascii_uppercase中是大写字母

def score(word):
        return sum(ascii_uppercase.index(c) + 1 for c in word.strip('"')) # strip函数去掉", 然后得到ascii_uppercase中的index，由于index是从0开始的，所以要加1

with open('p022_names.txt') as f:
        names = f.read().split(',')
        names.sort()
print sum(i*score(x) for i, x in enumerate(names, 1))	#参数1， 编号从1开始

PS C:\Users\Weihong> python .\problem_22short.py
871198282



























































































