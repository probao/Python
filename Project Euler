Problem1
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000.

Anwer
PS C:\Users\Weihong> cat problem_1.py
def multi(n):
        result = []
        for i in range(1, n):
                if i % 3 == 0 or i % 5 == 0:
                        result.append(i)
        #print result
        return sum(result)

if __name__ == '__main__':
        n = int(input('The number:'))
        print('The sum is {0}'.format(multi(n)))
        
 
problem2       
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
  
Answer：
PS C:\Users\Weihong> cat problem_2.py
"""
considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-value
d terms
"""

def fibo():
        a = 1
        b = 2
        even = [2]
        series = [a, b]
        while b < 4000000:
                c = a + b
                a = b
                b = c
                if b % 2 == 0:
                        even.append(b)
        return sum(even)

if __name__ == '__main__':
        print('The sum is {0}'.format(fibo()))

  
  
  problem3
  The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?
PS C:\Users\Weihong> cat problem_3.py
import math

def factors(b):
        factors = []
        for i in xrange(1, int(math.sqrt(b))+2):
                if b % i == 0:
                        factors.append(i)
        return factors

def check_prime(number):
        if number != 1:
                for factor in xrange(2, number):
                        if number % factor == 0:
                                return False
        else:
                return False
        return True

if __name__ == '__main__':
        b = input('The number: ')
        f = factors(b)
        prime = []
        for number in f:
                if check_prime(number):
                        prime.append(number)
        print prime


  problem4
  A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.

Find the largest palindrome made from the product of two 3-digit numbers.
PS C:\Users\Weihong> cat problem_4.py
def group():
        group = []
        for number_1 in range(100, 1000):
                for number_2 in range(number_1, 1000):
                        a = number_1*number_2
                        group.append(a)
        return group

def six_digit(group):
        six_digit = []
        for i in group:
                if len("%d"%i) == 6:
                        six_digit.append(i)
        return six_digit

def check_palin(six_digit):
        palin_number = []
        for i in six_digit:
                tmp = '%d'%i
                if tmp[0] == tmp[5] and tmp[1] == tmp[4] and tmp[2] == tmp[3]:
                        palin_number.append(i)
        return palin_number

if __name__ == '__main__':
        group = group()
        six_digit = six_digit(group)
        print  max(check_palin(six_digit))
        
PS C:\Users\Weihong> python problem_4.py
906609        
        
        
problem5
2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

PS C:\Users\Weihong> python problem_5.py
232792560
PS C:\Users\Weihong> cat problem_5.py
from fractions import gcd

def lcm(a, b):
        tmp1 = reduce(gcd, [a, b])
        lcm = a*b // tmp1
        return lcm

if __name__ == '__main__':
        a = range(1, 21)
        sum = reduce(lcm, a)
        print sum


python中的reduce内建函数是一个二元操作函数，他用来将一个数据集合（链表，元组等）中的所有数据进行下列操作：用传给reduce中的函数 func()（必须是一个二元操作函数）先对集合中的第1，2个数据进行操作，得到的结果再与第三个数据用func()函数运算，最后得到一个结果。
如：

Python代码
def myadd(x,y):    
    return x+y    
sum=reduce(myadd,(1,2,3,4,5,6,7))    
print sum   
def myadd(x,y): return x+y sum=reduce(myadd,(1,2,3,4,5,6,7)) print sum  



problem6
Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 ? 385 = 2640.
Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.

PS C:\Users\Weihong> python problem_6.py
The difference is 25164150
PS C:\Users\Weihong> cat problem_6.py
def the_square_of_sum(a):
        sum1 = 0
        for number1 in a:
                sum1 = sum1 + number1
        return sum1**2

def the_sum_of_square(a):
        sum2 = 0
        for number2 in a:
                factor = number2**2
                sum2 = sum2 + factor
        return sum2

if __name__ == '__main__':
        a = range(1, 101)
        print('The difference is {0}'.format(the_square_of_sum(a)-the_sum_of_square(a)))


















problem9
A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,

a2 + b2 = c2

For example, 32 + 42 = 9 + 16 = 25 = 52.

There exists exactly one Pythagorean triplet for which a + b + c = 1000.
Find the product abc.


PS C:\Users\Weihong> cat .\problem_9.py
import math

def calculate(a, b):
        a = float(a)
        b = float(b)
        tmp = a + b + math.sqrt(a**2 + b**2)
        return tmp

if __name__ == '__main__':
        result = []
        part1 = range(1, 1000)
        part2 = range(1, 1000)
        for a in part1:
                for b in part2:
                        if calculate(a, b) == 1000:
                                c = math.sqrt(a**2 + b**2)
                                result.append(a)
                                result.append(b)
                                result.append(c)

        print('Three number are {0}, {1} and {2}'.format(result[0], result[1], result[2]))
PS C:\Users\Weihong> python problem_9.py
Three number are 200, 375 and 425.0





        
        

