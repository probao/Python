###Problem1###
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000.

Anwer
PS C:\Users\Weihong> cat problem_1.py
def multi(n):
        result = []
        for i in range(1, n):
                if i % 3 == 0 or i % 5 == 0:
                        result.append(i)
        #print result
        return sum(result)

if __name__ == '__main__':
        n = int(input('The number:'))
        print('The sum is {0}'.format(multi(n)))
   
        
 
###problem2###       
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
  
Answer：
PS C:\Users\Weihong> cat problem_2.py
"""
considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-value
d terms
"""

def fibo():
        a = 1
        b = 2
        even = [2]
        series = [a, b]
        while b < 4000000:
                c = a + b
                a = b
                b = c
                if b % 2 == 0:
                        even.append(b)
        return sum(even)

if __name__ == '__main__':
        print('The sum is {0}'.format(fibo()))

  
  
###problem3###
The prime factors of 13195 are 5, 7, 13 and 29.
What is the largest prime factor of the number 600851475143 ?
PS C:\Users\Weihong> cat problem_3.py
import math

def factors(b):
        factors = []
        for i in xrange(1, int(math.sqrt(b))+2):
                if b % i == 0:
                        factors.append(i)
        return factors

def check_prime(number):
        if number != 1:
                for factor in xrange(2, number):
                        if number % factor == 0:
                                return False
        else:
                return False
        return True

if __name__ == '__main__':
        b = input('The number: ')
        f = factors(b)
        prime = []
        for number in f:
                if check_prime(number):
                        prime.append(number)
        print prime


 ###problem4###
 A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.

Find the largest palindrome made from the product of two 3-digit numbers.
PS C:\Users\Weihong> cat problem_4.py
def group():
        group = []
        for number_1 in range(100, 1000):
                for number_2 in range(number_1, 1000):
                        a = number_1*number_2
                        group.append(a)
        return group

def six_digit(group):
        six_digit = []
        for i in group:
                if len("%d"%i) == 6:
                        six_digit.append(i)
        return six_digit

def check_palin(six_digit):
        palin_number = []
        for i in six_digit:
                tmp = '%d'%i	# 数字转字符串
                if tmp[0] == tmp[5] and tmp[1] == tmp[4] and tmp[2] == tmp[3]:
                        palin_number.append(i)
        return palin_number

if __name__ == '__main__':
        group = group()
        six_digit = six_digit(group)
        print  max(check_palin(six_digit))
        
PS C:\Users\Weihong> python problem_4.py
906609        




###problem5###
2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

PS C:\Users\Weihong> python problem_5.py
232792560
PS C:\Users\Weihong> cat problem_5.py
from fractions import gcd

def lcm(a, b):
        tmp1 = reduce(gcd, [a, b])
        lcm = a*b // tmp1
        return lcm

if __name__ == '__main__':
        a = range(1, 21)
        sum = reduce(lcm, a)
        print sum


python中的reduce内建函数是一个二元操作函数，他用来将一个数据集合（链表，元组等）中的所有数据进行下列操作：
用传给reduce中的函数 func()（必须是一个二元操作函数）先对集合中的第1，2个数据进行操作，得到的结果再与第三个数据用func()函数运算，最后得到一个结果。
如：

Python代码
def myadd(x,y):    
    return x+y    
sum=reduce(myadd,(1,2,3,4,5,6,7))    
print sum   
def myadd(x,y): return x+y sum=reduce(myadd,(1,2,3,4,5,6,7)) print sum  



###problem6###
Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 ? 385 = 2640.
Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.

PS C:\Users\Weihong> python problem_6.py
The difference is 25164150
PS C:\Users\Weihong> cat problem_6.py
def the_square_of_sum(a):
        sum1 = 0
        for number1 in a:
                sum1 = sum1 + number1
        return sum1**2

def the_sum_of_square(a):
        sum2 = 0
        for number2 in a:
                factor = number2**2
                sum2 = sum2 + factor
        return sum2

if __name__ == '__main__':
        a = range(1, 101)
        print('The difference is {0}'.format(the_square_of_sum(a)-the_sum_of_square(a)))


###problem7###
By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.

What is the 10 001st prime number?


PS C:\Users\Weihong> cat .\problem_7.py
def check_prime(number):
        if number != 1:
                for factor in range(2, number):
                        if number % factor == 0:
                                return False
        else:
                return False
        return True

if __name__ == '__main__':
        n = int(input('Which prime do you want: '))
        prime = []
        i = 0
        number = 1
        while i < n:
                if check_prime(number):
                        prime.append(number)
                        i += 1
                number += 1
        print(prime[-1])
        #print(prime)
PS C:\Users\Weihong> python .\problem_7.py
Which prime do you want: 10001
104743




###problem8###
Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?

PS C:\Users\Weihong> cat .\problem_8.py
num ='\
73167176531330624919225119674426574742355349194934\
96983520312774506326239578318016984801869478851843\
85861560789112949495459501737958331952853208805511\
12540698747158523863050715693290963295227443043557\
66896648950445244523161731856403098711121722383113\
62229893423380308135336276614282806444486645238749\
30358907296290491560440772390713810515859307960866\
70172427121883998797908792274921901699720888093776\
65727333001053367881220235421809751254540594752243\
52584907711670556013604839586446706324415722155397\
53697817977846174064955149290862569321978468622482\
83972241375657056057490261407972968652414535100474\
82166370484403199890008895243450658541227588666881\
16427171479924442928230863465674813919123162824586\
17866458359124566529476545682848912883142607690042\
24219022671055626321111109370544217506941658960408\
07198403850962455444362981230987879927244284909188\
84580156166097919133875499200524063689912560717606\
05886116467109405077541002256983155200055935729725\
71636269561882670428252483600823257530420752963450'

biggest = 0
i = 0
while i < len(num) - 12:
        one = int(num[i])
        two = int(num[i+1])
        thre = int(num[i+2])
        fou = int(num[i+3])
        fiv = int(num[i+4])
        six = int(num[i+5])
        svn = int(num[i+6])
        eight = int(num[i+7])
        nine = int(num[i+8])
        ten = int(num[i+9])
        eleven = int(num[i+10])
        twelve = int(num[i+11])
        thirteen = int(num[i+12])
        product = one*two*thre*fou*fiv*six*svn*eight*nine*ten*eleven*twelve*thirteen
        if product  > biggest:
                numbers = []
                biggest = product
                numbers = [one, two, thre, fou, fiv, six, svn, eight, nine, ten, eleven, twelve, thirteen]
        i += 1

print(biggest)
print(numbers)

PS C:\Users\Weihong> python problem_8.py
23514624000
[5, 5, 7, 6, 6, 8, 9, 6, 6, 4, 8, 9, 5]






###problem9###
A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
a2 + b2 = c2
For example, 32 + 42 = 9 + 16 = 25 = 52.
There exists exactly one Pythagorean triplet for which a + b + c = 1000.
Find the product abc.


PS C:\Users\Weihong> cat .\problem_9.py
import math

def calculate(a, b):
        a = float(a)
        b = float(b)
        tmp = a + b + math.sqrt(a**2 + b**2)
        return tmp

if __name__ == '__main__':
        result = []
        part1 = range(1, 1000)
        part2 = range(1, 1000)
        for a in part1:
                for b in part2:
                        if calculate(a, b) == 1000:
                                c = math.sqrt(a**2 + b**2)
                                result.append(a)
                                result.append(b)
                                result.append(c)

        print('Three number are {0}, {1} and {2}'.format(result[0], result[1], result[2]))
PS C:\Users\Weihong> python problem_9.py
Three number are 200, 375 and 425.0



###problem10###
The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
Find the sum of all the primes below two million.

PS C:\Users\Weihong> cat problem_10.py
import math

def check_prime(number):
        if number != 1:
                for factor in range(2, int(math.sqrt(number))+1):
                        if number % factor == 0:
                                return False
        else:
                return False
        return True

if __name__ == '__main__':
        sum = 0
        for i in range(1, 2000001):
                if check_prime(i):
                        sum = sum + i
        print('The sum is {0}'.format(sum))
PS C:\Users\Weihong> python problem_10.py
The sum is 142913828922



###problem11###
The product of these numbers is 26 × 63 × 78 × 14 = 1788696.
What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?


test
PS C:\Users\Weihong> cat example.txt
08 02 22
49 49 99
81 49 31

PS C:\Users\Weihong> cat test4p11.py	# 读取文件生成列表
def read_data(filename):
        group = [[], [], []]
        i = 0
        with open(filename) as f:
                for line in f:
                        tmp = line.split()	# split的用法
                        group[i] = [ int(m) for m in tmp]
                        i += 1
        return group

if __name__ == '__main__':

        group = read_data('example.txt')
        print group

PS C:\Users\Weihong> python test4p11.py
[[8, 2, 22], [49, 49, 99], [81, 49, 31]]




PS C:\Users\Weihong> cat problem_11.py
def read_data(filename):
        group = [[] for i in range(20)]
        i = 0
        with open(filename) as f:
                for line in f:
                        tmp = line.split()
                        group[i] = [ int(m) for m in tmp ]
                        i += 1
        return group

def horizon(group):
        result = []
        for i in range(20):
                for j in range(17):
                        answer = group[i][j]*group[i][j+1]*group[i][j+2]*group[i][j+3]
                        result.append(answer)
                        j += 1
                i += 1
        return max(result)


def vertical(group):
        result = []
        for i in range(17):
                for j in range(20):
                        answer = group[i][j]*group[i+1][j]*group[i+2][j]*group[i+3][j]
                        result.append(answer)
                        j += 1
                i += 1
        return max(result)

def tilt_1(group):
        result = []
        for i in range(17):
                for j in range(17):
                        answer = group[i][j]*group[i+1][j+1]*group[i+2][j+2]*group[i+3][j+3]
                        result.append(answer)
                        j += 1
                i += 1
        return max(result)

def tilt_2(group):
        result = []
        for i in range(17):
                for j in range(3, 20):
                        answer = group[i][j]*group[i+1][j-1]*group[i+2][j-2]*group[i+3][j-3]
                        result.append(answer)
                        j += 1
                i += 1
        return max(result)



if __name__ == '__main__':

        group = read_data('problem_11.txt')
        answer = max([horizon(group), vertical(group),  tilt_1(group), tilt_2(group)])
        print ('The largest product in the grid: {0}'.format(answer))

PS C:\Users\Weihong> python problem_11.py
The largest product in the grid: 70600674









###problem12###
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:
 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?



PS C:\Users\Weihong> cat .\problem_12.py
import math

def  factors(b):
        factors = []
        for i in range (1,int(math.sqrt(b))):
                if b % i == 0:
                        factors.append(i)
        return factors

if __name__ == '__main__':
        i = 2
        n = 0
        while n  <= 500:
                sum = 0
                for a in range(1, i+1):
                        sum = sum + a
                i += 1
                f = factors(sum)
                n = len(f)*2
        print('The number is {0}'.format(sum))
PS C:\Users\Weihong> python problem_12.py
The number is 76576500








###Problem 13###
Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.


PS C:\Users\Weihong> python .\problem_13.py
The first 10 digit: 5537376230
PS C:\Users\Weihong> cat .\problem_13.py.
def read_data(filename):

        numbers = []
        with open(filename) as f:
                for line in f:
                        numbers.append(float(line))
        return numbers

if __name__ == '__main__':
        data = read_data('large_num.txt')
        sum_num = sum(data)
        sum_string = '%d' % sum_num
        print('The first 10 digit: {0}'.format(sum_string[0:10]))
PS C:\Users\Weihong> python .\problem_13.py.
The first 10 digit: 5537376230



###Problem 14###
It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms.
Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.
Which starting number, under one million, produces the longest chain?
NOTE: Once the chain starts the terms are allowed to go above one million.

PS C:\Users\Weihong> cat .\problem_14.py
def collatz(n):
        group = [n]
        while n > 1:
                if n % 2 == 0:
                        n = n/2
                        group.append(n)
                else:
                        n = 3*n + 1
                        group.append(n)
        return group


if __name__ == '__main__':
        i =1000000
        max_group = []
        the_number = 0

        while i > 1:
                if i not in max_group:
                        #print i
                        group = collatz(i)
                        if len(group) > len(max_group):
                                max_group = group
                                the_number = i
                        i -= 1
                else:
                        #print i
                        i -= 1

        print('The number is {0}'.format(the_number))

PS C:\Users\Weihong> python problem_14.py
The number is 837799



###Problem 15###
Lattice paths
How many such routes are there through a 20×20 grid?

PS C:\Users\Weihong> cat problem_15.py
import math

n = input(' The length:')
a = math.factorial(2*n)
b = math.factorial(n)
result = a /(b*b)

print result
PS C:\Users\Weihong> python problem_15.py
 The length:20
137846528820





###problem16###
2^15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.
What is the sum of the digits of the number 2^1000?



PS C:\Users\Weihong> cat .\problem_16.py
def factorial(n):
        i = 0
        result = 1
        while i < n:
                result = result * 2
                i += 1
        print result
        return result

def sum(result):
        result_string = '%d' % result # 将数字变为字符串
        total_num = 0
        for i in result_string:
                total_num = total_num + int(i)	# 字符串中每个字母变成数字再加和
        return total_num

if __name__ == '__main__':
        n = input('the number: ')
        result = factorial(n)
        print('The answer is {0}.'.format(sum(result)))

PS C:\Users\Weihong> python problem_16.py
the number: 1000
107150860718626732094842504906000181056140481170553360744375038837035105112493612249319837881569585812759467291755314682
518714528569231404359845775746985748039345677748242309854210746050623711418779541821530464749835819412673987675591655439
46077062914571196477686542167660429831652624386837205668069376
The answer is 1366.


###problem17###
If the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.
If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?

PS C:\Users\Weihong> cat problem_17.py
number = {1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five', 6: 'six', 7: 'seven', 8: 'eight', 9: 'nine', 10: 'ten',		# 字典的运用
 11: 'eleven', 12: 'twelve', 13: 'thirteen', 14: 'fourteen', 15: 'fifteen', 16: 'sixteen', 17: 'seventeen', 18: 'eighte
en', 19: 'nineteen', 20: 'twenty', 30: 'thirty', 40: 'forty', 50: 'fifty', 60: 'sixty', 70: 'seventy', 80: 'eighty', 90
: 'ninety', 100: 'onehundredand', 200: 'twohundredand', 300: 'threehundredand', 400: 'fourhundredand', 500: 'fivehundre
dand', 600: 'sixhundredand', 700: 'sevenhundredand', 800: 'eighthundredand', 900: 'ninehundredand', 1000: 'onethousand'
}

total = ''	# 中间不能有空格
for i in range(1, 1001):
        if number.has_key(i):
#               print i
                total = total + number[i]
        else:
#               print i
                a = int(i/100)*100
                if number.has_key(a):
                        total = total + number[a]
                b = i - a
                if number.has_key(i - a):
                        total = total + number[i - a]
                else:
                        c = int((i - a)/10) * 10
                        d = i - a -c
                        total = total + number[c]
                        total = total + number[d]

#print total
print len(total) - 27

PS C:\Users\Weihong> python problem_17.py
21124





###Problem 18###
By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.

 3
 7 4
 2 4 6
 8 5 9 3

That is, 3 + 7 + 4 + 9 = 23.

Find the maximum total from top to bottom of the triangle below:

 75
 95 64
 17 47 82
 18 35 87 10
 20 04 82 47 65
 19 01 23 75 03 34
 88 02 77 73 07 63 67
 99 65 04 28 06 16 70 92
 41 41 26 56 83 40 80 70 33
 41 48 72 33 47 32 37 16 94 29
 53 71 44 65 25 43 91 52 97 51 14
 70 11 33 28 77 73 17 78 39 68 17 57
 91 71 52 38 17 14 91 43 58 50 27 29 48
 63 66 04 68 89 53 67 30 73 16 69 87 40 31
 04 62 98 27 23 09 70 98 73 93 38 53 60 04 23

NOTE: As there are only 16384 routes, it is possible to solve this problem by trying every route. However, Problem 67, is the same challenge with a triangle containing one-hundred rows; it cannot be solved by brute force, and requires a clever method! ;o)



PS C:\Users\Weihong> cat .\problem_13.py
a = [75]
b = [95, 64]
c = [17, 47, 82]
d = [18, 35, 87, 10]
e = [20, 4, 82, 47, 65]
f = [19, 1, 23, 75, 3, 34]
g = [88, 2, 77, 73, 7, 63, 67]
h = [99, 65, 4, 28, 6, 16, 70, 92]
p = [41, 41, 26, 56, 83, 40, 80, 70, 33]
q = [41, 48, 72, 33, 47, 32, 37, 16, 94, 29]
k = [53, 71, 44, 65, 25, 43, 91, 52, 97, 51, 14]
l = [70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57]
m = [91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48]
n = [63, 66, 4, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31]
o = [4, 62, 98, 27, 23, 9, 70, 98, 73, 93, 38, 53, 60, 4, 23]


A = [a, b, c, d, e, f, g, h, p, q, k, l, m, n, o]

#a = [3]
#b = [7, 4]
#c = [2, 4, 6]
#d = [8, 5, 9, 3]

#A = [a, b, c, d]

i = len(A) - 2
j = 0

while i >= 0:
        for j in range(len(A[i])):
                number_origin = A[i][j]
                number_1 = A[i+1][j]
                number_2 = A[i+1][j+1]
                larger = max(number_1, number_2)
                A[i][j] = number_origin + larger
        i = i -1

print A[0][0]



#while i  <= 14:
#       larger = max(A[i][j], A[i][j+1])
#       print larger
#       j = A[i].index(max(A[i][j], A[i][j+1]))
#       sum += larger
#       i += 1


#print sum

PS C:\Users\Weihong> python .\problem_13.py
1074



###Problem 19###
You are given the following information, but you may prefer to do some research for yourself.
•1 Jan 1900 was a Monday.
•Thirty days has September,
 April, June and November.
 All the rest have thirty-one,
 Saving February alone,
 Which has twenty-eight, rain or shine.
 And on leap years, twenty-nine.
•A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.
How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?



PS C:\Users\Weihong> cat problem_19.py
A = [i for i in range(1,32)]
B = [i for i in range(1,31)]
C = [i for i in range(1,29)]
D = [i for i in range(1, 30)]
case_1 = A + C + A + B + A + B + 2*A + B +A  + B + A
case_2 = A + D + A + B + A + B + 2*A + B +A  + B + A
year = 1901

centry = []
while year < 2001:
        if year % 4 != 0:
                centry = centry + case_1
        if year % 4 == 0:
                centry = centry + case_2
        year += 1

the_first_day = [i+1 for i, j in enumerate(centry) if j == 1]

times = 0
for i in the_first_day:
        if i % 7 == 6:
                times += 1

print times

PS C:\Users\Weihong> python problem_19.py
171









###Problem 20###
n! means n × (n ? 1) × ... × 3 × 2 × 1
For example, 10! = 10 × 9 × ... × 3 × 2 × 1 = 3628800,
and the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.
Find the sum of the digits in the number 100!


PS C:\Users\Weihong> cat problem_20.py
def factorial(n):
        result = 1
        for i in range(1, n+1):
                result = result*i
        return result

if __name__ == '__main__':
        result = factorial(100)
        result_str = '%d' % result
        answer = 0
        for num in result_str:
                answer = answer +int(num)
        print('The answer is {0}'.format(answer))
PS C:\Users\Weihong> python problem_20.py
The answer is 648




###Problem 21###
Let d(n) be defined as the sum of proper divisors of n (numbers less than n which divide evenly into n).
If d(a) = b and d(b) = a, where a ≠ b, then a and b are an amicable pair and each of a and b are called amicable numbers.
For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284. 
The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.
Evaluate the sum of all the amicable numbers under 10000.


PS C:\Users\Weihong> cat problem_21.py
def factor(b):
        factors = []
        for i in range(1, b):
                if b % i == 0:
                        factors.append(i)
        M = sum(factors)
        return M

A = range(10001)
B = [0, 1]

for i in range(2, 10001):
        B.append(factor(i))

#print len(B)
answer = []
for i in range(10001):
        if  A[i] < 10000 and B[i] < 10000 and A[i] == B[B[i]] and B[i] == A[B[i]] and A[i] != B[i]:
                answer.append(i)
key = sum(answer)
print key
PS C:\Users\Weihong> python problem_21.py
31626




###Problem22###
Using names.txt (right click and 'Save Link/Target As...'), a 46K text file containing over five-thousand first names,
begin by sorting it into alphabetical order. Then working out the alphabetical value for each name, 
multiply this value by its alphabetical position in the list to obtain a name score.
For example, when the list is sorted into alphabetical order, COLIN, which is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list. 
So, COLIN would obtain a score of 938 × 53 = 49714.
What is the total of all the name scores in the file?


My version
PS C:\Users\Weihong> python problem_22.py
871198282
PS C:\Users\Weihong> cat problem_22.py
def read_data(filename):
        name = ''
        group = []
        with open(filename) as f:
                for line in f:
                        name = line	# 读取文件中的行并存储为字符串
        for i in name.split(','):	# 以逗号为分隔符
                group.append(i[1:-1])	# 不要双引号，取第二个字符到倒数第二个字符
        group = sorted(group)		# 排序
        return group

def calculate_point(group):
        P = []
        i = 0
        for name in group:
                i = i + 1
                sum = 0
                total = 0
                for letter in name:
                        sum = sum + dic[letter]
                total = i * sum
                P.append(total)
        return P


if __name__ == '__main__':
        dic = {'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5, 'F': 6, 'G':7, 'H': 8, 'I': 9, 'J':10, 'K': 11, 'L': 12 , 'M': 13
, 'N': 14, 'O': 15, 'P': 16, 'Q': 17, 'R': 18, 'S': 19, 'T': 20, 'U': 21, 'V': 22, 'W': 23, 'X': 24, 'Y': 25, 'Z': 26}
        group = read_data('p022_names.txt')
        point = calculate_point(group)
        #print group
        print sum(point)

nice version
基础知识enumerate函数
>>> for i, j in enumerate(('a', 'b', 'c'), 1):	# 参数1 标明起始数为1
...     print i, j
...
1 a
2 b
3 c
>>> for i, j in enumerate(('a', 'b', 'c'), 2): # 类似的例子
...     print i, j
...
2 a
3 b
4 c


PS C:\Users\Weihong> cat .\problem_22short.py
from string import ascii_uppercase	# 从string库中引入ascii_uppercase, 在ascii_uppercase中是大写字母

def score(word):
        return sum(ascii_uppercase.index(c) + 1 for c in word.strip('"')) # strip函数去掉", 然后得到ascii_uppercase中的index，由于index是从0开始的，所以要加1

with open('p022_names.txt') as f:
        names = f.read().split(',')
        names.sort()
print sum(i*score(x) for i, x in enumerate(names, 1))	#参数1， 编号从1开始

PS C:\Users\Weihong> python .\problem_22short.py
871198282



###Problem23###
A perfect number is a number for which the sum of its proper divisors is exactly equal to the number. 
For example, the sum of the proper divisors of 28 would be 1 + 2 + 4 + 7 + 14 = 28, which means that 28 is a perfect number.
A number n is called deficient if the sum of its proper divisors is less than n and it is called abundant if this sum exceeds n.
As 12 is the smallest abundant number, 1 + 2 + 3 + 4 + 6 = 16, the smallest number that can be written as the sum of two abundant numbers is 24. 
By mathematical analysis, it can be shown that all integers greater than 28123 can be written as the sum of two abundant numbers.
However, this upper limit cannot be reduced any further by analysis 
even though it is known that the greatest number that cannot be expressed as the sum of two abundant numbers is less than this limit.
Find the sum of all the positive integers which cannot be written as the sum of two abundant numbers.

PS C:\Users\Weihong> python problem_23.py
4179871
PS C:\Users\Weihong> cat problem_23.py
def factors(b):
        factors = []
        for i in range(1, b/2+2):
                if b % i == 0:
                        factors.append(i)
        return factors

if __name__ == '__main__':
        AN = []
        for x in range(12, 28123):
        #       print x
                f = factors(x)
                if sum(f) > x:
                        AN.append(x)
        list = range(28123)
        for i in  AN:
                for j in AN:
                        if i+j >= 28123:
                                break
                        else:
                                list[i + j] = 0

        print sum(list)



###Problem 24###
A permutation is an ordered arrangement of objects. For example, 3124 is one possible permutation of the digits 1, 2, 3 and 4. 
If all of the permutations are listed numerically or alphabetically, we call it lexicographic order. The lexicographic permutations of 0, 1 and 2 are:
012   021   102   120   201   210
What is the millionth lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?


>>> import itertools
>>> src = [0,1,2]
>>> print set(itertools.permutations(src, len(src)))
set([(2, 1, 0), (0, 1, 2), (1, 0, 2), (2, 0, 1), (0, 2, 1), (1, 2, 0)
>>> print (itertools.permutations(src, len(src)))
<itertools.permutations object at 0x021703F0>
>>> a = set(itertools.permutations(src, len(src)))

>>> a
set([(2, 1, 0), (0, 1, 2), (1, 0, 2), (2, 0, 1), (0, 2, 1), (1, 2, 0)
>>> a = list(a)
>>> a
[(2, 1, 0), (0, 1, 2), (1, 0, 2), (2, 0, 1), (0, 2, 1), (1, 2, 0)]
>>> a.sort()
>>> sorted(a)
[(0, 1, 2), (0, 2, 1), (1, 0, 2), (1, 2, 0), (2, 0, 1), (2, 1, 0)]
>>> sorted(a)[2]
(1, 0, 2)
>>>


PS C:\Users\Weihong> cat problem_24.py
import itertools

src = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
numbers = list(set(itertools.permutations(src, len(src))))
print(sorted(numbers)[999999])
PS C:\Users\Weihong> python problem_24.py
(2, 7, 8, 3, 9, 1, 5, 4, 6, 0)



###Problem 25###
The Fibonacci sequence is defined by the recurrence relation:
Fn = Fn−1 + Fn−2, where F1 = 1 and F2 = 1.
Hence the first 12 terms will be:
 F1 = 1
 F2 = 1
 F3 = 2
 F4 = 3
 F5 = 5
 F6 = 8
 F7 = 13
 F8 = 21
 F9 = 34
 F10 = 55
 F11 = 89
 F12 = 144
The 12th term, F12, is the first term to contain three digits.
What is the index of the first term in the Fibonacci sequence to contain 1000 digits?


PS C:\Users\Weihong> cat .\problem_25.py
def fibo():
        a = 1
        b = 1
        i = 2
        while len(str(b)) < 1000:
                c = a + b
                a = b
                b = c
                i += 1
        return i

if __name__ == '__main__':

        print fibo()
PS C:\Users\Weihong> python problem_25.py
4782



###Problem 26###
A unit fraction contains 1 in the numerator. The decimal representation of the unit fractions with denominators 2 to 10 are given:
1/2 =  0.5 
1/3 =  0.(3) 
1/4 =  0.25 
1/5 =  0.2 
1/6 =  0.1(6) 
1/7 =  0.(142857) 
1/8 =  0.125 
1/9 =  0.(1) 
1/10 =  0.1 
Where 0.1(6) means 0.166666..., and has a 1-digit recurring cycle. It can be seen that 1/7 has a 6-digit recurring cycle.
Find the value of d < 1000 for which 1/d contains the longest recurring cycle in its decimal fraction part.



Analysis

This is a useful application of Fermat’s little theorem that says: 1/d has a cycle of n digits if 10^n − 1 mod d = 0 for prime d.
It also follows that a prime number in the denominator, d, can yield up to d − 1 repeating decimal digits. 
We need to find the largest prime under 1000 that has d − 1 digits. This is called a full reptend prime. 

费马小定理(Fermat Theory)是数论中的一个重要定理，其内容为： 假如p是质数，且gcd(a,p)=1，那么 a(p-1)≡1（mod p）。
即：假如a是整数，p是质数，且a,p互质(即两者只有一个公约数1)，那么a的(p-1)次方除以p的余数恒等于1。

PS C:\Users\Weihong> python problem_26.py
longest recurring cycle for 1/d, d = 983
PS C:\Users\Weihong> cat problem_26.py
def check_prime(number):
        if number != 1:
                for factor in range(2, number):
                        if number % factor == 0:
                                return False
        else:
                return False
        return True

if __name__ == '__main__':
        prime = []
        for i in range(1, 1001):
                if check_prime(i):
                        prime.append(i)
        answer = []
        for d in prime[::-1]:
                period = 1
                #while 10**period % d != 1:
                while (10**period - 1) % d != 0:
                        period += 1
                if d -1 == period: break


        print('longest recurring cycle for 1/d, d = {0}'.format(d))


###Problem 27###
Euler discovered the remarkable quadratic formula:
n 2 +n+41 
n2+n+41
It turns out that the formula will produce 40 primes for the consecutive integer values 0≤n≤39 
0≤n≤39
. However, when n=40,40 2 +40+41=40(40+1)+41 



PS C:\Users\Weihong> cat problem_27.py
from eulerlib import is_prime, primes

L = 1000
nmax = 0
for b in primes(L):
        for a in range(-b, b, 2):
                n = 1
                while is_prime(n*n + a*n + b):
                        n += 1
                if n > nmax:
                        nmax, p = n, a*abs(b)
                        p1 = a
                        p2 = b

print p, p1, p2

PS C:\Users\Weihong> python problem_27.py
-59231 -61 971






###Problem 28###
Starting with the number 1 and moving to the right in a clockwise direction a 5 by 5 spiral is formed as follows:
21 22 23 24 25
20  7  8  9 10
19  6  1  2 11
18  5  4  3 12
17 16 15 14 13
It can be verified that the sum of the numbers on the diagonals is 101.
What is the sum of the numbers on the diagonals in a 1001 by 1001 spiral formed in the same way?

PS C:\Users\Weihong> python problem_28.py
How many number?1001
The sum of the numbers on the diagonals is 669171001
PS C:\Users\Weihong> cat .\problem_28.py
def part1(n):
        i = 1
        total_1 = 0
        while i <= n:
                total_1 = total_1 + i**2
                i = i + 2
        return total_1

def part2(n):
        i = 1
        total_2 = 0
        while i <= n:
                total_2 = total_2 + i**2 - 3*(i-1)
                i = i + 2
        return total_2

def part3(n):
        i = 1
        total_3 = 0
        while i <= n:
                total_3 = total_3 + i**2 - 2*(i-1)
                i = i + 2
        return total_3

def part4(n):
        i = 1
        total_4 = 0
        while i <= n:
                total_4 = total_4 + i**2 - (i-1)
                i = i + 2
        return total_4

if __name__ == '__main__':

        n = input('How many number?')
        print('The sum of the numbers on the diagonals is {0}'.format(part1(n)+part2(n)+part3(n)+part4(n)-3))








###Problem 29###
Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:
22=4, 23=8, 24=16, 25=32
32=9, 33=27, 34=81, 35=243
42=16, 43=64, 44=256, 45=1024
52=25, 53=125, 54=625, 55=3125
If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:
4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?


PS C:\Users\Weihong> cat .\problem_29.py
from sympy import FiniteSet

numbers = []
for i in range(2, 101):
        for j in range(2, 101):
                p = i ** j
                numbers.append(p)

s = FiniteSet(*numbers)
print len(s)
PS C:\Users\Weihong> python problem_29.py
9183





###Problem 30###
Surprisingly there are only three numbers that can be written as the sum of fourth powers of their digits:
1634 = 14 + 64 + 34 + 44
8208 = 84 + 24 + 04 + 84
9474 = 94 + 44 + 74 + 44
As 1 = 14 is not a sum it is not included.
The sum of these numbers is 1634 + 8208 + 9474 = 19316.
Find the sum of all the numbers that can be written as the sum of fifth powers of their digits.



PS C:\Users\Weihong> cat .\problem_30.py
def check_fifth(n):
        number = str(n)
        length = len(number)
        i = 0
        sum = 0
        while i < length:
                sum = sum + int(number[i])**5
                i += 1

        if sum == n:
                return True
        else:
                return False

if __name__ == '__main__':
        fifth_power = []
        for i in range(2, 1000000):
                if  check_fifth(i):
                        fifth_power.append(i)
        print fifth_power
        print sum(fifth_power)

PS C:\Users\Weihong> python problem_30.py
[4150, 4151, 54748, 92727, 93084, 194979]
443839


###Problem 31###

In England the currency is made up of pound, £, and pence, p, and there are eight coins in general circulation:
1p, 2p, 5p, 10p, 20p, 50p, £1 (100p) and £2 (200p).
It is possible to make £2 in the following way:
1×£1 + 1×50p + 2×20p + 1×5p + 1×2p + 3×1p
How many different ways can £2 be made using any number of coins?

递归的思想
http://blog.dreamshire.com/project-euler-31-solution/
PS C:\Users\Weihong> cat problem_31a.py
target = 200
coins = [1, 2, 5, 10, 20, 50, 100, 200]
ways = [1] + [0]*target

for coin in coins:
        for i in range(coin, target+1):
                ways[i] += ways[i-coin]

print ways[target]



PS C:\Users\Weihong> cat problem_31.py
i = 0
for a in range(201):
        for b in range(101):
                for c in range(41):
                        for d in range(21):
                                for e in range(11):
                                        for f in range(5):
                                                for g in range(3):
                                                        sum = a*1 + b*2 + c * 5 + d*10+e*20 + f*50 + g * 100
                                                        if sum == 200:
                                                                i += 1
print i + 1




PS C:\Users\Weihong> python problem_31a.py
73682







PS C:\Users\Weihong> cat .\problem_29.py
from sympy import FiniteSet

numbers = []
for i in range(2, 101):
        for j in range(2, 101):
                p = i ** j
                numbers.append(p)

s = FiniteSet(*numbers)
print len(s)
PS C:\Users\Weihong> python problem_29.py
9183








###Problem 32###

We shall say that an n-digit number is pandigital if it makes use of all the digits 1 to n exactly once; for example, the 5-digit number, 15234, is 1 through 5 pandigital.
The product 7254 is unusual, as the identity, 39 × 186 = 7254, containing multiplicand, multiplier, and product is 1 through 9 pandigital.
Find the sum of all products whose multiplicand/multiplier/product identity can be written as a 1 through 9 pandigital.
HINT: Some products can be obtained in more than one way so be sure to only include it once in your sum.


PS C:\Users\Weihong> cat .\problem_32.py
from sympy import FiniteSet

def one_four():
        answer1 = []
        compare = ['1', '2', '3', '4', '5', '6', '7', '8', '9']
        for i in range(1, 10):
                for j in range(1000, 10001):
                        w = i*j
                        part1_str = '%d' % i
                        part2_str = '%d' % j
                        result = '%d' % w
                        test = sorted(part1_str + part2_str + result)
                        if test == compare:
                                answer1.append(w)
        return answer1

def two_three():
        answer2 = []
        compare = ['1', '2', '3', '4', '5', '6', '7', '8', '9']
        for i in range(1, 100):
                for j in range(100, 1001):
                        x = i*j
                        part1_str = '%d' % i
                        part2_str = '%d' % j
                        result = '%d' % x
                        test = sorted(part1_str + part2_str + result)
                        if test == compare:
                                answer1.append(x)
        return answer2

if __name__ == '__main__':
        answer1 = one_four()
        answer2 = two_three()
        answer = answer1 + answer2
        s = FiniteSet(*answer)
        print sum(list(s))
PS C:\Users\Weihong> python problem_32.py
45228


###Problem 33###
The fraction 49/98 is a curious fraction, as an inexperienced mathematician in attempting to simplify it may incorrectly believe that 49/98 = 4/8, 
which is correct, is obtained by cancelling the 9s.
We shall consider fractions like, 30/50 = 3/5, to be trivial examples.
There are exactly four non-trivial examples of this type of fraction, less than one in value, 
and containing two digits in the numerator and denominator.

If the product of these four fractions is given in its lowest common terms, find the value of the denominator.


def check_fraction(a, b):
        A = list(str(a))
        B = list(str(b))
        for i in A:
                if i in B:
                        return True
        return False

def find_number(a, b):
        A = list(str(a))
        B = list(str(b))
        for i in A:
                if i in B:
                        A.remove(i)
                        B.remove(i)
                        c = float(A[0])
                        d = float(B[0])
        return c, d

if __name__ == '__main__':
        M = []
        N = []
        for a in range(10, 100):
                for b in range(10, 100):
                        if a < b and a % 10 != 0  and b % 10 != 0:
                                pro1 = float(a)/b
                                if check_fraction(a, b):
                                        c, d = find_number(a, b)
                                        pro2 = float(c) / d
                                        if pro1 == pro2:
                                                M.append(a)
                                                N.append(b)
        print M
        print N
 
whwu@master:~/script> python problem_33.py
[16, 19, 26, 49]
[64, 95, 65, 98]



###Problem 34###

PS C:\Users\Weihong> cat problem_34.py
import math

for x in range(10, 1854721):
        s = 0
        for i in str(x):
                s = s + math.factorial(int(i))
                if s == x:
                        print(s)
PS C:\Users\Weihong> python problem_34.py
145
40585





###Problem 35###

The number, 197, is called a circular prime because all rotations of the digits: 197, 971, and 719, are themselves prime.
There are thirteen such primes below 100: 2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, and 97.
How many circular primes are there below one million?

PS C:\Users\Weihong> python .\problem_35.py
[13, 31, 37, 73, 71, 17, 97, 79, 113, 131, 311, 197, 971, 719, 337, 373, 733, 919, 199, 991, 1193, 1931, 9311, 3119, 377
9, 7793, 7937, 9377, 11939, 19391, 93911, 39119, 91193, 19937, 99371, 93719, 37199, 71993, 193939, 939391, 393919, 93919
3, 391939, 919393, 199933, 999331, 993319, 933199, 331999, 319993]
50
PS C:\Users\Weihong> cat .\problem_35.py
import math

def check_prime(number):
        if number != 1:
                for factor in range(2, int(math.sqrt(number))+1):
                        if number % factor == 0:
                                return False
        else:
                return False
        return True


def generate_number(a):
        number_list = []
        n = len(a)
        s = 0
        while s <  n -1:
                b = a.pop(0)
                a.append(b)
                new_num_str = ''
                for index in a:
                        new_num_str = new_num_str + index
                number_list.append(int(new_num_str))
                s += 1
        return number_list


def check_circular(number_list):
        for y in number_list:
                if y in prime_list:
                        continue
                else:
                        return False
        return True


if __name__ == '__main__':
        prime_list = []
        for i in range(13, 1000001):
                if check_prime(i):
                        prime_list.append(i)
        #print prime_list

        circular_prime = []
        for number in prime_list:
        #       print number
                a = list(str(number))
                if '0' not in a:
                        number_list = generate_number(a)
                        if check_circular(number_list):
                                circular_prime.append(number)
                                prime_list.remove(number)
                                for j in number_list:
                                        circular_prime.append(j)
                                        prime_list.remove(j)
        print circular_prime
        print len(circular_prime)


###Problem 36###
The decimal number, 585 = 10010010012 (binary), is palindromic in both bases.
Find the sum of all numbers, less than one million, which are palindromic in base 10 and base 2.
(Please note that the palindromic number, in either base, may not include leading zeros.)


PS C:\Users\Weihong> cat .\problem_36.py
def check_palin(number_str):
        length = len(number_str)
        if length % 2 == 0:
                p1 = number_str[:length/2]
                p2 = number_str[length/2:][::-1]
                if p1 == p2:
                        return True
                else:
                        return False
        else:
                p1 = number_str[:(length-1)/2]
                p2 = number_str[(length-1)/2 + 1:][::-1]
                if p1 == p2:
                        return True
                else:
                        return False


if __name__ == '__main__':
        palin_list_ten = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
        for i in range(10, 1000001):
                if check_palin(str(i)):
                        palin_list_ten.append(i)
        palin_list_two = []
        for j in palin_list_ten:
                number_str = bin(j)[2:]
                if check_palin(number_str):
                        palin_list_two.append(j)

        print sum(palin_list_two)
PS C:\Users\Weihong> python problem_36.py
872187


###Problem 37###
The number 3797 has an interesting property. Being prime itself, it is possible to continuously remove digits from left to right, 
and remain prime at each stage: 3797, 797, 97, and 7. Similarly we can work from right to left: 3797, 379, 37, and 3.
Find the sum of the only eleven primes that are both truncatable from left to right and right to left.
NOTE: 2, 3, 5, and 7 are not considered to be truncatable primes.


PS C:\Users\Weihong> cat problem_37.py
from eulerlib import is_prime

def check_trun(x):
        l = len(x)
        i = 1
        num_list = []
        while i <= l:
                a = x[:i]
                b = x[i-1:]
                num_list.append(int(a))
                num_list.append(int(b))
                i += 1
        for num in num_list:
                if is_prime(num):
                        continue
                else:
                        return False
        return True

test = 11
t = 0
trun = []
while t <= 10:
#       print test
        test_str = str(test)
        if '0' in test_str  or '4' in test_str or '6' in test_str or '8' in test_str:
                test += 1
                continue
        else:
                if check_trun(test_str):
                        print test
                        trun.append(test)
                        t += 1
        test += 1

print sum(trun)


PS C:\Users\Weihong> python .\problem_37.py
23
37
53
73
313
317
373
797
3137
3797
739397
748317


###Problem 38###
Take the number 192 and multiply it by each of 1, 2, and 3:
192 × 1 = 192
192 × 2 = 384
192 × 3 = 576
By concatenating each product we get the 1 to 9 pandigital, 192384576.
We will call 192384576 the concatenated product of 192 and (1,2,3)
The same can be achieved by starting with 9 and multiplying by 1, 2, 3, 4, and 5, 
giving the pandigital, 918273645, which is the concatenated product of 9 and (1,2,3,4,5).
What is the largest 1 to 9 pandigital 9-digit number that can be formed as the concatenated product of an integer with (1,2, ... , n) where n > 1?


whwu@master:~/script> cat problem_38.py
compare = ['1', '2', '3', '4', '5', '6', '7' , '8', '9']

max_num = 0
for i in range(9234, 9488):
        test_str = sorted(str(i*1)+str(i*2))
        test_num = int(str(i*1)+str(i*2))
        if test_str == compare:
                if test_num > max_num:
                        max_num = test_num

print max_num
whwu@master:~/script> python problem_38.py
932718654



###Problem 39###
If p is the perimeter of a right angle triangle with integral length sides, {a,b,c}, there are exactly three solutions for p = 120.
{20,48,52}, {24,45,51}, {30,40,50}
For which value of p ≤ 1000, is the number of solutions maximised?

whwu@master:~/script> cat problem_39.py
L, t_max, p_max = 1000, 0, 0

for p in range(L//4*2, L+1, 2):
        t = 0
        for a in range(2, int(p/3.4142) + 1):
                if p*(p - 2*a) % (2*(p-a)) == 0:
                        t += 1
                        if t >= t_max: t_max, p_max = t, p

print "Maximum perimeter, p <=", L, "is", p_max
print "Triangles in set =", t_max

whwu@master:~/script> python problem_39.py
Maximum perimeter, p <= 1000 is 840
Triangles in set = 8


###Problem 40###
An irrational decimal fraction is created by concatenating the positive integers:
0.123456789101112131415161718192021...
It can be seen that the 12th digit of the fractional part is 1.
If dn represents the nth digit of the fractional part, find the value of the following expression.
d1 × d10 × d100 × d1000 × d10000 × d100000 × d1000000


whwu@master:~/script> cat problem_40.py
num_list = ''

for i in range(1,1000000):
        num_list = num_list + str(i)

answer = int(num_list[0])*int(num_list[9])*int(num_list[99])*int(num_list[999])*int(num_list[9999])*int(num_list[99999])*int(num_list[999999])

print answer
whwu@master:~/script> python problem_40.py
210



###Problem 41###
We shall say that an n-digit number is pandigital if it makes use of all the digits 1 to n exactly once. 
For example, 2143 is a 4-digit pandigital and is also prime.
What is the largest n-digit pandigital prime that exists?


PS C:\Users\Weihong> cat problem_41.py
from eulerlib import primes

test = ['1', '2', '3', '4', '5', '6', '7']
anwser = []
pan_list = primes(7654321)
for i in pan_list:
        if sorted(str(i)) == test:
                anwser.append(i)
print max(anwser)
PS C:\Users\Weihong> python problem_41.py
7652413


###Problem 42###
The nth term of the sequence of triangle numbers is given by, 
tn = ½n(n+1); so the first ten triangle numbers are:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
By converting each letter in a word to a number corresponding to its alphabetical position and adding these values we form a word value. For example, the word value for SKY is 19 + 11 + 25 = 55 = t10. 
If the word value is a triangle number then we shall call the word a triangle word.
Using words.txt (right click and 'Save Link/Target As...'), a 16K text file containing nearly two-thousand common English words, how many are triangle words?


whwu@master:~/script> cat problem_42.py
from string import ascii_uppercase

def score(word):
        return sum(ascii_uppercase.index(c) + 1 for c in word.strip('"'))

with open('p042_words.txt') as f:
        words = f.read().split(',')
        words_score = [score(i) for i in words]

tri_num = [0.5*i*(i+1) for i in range(1, 30)]

tri_word = 0
for number in words_score:
        if number in tri_num:
                tri_word += 1

print tri_word

whwu@master:~/script> python problem_42.py
162



###Problem 43###
The number, 1406357289, is a 0 to 9 pandigital number because it is made up of each of the digits 0 to 9 in some order, 
but it also has a rather interesting sub-string divisibility property.
Let d1 be the 1st digit, d2 be the 2nd digit, and so on. In this way, we note the following:
?d2d3d4=406 is divisible by 2
?d3d4d5=063 is divisible by 3
?d4d5d6=635 is divisible by 5
?d5d6d7=357 is divisible by 7
?d6d7d8=572 is divisible by 11
?d7d8d9=728 is divisible by 13
?d8d9d10=289 is divisible by 17
Find the sum of all 0 to 9 pandigital numbers with this property.


import itertools

num_tuple = list(itertools.permutations(['0', '1', '2', '3', '4','5', '6', '7', '8', '9'], 10))
answer = []
for num in num_tuple:
	num_list = list(num)
	num_str = ''.join(num_list)
	if num_str[0] != 0:
		if int(num_str[1:4]) % 2 == 0 and int(num_str[2:5]) % 3 == 0 and int(num_str[3:6]) % 5 == 0 and int(num_str[4:7]) % 7 == 0 and int(num_str[5:8]) % 11 == 0 and int(num_str[6:9]) % 13 == 0 and int(num_str[7:10]) % 17 == 0:
			answer.append(int(num_str))

print sum(answer)

PS C:\Users\Weihong> python problem_43.py
16695334890



###Problem 44###
Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:
1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.
Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?


whwu@master:~/script> cat problem_44.py
def pe44():
        ps = set()
        i = 0
        while True:
                i += 1
                p = (3*i*i - i)/2
                ps.add(p)
                for n in ps:
                        if p-n in ps and p-2*n in ps:
                                return p-2*n

print 'Project Euler 44 solution = {0}'.format(pe44())
whwu@master:~/script> python problem_44.py
Project Euler 44 solution = 5482660



###Problem 45###
Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
Triangle   Tn=n(n+1)/2   1, 3, 6, 10, 15, ... 
Pentagonal   Pn=n(3n−1)/2   1, 5, 12, 22, 35, ... 
Hexagonal   Hn=n(2n−1)   1, 6, 15, 28, 45, ... 
It can be verified that T285 = P165 = H143 = 40755.
Find the next triangle number that is also pentagonal and hexagonal.


PS C:\Users\Weihong> cat problem_45.py
num_tph = 0
n = 144
Tri_num = []
Pen_num = []
Hex_num = []
while num_tph < 1:
        Tri_num.append(n*(n+1)/2)
        Pen_num.append(n*(3*n-1)/2)
        Hex_num.append(n*(2*n - 1))
        if Tri_num[n-144] in Pen_num and Tri_num[n-144] in Hex_num:
                print Tri_num[n-144]
                num_tph += 1
        n += 1
PS C:\Users\Weihong> python problem_45.py
1533776805


###Problem 46###
It was proposed by Christian Goldbach that every odd composite number can be written as the sum of a prime and twice a square.
9 = 7 + 2×12
15 = 7 + 2×22
21 = 3 + 2×32
25 = 7 + 2×32
27 = 19 + 2×22
33 = 31 + 2×12
It turns out that the conjecture was false.
What is the smallest odd composite that cannot be written as the sum of a prime and twice a square?


whwu@master:~/script> cat problem_46.py
import math

def check_prime(number):
        if number != 1:
                for factor in range(2, int(math.sqrt(number))+1):
                        if number % factor == 0:
                                return False
        else:
                return False
        return True

def check_gold(number):
        c = int(math.sqrt(number/2))
        for i in range(1, c+1):
                n = number - 2*i*i
                if check_prime(n):
                        return True
        return False

n = 13
while True:
        if check_prime(n):
                n = n + 2
        else:
                if check_gold(n):
                        n = n + 2
                else:
                        print n
                        break

whwu@master:~/script> python problem_46.py
5777



###Problem 47###
The first two consecutive numbers to have two distinct prime factors are:
14 = 2 × 7
15 = 3 × 5
The first three consecutive numbers to have three distinct prime factors are:
644 = 2² × 7 × 23
645 = 3 × 5 × 43
646 = 2 × 17 × 19.
Find the first four consecutive integers to have four distinct prime factors. What is the first of these numbers?


whwu@master:~/script> cat problem_47.py
import math

def check_prime(number):
        if number != 1:
                for f in range(2, int(math.sqrt(number))+ 1):
                        if number % f == 0:
                                return False
        else:
                return False
        return True


def factors(b):
        factors = []
        for i in range(1, int(b/2)):
                if b % i == 0:
                        factors.append(i)
        return factors


answer = []
numbers = []
for num in range(134043, 134050):
        if  check_prime(num):
                answer.append(0)
                numbers.append(num)
        else:
                prime_factor = []
                fact = factors(num)
#               print fact
                for num1 in fact:
                        if check_prime(num1):
                                prime_factor.append(num1)
#                               print prime_factor
                answer.append(len(prime_factor))
                numbers.append(num)

answer_str = ''
for num2 in answer:
        answer_str = answer_str + str(num2)

find_index = '4444'
n = answer_str.index(find_index)
#print answer_str
print numbers[n]

whwu@master:~/script> python problem_47.py
134043

nice version


PS C:\Users\Weihong> cat problem_47.py
def euler47(consecutives = 4):
        def factors():
                factors, n = {}, 2
                while True:
                        if n not in factors:
                                factors[n+n] = [n]
                                yield (n, [n])
                        else:
                                for f in factors[n]:
                                        factors.setdefault(f+n, []).append(f)
                                yield (n, factors.pop(n))
                        n += 1
        found, f = 0, factors()
        while found < consecutives:
                n, fn = next(f)
                if len(fn) == consecutives:
                        found += 1
                else:
                        found = 0
        return n+1-consecutives

print euler47(consecutives = 4)

PS C:\Users\Weihong> python problem_47.py
134043

setdefault的用法
>>> d1 = {}
>>> d1.setdefault('bob_hu', []).append(1)
>>> d1
{'bob_hu': [1]}
>>> d1.setdefault('bob_hu', []).append(2)
>>> d1
{'bob_hu': [1, 2]}


字典中pop的用法
>>> factors = {1:[1],2:[2]}
>>> factors
{1: [1], 2: [2]}
>>> factors.pop(1)
[1]
>>> factors
{2: [2]}







###Problem 48###
The series, 11 + 22 + 33 + ... + 1010 = 10405071317.
Find the last ten digits of the series, 11 + 22 + 33 + ... + 10001000.

whwu@master:~/script> cat problem_48.py
answer = []

for i in range(1, 1000):
        num = i**i
        num_multi = int(str(num)[-11:])
        answer.append(num_multi)

print sum(answer)
whwu@master:~/script> python problem_48.py
45419110846700



###Problem 49###
The arithmetic sequence, 1487, 4817, 8147, in which each of the terms increases by 3330, is unusual in two ways: 
(i) each of the three terms are prime, and, (ii) each of the 4-digit numbers are permutations of one another.
There are no arithmetic sequences made up of three 1-, 2-, or 3-digit primes, exhibiting this property, 
but there is one other 4-digit increasing sequence.
What 12-digit number do you form by concatenating the three terms in this sequence?
whwu@pelican:~/script/PE$ python problem_49.py
1487 4817 8147
1487 4817 8147
2969 6299 9629
2969 6299 9629
whwu@pelican:~/script/PE$ vi problem_49.py
whwu@pelican:~/script/PE$ cat problem_49.py
import itertools

def check_prime(number):
    if number != 1:
        for factor in xrange(2, number):
            if number % factor == 0:
                return False
    else:
        return False
    return True

prime_list = []
for num in range(1486, 4000):
    if check_prime(num) and '0' not in str(num):
        prime_list.append(num)

#print prime_list

for num1 in prime_list:
    test_list = list(map(''.join, itertools.permutations(str(num1))))
    test_list = sorted(list(set(test_list)))
   # print test_list
    find_prime  = []
    for num2 in test_list:
        if check_prime(int(num2)):
            find_prime.append(int(num2))
   # print find_prime
    l = len(find_prime)
    if l > 3:
        for i in range(l-2):
            for j in range(i+2, l):
                find_num = (find_prime[i] + find_prime[j])/2
                if find_num in find_prime:
                    print find_prime[i], find_num, find_prime[j]





###Problem 50###(maybe some problems)
The prime 41, can be written as the sum of six consecutive primes:
41 = 2 + 3 + 5 + 7 + 11 + 13
This is the longest sum of consecutive primes that adds to a prime below one-hundred.
The longest sum of consecutive primes below one-thousand that adds to a prime, contains 21 terms, and is equal to 953.
Which prime, below one-million, can be written as the sum of the most consecutive primes?

whwu@master:~/script> python problem_50.py
[958577, 920291, 978037, 997651, 954697, 966307, 993689]
[547, 546, 545, 544, 543, 542, 541]
997651
whwu@master:~/script> cat problem_50.py
import math

def check_prime(number):
        if number != 1:
                for factor in xrange(2, int(math.sqrt(number))+1):
                        if number % factor == 0:
                                return False
        else:
                return False
        return True



def prime_list(n):
        while n < 1000000:
                if check_prime(n):
                        yield n
                n += 1


number_list = []
for i in range(1, 20):
        if check_prime(i):
                number_list.append(i)

answer = []
times = []
pos = 0
while pos < len(number_list) - 1:
        t, most_consec, sum_number, n= 1, 0, number_list[pos], number_list[pos+1]
        p = prime_list(n)

        while sum_number < 1000000:
                new_prime = next(p)
                sum_number = sum_number + new_prime
                t +=1
                if check_prime(sum_number) and sum_number < 1000000:
                        most_consec = sum_number

        answer.append(most_consec)
        times.append(t)
        pos += 1




print answer
print times
#print times[answer.index(max(answer))]
#print number_list[answer.index(max(answer))]
print max(answer)



###Problem 52###
It can be seen that the number, 125874, and its double, 251748, contain exactly the same digits, but in a different order.
Find the smallest positive integer, x, such that 2x, 3x, 4x, 5x, and 6x, contain the same digits.

whwu@owl:~/script/PE$ cat problem_52.py
f = lambda n:sorted(str(n))

n = 99999
while not f(n*2) == f(n*3) == f(n*5) == f(n*6): n += 9
print "Project Euler 52 Solution =", n
whwu@owl:~/script/PE$ python problem_52.py
Project Euler 52 Solution = 142857

lambda表达式学习

lambda只是一个表达式，函数体比def简单很多。
lambda的主体是一个表达式，而不是一个代码块。仅仅能在lambda表达式中封装有限的逻辑进去。
lambda表达式是起到一个函数速写的作用。允许在代码内嵌入一个函数的定义。

>>> f = lambda x,y,z:x+y+x	# 定义一个lambda函数，求三个数之和
>>> f(1,2,3)
4
>>> f = lambda x,y,z:x+y+z
>>> f(1,2,3)
6


>>> n = 5
>>> reduce(lambda x,y:x*y, range(1,n+1))	# reduce函数 reduce(function, sequence, starting_value)：对sequence中的item顺序迭代调用function
120









###Problem 54###
The file, poker.txt, contains one-thousand random hands dealt to two players. 
Each line of the file contains ten cards (separated by a single space): the first five are Player 1's cards 
and the last five are Player 2's cards. You can assume that all hands are valid (no invalid characters or repeated cards), 
each player's hand is in no specific order, and in each hand there is a clear winner.
How many hands does Player 1 win?


from collections import Counter
from urllib import urlopen

file_url = 'https://projecteuler.net/project/resources/p054_poker.txt'
hands = (line.split() for line in urlopen(file_url))

values = {r:i for i,r in enumerate('23456789TJQKA', start=2)}
straights = [(v, v-1, v-2, v-3, v-4) for v in range(14, 5, -1)] + [(14, 5, 4, 3, 2)]
ranks = [(1,1,1,1,1),(2,1,1,1),(2,2,1),(3,1,1),(),(),(3,2),(4,1)]

def hand_rank(hand):
	score = zip(*sorted(((v, values[k]) for k,v in Counter(x[0] for x in hand).items()), reverse=True))
	score[0] = ranks.index(score[0])
	if len(set(card[1] for card in hand)) == 1: score[0] = 5  # flush
	if score[1] in straights: score[0] = 8 if score[0] == 5 else 4  # str./str. flush
	return score

print "Project Euler 54 Solution =", sum(hand_rank(hand[:5]) > hand_rank(hand[5:]) for hand in hands)


collections库中Counter的应用
Counter函数
>>> from collections import Counter
>>> hand = ['AS', '3S', 'AH', '6S', '5D']
>>> c = Counter(x[1]  for x in hand)
>>> c
Counter({'S': 3, 'H': 1, 'D': 1})
>>> c = Counter(x[0]  for x in hand)
>>> c
Counter({'A': 2, '3': 1, '5': 1, '6': 1})
>>> c = Counter(x  for x in hand)
>>> c
Counter({'3S': 1, 'AH': 1, 'AS': 1, '6S': 1, '5D': 1})


Counter的创建
>>> c = Counter('gallahad')
>>> c
Counter({'a': 3, 'l': 2, 'h': 1, 'g': 1, 'd': 1})
>>> c = Counter({'a':4, 'b':2})
>>> c
Counter({'a': 4, 'b': 2})
>>> c = Counter(a=4, b=2)
>>> c
Counter({'a': 4, 'b': 2})


计数值的访问与缺失值的键
>>> c = Counter('abcdefgab')
>>> c
Counter({'a': 2, 'b': 2, 'c': 1, 'e': 1, 'd': 1, 'g': 1, 'f': 1})
>>> c['a']
2
>>> c['b']
2
>>> c['h']
0



计数器的更新
计数器的增加
>>> c = Counter('which')
>>> c
Counter({'h': 2, 'i': 1, 'c': 1, 'w': 1})
>>> c.update('witch')
>>> c
Counter({'h': 3, 'i': 2, 'c': 2, 'w': 2, 't': 1})



计数器的减少
>>> c = Counter('which')
>>> c
Counter({'h': 2, 'i': 1, 'c': 1, 'w': 1})
>>> c.subtract('witch')
>>> c
Counter({'h': 1, 'i': 0, 'c': 0, 'w': 0, 't': -1})
>>> c['h']
1


键的删除
>>> del c['i']
>>> c
Counter({'h': 1, 'c': 0, 'w': 0, 't': -1})



elements()
返回一个迭代器。元素被重复了多少次，在该迭代器中就包含多少个该元素。所有元素按照字母序排序，个数小于1的元素不被包含。
>>> c = Counter(a=4, b=2, c=0, d=2)
>>> list(c.elements())
['a', 'a', 'a', 'a', 'b', 'b', 'd', 'd']


most_common([n])
返回一个TopN列表。如果n没有被指定，则返回所有元素。当多个元素计数值相同时，按照字母序排列。
>>> c = Counter('abracafabra')
>>> c.most_common()
[('a', 5), ('r', 2), ('b', 2), ('c', 1), ('f', 1)]
>>> c.most_common(3)
[('a', 5), ('r', 2), ('b', 2)]


浅拷贝copy
>>> c = Counter('abcdcba')
>>> c
Counter({'a': 2, 'c': 2, 'b': 2, 'd': 1})
>>> d = c.copy()
>>> d
Counter({'a': 2, 'c': 2, 'b': 2, 'd': 1})


算术和集合操作
+、-、&、|操作也可以用于Counter。其中&和|操作分别返回两个Counter对象各元素的最小值和最大值。
需要注意的是，得到的Counter对象将删除小于1的元素。
>>> c = Counter(a=3, b=1)
>>> d = Counter(a=1, b=2)
>>> c+d
Counter({'a': 4, 'b': 3})
>>> c - d
Counter({'a': 2})
>>> c & d
Counter({'a': 1, 'b': 1})
>>> c | d
Counter({'a': 3, 'b': 2})



常用操作
sum(c.values())  # 所有计数的总数
c.clear()  # 重置Counter对象，注意不是删除
list(c)  # 将c中的键转为列表
set(c)  # 将c中的键转为set
dict(c)  # 将c中的键值对转为字典
c.items()  # 转为(elem, cnt)格式的列表
Counter(dict(list_of_pairs))  # 从(elem, cnt)格式的列表转换为Counter类对象
c.most_common()[:-n:-1]  # 取出计数最少的n个元素
c += Counter()  # 移除0和负值




zip函数的应用
zip函数接受任意多个（包括0个和1个）序列作为参数，返回一个tuple列表。
>>> x = [1, 2, 3]
>>> y = [4, 5, 6]
>>> z = [7, 8, 9]
>>> xyz = zip(x, y, z)
>>> xyz
[(1, 4, 7), (2, 5, 8), (3, 6, 9)]
>>> x = [(1,'A'),(2, 'B'),(3,'C')]
>>> y = zip(*x)	#一般认为这是一个unzip的过程
>>> y
[(1, 2, 3), ('A', 'B', 'C')]

从这个结果可以看出zip函数的长度处理方式。
>>> x = [1, 2, 3]
>>> y = [4, 5, 6, 7]
>>> xy = zip(x, y)
>>> xy
[(1, 4), (2, 5), (3, 6)]


>>> x = [1, 2, 3]
>>> r = zip(* [x] * 3)
>>> r
[(1, 1, 1), (2, 2, 2), (3, 3, 3)]
运行的结果是：
[(1, 1, 1), (2, 2, 2), (3, 3, 3)]
它的运行机制是这样的：
[x]生成一个列表的列表，它只有一个元素x
[x] * 3生成一个列表的列表，它有3个元素，[x, x, x]
zip(* [x] * 3)的意思就明确了，zip(x, x, x)


三元表达式
>>> a, b = 1, 2
>>> x = (a if a > b else b)
>>> x
2













###Problem 67###
Find the maximum total from top to bottom in triangle.txt (right click and 'Save Link/Target As...'), 
a 15K text file containing a triangle with one-hundred rows.

whwu@pigeon:~/script/PE$ cat problem_67.py
from urllib import urlopen

file_url = 'https://projecteuler.net/project/resources/p067_triangle.txt'
triangle = [line.split() for line in urlopen(file_url)]
triangle = [line.split() for line in open("pe67.txt")]
#print triangle

for i in range(len(triangle)):
    triangle[i] = [int(num) for num in triangle[i]]

print  triangle


i = len(triangle) - 2
j = 0

while i >= 0:
    for j in range(len(triangle[i])):
        number_origin = triangle[i][j]
        number_1 = triangle[i+1][j]
        number_2 = triangle[i+1][j+1]
        larger = max(number_1, number_2)
        triangle[i][j] = number_origin + larger
    i = i -1

print triangle[0][0]
whwu@pigeon:~/script/PE$ python problem_67.py
7273




























###Problem 96###
A well constructed Su Doku puzzle has a unique solution and can be solved by logic, 
although it may be necessary to employ "guess and test" methods in order to eliminate options (there is much contested opinion over this). 
The complexity of the search determines the difficulty of the puzzle; 
the example above is considered easy because it can be solved by straight forward direct deduction.
The 6K text file, sudoku.txt (right click and 'Save Link/Target As...'), contains fifty different Su Doku puzzles ranging in difficulty,
but all with unique solutions (the first puzzle in the file is the example above).
By solving all fifty puzzles find the sum of the 3-digit numbers found in the top left corner of each solution grid; 
for example, 483 is the 3-digit number found in the top left corner of the solution grid above.


PS C:\Users\Weihong> cat problem_96.py
from urllib import urlopen
s = 0

def same_row(i, j): return (i/9 == j/9)
def same_col(i, j): return (i-j) % 9 == 0
def same_block(i, j): return (i/27 == j/27 and (i % 9)/3 == (j % 9)/3)
def r(a):
        global s
        i = a.find('0')
        if i == -1:
                s += int(a[0:3])

        excluded_numbers = set()
        for j in range(81):
                if same_row(i, j) or same_col(i, j) or same_block(i, j):
                        excluded_numbers.add(a[j])

        for m in '123456789':
                if m not in excluded_numbers:
                        r(a[:i] + m + a[i+1:])

file = urlopen('https://projecteuler.net/project/resources/p096_sudoku.txt', 'r').readlines()
fx = ''.join([line[:9] for line in file if not 'Grid' in line])
fx = [fx[i:(i+81)] for i in range(0, len(fx), 81)]

[r(p) for p in fx]

print "Project Euler 96 Solution =", s

PS C:\Users\Weihong> python problem_96.py
Project Euler 96 Solution = 24702










































































































