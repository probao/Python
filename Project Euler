Problem1
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000.

Anwer
PS C:\Users\Weihong> cat problem_1.py
def multi(n):
        result = []
        for i in range(1, n):
                if i % 3 == 0 or i % 5 == 0:
                        result.append(i)
        #print result
        return sum(result)

if __name__ == '__main__':
        n = int(input('The number:'))
        print('The sum is {0}'.format(multi(n)))
        
 
problem2       
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
  
Answer：
PS C:\Users\Weihong> cat problem_2.py
"""
considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-value
d terms
"""

def fibo():
        a = 1
        b = 2
        even = [2]
        series = [a, b]
        while b < 4000000:
                c = a + b
                a = b
                b = c
                if b % 2 == 0:
                        even.append(b)
        return sum(even)

if __name__ == '__main__':
        print('The sum is {0}'.format(fibo()))

  
  
  problem3
  The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?
PS C:\Users\Weihong> cat problem_3.py
import math

def factors(b):
        factors = []
        for i in xrange(1, int(math.sqrt(b))+2):
                if b % i == 0:
                        factors.append(i)
        return factors

def check_prime(number):
        if number != 1:
                for factor in xrange(2, number):
                        if number % factor == 0:
                                return False
        else:
                return False
        return True

if __name__ == '__main__':
        b = input('The number: ')
        f = factors(b)
        prime = []
        for number in f:
                if check_prime(number):
                        prime.append(number)
        print prime


  problem4
  A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.

Find the largest palindrome made from the product of two 3-digit numbers.
PS C:\Users\Weihong> cat problem_4.py
def group():
        group = []
        for number_1 in range(100, 1000):
                for number_2 in range(number_1, 1000):
                        a = number_1*number_2
                        group.append(a)
        return group

def six_digit(group):
        six_digit = []
        for i in group:
                if len("%d"%i) == 6:
                        six_digit.append(i)
        return six_digit

def check_palin(six_digit):
        palin_number = []
        for i in six_digit:
                tmp = '%d'%i
                if tmp[0] == tmp[5] and tmp[1] == tmp[4] and tmp[2] == tmp[3]:
                        palin_number.append(i)
        return palin_number

if __name__ == '__main__':
        group = group()
        six_digit = six_digit(group)
        print  max(check_palin(six_digit))
        
PS C:\Users\Weihong> python problem_4.py
906609        
        
        
        
        

