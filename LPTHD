练习8
whwu@master:~/script/python/LPTHW> cat ex8.py
formatter="%r %r %r %r"

print formatter % (1,2,3,4)
print formatter % ("one","two","three","four")
print formatter % (True,False,False,True)
print formatter % (
        "I had this thing.",
        "That you could type up right.",
        "But it didn't sing.",
        "So I said goodnight."
)
whwu@master:~/script/python/LPTHW> python ex8.py
1 2 3 4
'one' 'two' 'three' 'four'
True False False True
'I had this thing.' 'That you could type up right.' "But it didn't sing." 'So I said goodnight.'

为什么 “one” 要用引号，而 True 和 False 不需要？
因为 True 和 False 是 Python 的关键字，用来表示真假的意义。如果你加了引号，它们就变成
了字符串，也就无法实现它们本来的功能了。习题 27 中会有详细说明。
我在字符中包含了中文（或者其它非 ASCII 字符），可是 %r 打印出的是乱码？
使用 %s 就行了。
为什么 %r 有时打印出来的是单引号，而我实际用的是双引号？
Python 会用最有效的方式打印出字符串，而不是完全按照你写的方式来打印。这样做对于 %r 来
说是可以接受的，因为它是用作 debug 和排错，没必要非打印出多好看的格式。


练习9
whwu@master:~/script/python/LPTHW> cat ex9.py
#Here's some new strange stuff, remember type it exactly.

days = "Mon Tue Wed Thu Fri Sat Sun"
#months = "Jan\nFeb\nMar\nApr\nMay\nJun\nJul\nAug"
months = "\nJan\nFeb\nMar\nApr\nMay\nJun\nJul\nAug"

print "Here are the days:", days
print "Here are the months:", months

print """
There's something going on here.
With the three double-quotes.
We'll be able to type as much as we like.
Even 4 lines if we want, or 5, or 6.
"""
whwu@master:~/script/python/LPTHW> python ex9.py
Here are the days: Mon Tue Wed Thu Fri Sat Sun
Here are the months:
Jan
Feb
Mar
Apr
May
Jun
Jul
Aug


There's something going on here.
With the three double-quotes.
We'll be able to type as much as we like.
Even 4 lines if we want, or 5, or 6.

怎样将月份显示在新的一行？
字符串以 \n 开始就可以了，像这样：
"\nJan\nFeb\nMar\nApr\nMay\nJun\nJul\nAug"

练习10

whwu@master:~/script/python/LPTHW> cat ex10.py
tabby_cat = "\tI'm tabbed in."
persian_cat = "I'm split\non a line."
backslash_cat = "I'm \\ a \\ cat."

fat_cat = """
I'll do a list:
\t* Cat food
\t* Fishies
\t* Catnip\n\t* Grass
"""

print tabby_cat
print persian_cat
print backslash_cat
print fat_cat

whwu@master:~/script/python/LPTHW> python ex10.py
        I'm tabbed in.
I'm split
on a line.
I'm \ a \ cat.

I'll do a list:
        * Cat food
        * Fishies
        * Catnip
        * Grass


whwu@master:~/script/python/LPTHW> cat ex10plus1.py
while True:
        for i in ["/","-","|","\\","|"]:
#               print "%s\r" % i,
                print "%s" % i,


练习11
whwu@master:~/script/python/LPTHW> cat ex11.py
print "How old are you?",
age = raw_input()
print "How tall are you?",
height = raw_input()
print "How much do you weigh?",
weight = raw_input()

print "So, you're %r old, %r tall and %r heavy." %(
age, height,weight)


whwu@master:~/script/python/LPTHW> python ex11.py
How old are you? 35
How tall are you? 6'5''
How much do you weigh? 180lbs
So, you're '35' old, "6'5''" tall and '180lbs' heavy.

Note
注意到我在每行 print 后面加了个逗号(comma) , 了吧？这样的话 print 就不会输出新行符而结束
这一行跑到下一行去了。


input和raw_input在处理数字时是有区别的：
1.输入为纯数字时
input返回的是数值类型，如int,float
 raw_inpout返回的是字符串类型，string类型
whwu@master:~/script/python/LPTHW> cat ex11plus1.py
print "how old are you?"
age1 = input()
print "%r" % age1
print
age2 = raw_input()
print "%r" %age2
whwu@master:~/script/python/LPTHW> python ex11plus1.py
how old are you?
22
22

22
'22'//raw_input()把输入整形当做字符串处理  


2.输入字符串为表达式
input会计算在字符串中的数字表达式，而raw_input不会。
whwu@master:~/script/python/LPTHW> cat ex11plus2.py
sum = input()
print "%r" % sum
print

sum = raw_input()
print "%r" % sum
whwu@master:~/script/python/LPTHW> python ex11plus2.py
1+2
3

1+2
'1+2'
input() 和 raw_input() 有何不同？
input() 函数会把你输入的东西当做 Python 代码进行处理，这么做会有安全问题，你应该避开
这个函数。


练习12
whwu@master:~/script/python/LPTHW> cat ex12.py
age= raw_input("How old are you?")
height = raw_input("How tall are you?")
weight = raw_input("How much do you weigh?")

print "So, you're %r old, %r tall and %r heavy." % (
        age,height,weight)
whwu@master:~/script/python/LPTHW> python ex12.py
How old are you?35
How tall are you?6'2"
How much do you weigh?190lbs
So, you're '35' old, '6\'2"' tall and '190lbs' heavy.



练习13
whwu@master:~/script/python/LPTHW> python ex13.py wu wei hong
The script is called: ex13.py
Your first variable is: wu
Your second variable is: wei
Your third variable is: hong
whwu@master:~/script/python/LPTHW> cat ex13.py
from sys import argv

script,first,second,third = argv

script,first,second,third = argv

print "The script is called:", script
print "Your first variable is:", first
print "Your second variable is:", second
print "Your third variable is:", third


练习14
whwu@master:~/script/python/LPTHW> python ex14.py Zed
Hi Zed, I'm the ex14.py script.
I'd like to ask you a few questions.
Do you like me Zed?
>yes
Where do you live Zed?
>usa
What kind of computer do you have?
>laptop

Alright, so you said 'yes' about liking me.
You live in 'usa'. Not sure where that is.
And you have a 'laptop' computer.Nice.

whwu@master:~/script/python/LPTHW> cat ex14.py
from sys import argv

script,user_name = argv
prompt = '>'

print "Hi %s, I'm the %s script." % (user_name, script)
print "I'd like to ask you a few questions."
print "Do you like me %s?" %user_name
likes = raw_input(prompt)

print "Where do you live %s?" % user_name
lives = raw_input(prompt)

print "What kind of computer do you have?"
computer = raw_input(prompt)

print"""
Alright, so you said %r about liking me.
You live in %r. Not sure where that is.
And you have a %r computer.Nice.
""" % (likes, lives, computer)


练习15
whwu@master:~/script/python/LPTHW> cat ex15.py
from sys import argv  #  从sys库中引入argv

script,filename = argv	# 命名参数

txt = open(filename) # 将文件打开，并赋值于txt

print "Here's your file %r:" % filename
print txt.read()	# read txt中的所有内容

print "Type the filename again:"
file_again = raw_input(">")

txt_again = open(file_again)

print txt_again.read()

whwu@master:~/script/python/LPTHW> python ex15.py ex15_sample.txt
Here's your file 'ex15_sample.txt':
This is stuff I typed into a file.
It is really cool stuff.
Lots and lots of fun to have in here.

Type the filename again:
>ex15_sample.txt
This is stuff I typed into a file.
It is really cool stuff.
Lots and lots of fun to have in here.


练习16
? close – 关闭文件。跟你编辑器的 文件->保存.. 一个意思。
? read – 读取文件内容。你可以把结果赋给一个变量。
? readline – 读取文本文件中的一行。
? truncate – 清空文件，请小心使用该命令。
? write(stuff) – 将stuff 写入文件。

open/文件操作
f=open('/tmp/hello','w')

#open(路径+文件名,读写模式)

#读写模式:r只读,r+读写,w新建(会覆盖原有文件),a追加,b二进制文件.常用模式

如:'rb','wb','r+b'等等

读写模式的类型有：

rU 或 Ua 以读方式打开, 同时提供通用换行符支持 (PEP 278)
w     以写方式打开，
a     以追加模式打开 (从 EOF 开始, 必要时创建新文件)
r+     以读写模式打开
w+     以读写模式打开 (参见 w )
a+     以读写模式打开 (参见 a )
rb     以二进制读模式打开
wb     以二进制写模式打开 (参见 w )
ab     以二进制追加模式打开 (参见 a )
rb+    以二进制读写模式打开 (参见 r+ )
wb+    以二进制读写模式打开 (参见 w+ )
ab+    以二进制读写模式打开 (参见 a+ )


whwu@master:~/script/python/LPTHW> cat ex16.py
from sys import argv

script,filename = argv

print "We're going to erase %r." % filename
print "If you don't want that, hit CTRL-C(^C)."
print "If you do want that, hit return."

raw_input("?")

print "Opening the file..."
target = open(filename, 'w') # 打开文件，以写模式打开，会覆盖原来内容

print "Truncating the file. Goodbye!"
target.truncate()

print "Now I'm going to ask you for three lines."

line1 = raw_input("line 1:")
line2 = raw_input("line 2:")
line3 = raw_input("line 3:")

print "I'm going to write these to the file."

target.write(line1)
target.write("\n")
target.write(line2)
target.write("\n")
target.write(line3)
target.write("\n")

print "And finally, we close it."
target.close()

whwu@master:~/script/python/LPTHW> cat test.txt
To all the people out there.
I say I don't like my hair.
I need to shave it off

whwu@master:~/script/python/LPTHW> python ex16.py test.txt
We're going to erase 'test.txt'.
If you don't want that, hit CTRL-C(^C).
If you do want that, hit return.
?
Opening the file...
Truncating the file. Goodbye!
Now I'm going to ask you for three lines.
line 1:haha
line 2:baa
line 3:jj
I'm going to write these to the file.
And finally, we close it.
whwu@master:~/script/python/LPTHW> cat test.
cat: test.: No such file or directory
whwu@master:~/script/python/LPTHW> cat test.txt
haha
baa
jj


练习17
whwu@master:~/script/python/LPTHW> cat ex17.py
from sys import argv
from os.path import exists	# exists。这个命令将文件名字符串作为参数，如果文件存在的话，它将返回 True，否则将返回 False。

script, from_file, to_file = argv

print "Copy from %s to %s" % (from_file, to_file)

# we could do these two on one line too, how?

in_file = open (from_file)
indata = in_file.read()

print "The input file is %d bytes long" % len(indata)

print "Does the output file exist? %r" % exists(to_file)
print "Ready, hit RETURN to continue, CTRL-C to abort."
raw_input()	# 直接从键盘接受命令

out_file = open(to_file, 'w')
out_file.write(indata)

print "Alright, all done."

out_file.close()
in_file.close()

whwu@master:~/script/python/LPTHW> python ex17.py test.txt copied.txt
Copy from test.txt to copied.txt
The input file is 12 bytes long
Does the output file exist? False
Ready, hit RETURN to continue, CTRL-C to abort.

Alright, all done.



练习18
whwu@master:~/script/python/LPTHW> cat ex18.py
# this one is like your scripts with argv
def print_two(*args):
        arg1,arg2 = args
        print "arg1: %r, arg2: %r" % (arg1, arg2)

# ok, that *args is actually pointless, we can just do this
def print_two_again(arg1, arg2):
        print "arg1: %r, arg2: %r" % (arg1, arg2)

# this just takes one argument
def print_one(arg1):
        print "arg1: %r" % arg1

# this one takes no arguments
def print_none():
        print "I got nothing."

print_two("Zed", "Shaw")
print_two_again("Zed","Shaw")
print_one("First!")
print_none()
whwu@master:~/script/python/LPTHW> python ex18.py
arg1: 'Zed', arg2: 'Shaw'
arg1: 'Zed', arg2: 'Shaw'
arg1: 'First!'
I got nothing.

练习19

whwu@master:~/script/python/LPTHW> cat ex19.py
def cheese_and_crackers(cheese_count, boxes_of_crackers):
        print "You have %d cheese!" % cheese_count
        print "You have %d boxes of crackers!" % boxes_of_crackers
        print "Man that's enough for a party!"
        print "Get a blanket.\n"

print "We can just give the function numbers directly:"
cheese_and_crackers(20, 30)

print "OR, we can use variables from our script:"
amount_of_cheese = 10
amount_of_crackers = 50

cheese_and_crackers(amount_of_cheese, amount_of_crackers)

print "We can even do math inside too:"
cheese_and_crackers(10 + 20, 5 + 6)

print "And we can combine the two, variables and math:"
cheese_and_crackers(amount_of_cheese + 100, amount_of_crackers + 1000)


whwu@master:~/script/python/LPTHW> python ex19.py
We can just give the function numbers directly:
You have 20 cheese!
You have 30 boxes of crackers!
Man that's enough for a party!
Get a blanket.

OR, we can use variables from our script:
You have 10 cheese!
You have 50 boxes of crackers!
Man that's enough for a party!
Get a blanket.

We can even do math inside too:
You have 30 cheese!
You have 11 boxes of crackers!
Man that's enough for a party!
Get a blanket.

And we can combine the two, variables and math:
You have 110 cheese!
You have 1050 boxes of crackers!
Man that's enough for a party!
Get a blanket.


练习20


whwu@master:~/script/python/LPTHW> cat ex20.py
from sys import argv

script,input_file = argv

def print_all(f):
        print f.read()

def rewind(f):
        f.seek(0)

def print_a_line(line_count,f):
        print line_count,f.readline()

current_file = open(input_file)

print "First let's print the whole file:\n"

print_all(current_file)

print "Now let's rewind, kind of like a tape."

rewind(current_file)

print "Let's print three lines:"

current_line = 1
print_a_line(current_line, current_file)

current_line = current_line + 1
print_a_line(current_line, current_file)

current_line = current_line + 1
print_a_line(current_line, current_file)


whwu@master:~/script/python/LPTHW> python ex20.py test.txt
First let's print the whole file:

123456789
222222222
333333333
444444444
555555555

Now let's rewind, kind of like a tape.
Let's print three lines:
1 123456789

2 222222222

3 333333333

print_all 和其它函数里的 f 是什么？
和 Ex 18 里的一样， f 只是一个变量名而已，不过在这里它指的是一个文件。Python 里的文件
就和老式磁带机，或者 DVD 播放机差不多。它有一个用来读取数据的“磁头”，你可以通过这
个“磁头”来操作文件。每次你运行 f.seek(0) 你就回到了文件的开始，而运行
f.readline() 则会读取文件的一行，然后将“磁头”移动到 \n 后面。后面你会看到更详细
的解释。
问什么文件里会有间隔空行？
readline() 函数返回的内容中包含文件本来就有的 \n，而 print 在打印时又会添加一个
\n，这样一来就会多出一个空行了。解决方法是在 print 语句结尾加一个逗号 ,，这样 print 就
不会把它自己的 \n 打印出来了。
为什么 seek(0) 没有把 current_line 设为 0？
首先 seek() 函数的处理对象是 字节 而非行，所以 seek(0) 只是转到文件的 0 byte，也就
是第一个 byte 的位置。其次， current_line 只是一个独立变量，和文件本身没有任何关系，
我们只能手动为其增值。

file.seek()方法标准格式是：seek(offset,whence=0)
offset：开始的偏移量，也就是代表需要移动偏移的字节数
whence：给offset参数一个定义，表示要从哪个位置开始偏移；0代表从文件开头开始算起，1代表从当前位置开始算起，2代表从文件末尾算起。


whwu@master:~/script/python/LPTHW> cat test2.txt
123456789

whwu@master:~/script/python/LPTHW> python
Python 2.6.6 (r266:84292, Jul 23 2015, 15:22:56)
[GCC 4.4.7 20120313 (Red Hat 4.4.7-11)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> x = file('test2.txt', 'r')
>>> x.seek(3)

>>> x.tell()
3
>>> x.seek(4)
>>> x.tell()
4
>>> x.seek(1, 4)
>>> x.seek(-1, 2)
>>> x.tell()
9
>>> x.seek(-4, 2)
>>> x.tell()
6
>>> x.seek(0,0)
>>> x.tell()
0


练习21
whwu@master:~/script/python/LPTHW> cat ex21.py
def add(a, b):
        print "ADDING %d + %d" % (a, b)
        return a + b

def subtract(a, b):
        print "SUBTRACTING %d - %d" % (a, b)
        return a - b

def multiply(a, b):
        print "MULTIPLY %d * %d" % (a, b)
        return a * b

def divide(a, b):
        print "DIVIDING %d / %d" % (a, b)
        return a / b

print "Let's do some math with just functions!"

age = add(30, 5)
height = subtract(78, 4)
weight = multiply(90, 2)
iq = divide(100, 2)

print "Age: %d, Height: %d, Weight: %d, IQ: %d" % (age, height, weight, iq)

# A puzzle for the extra credit, type it in anyway.

print "Here is a puzzle."

what = add(age, subtract(height, multiply(weight, divide(iq, 2))))

print "That becomes:", what, "Can you do it by hand?"
whwu@master:~/script/python/LPTHW> python ex21.py
Let's do some math with just functions!
ADDING 30 + 5
SUBTRACTING 78 - 4
MULTIPLY 90 * 2
DIVIDING 100 / 2
Age: 35, Height: 74, Weight: 180, IQ: 50
Here is a puzzle.
DIVIDING 50 / 2
MULTIPLY 180 * 25
SUBTRACTING 74 - 4500
ADDING 35 + -4426
That becomes: -4391 Can you do it by hand?


whwu@master:~/script/python/LPTHW> cat ex21plus.py
def math(a, b, c, d):
        print "ADDING %f + %f / %f - %f" % (a, b, c, d)
        return a + b / c - d

a = float(raw_input("a:"))
b = float(raw_input("b:"))
c = float(raw_input("c:"))
d = float(raw_input("d:"))

answer = math(a, b, c, d)

print "The answer is %.2f" % answer
whwu@master:~/script/python/LPTHW> python ex21plus.py
a:12
b:2
c:4
d:5
ADDING 12.000000 + 2.000000 / 4.000000 - 5.000000
The answer is 7.50



练习24
whwu@master:~/script/python/LPTHW> cat ex24.py
print "Let's practice everything."
print 'You\'d need to know \'bout escapes with \\ that d \n newlines and \t tabs.'

poem = """
\tThe lovely world
with logic so firmly planted
cannot discern \n the needs of love
nor comprehend passion from intuition
and requires an explanation
\n\t\twhere there is none.
"""

print "----------"
print poem
print "----------"

five = 10 - 2 + 3 - 6
print "This should be five : %s" % five

def secret_formula(started):
        jelly_beans = started * 500
        jars = jelly_beans / 1000
        crates = jars / 100
        return jelly_beans, jars, crates

start_point = 10000
beans, jars, crates = secret_formula(start_point)

print "With a starting point of %d" % start_point
print "We'd have %d beans, %d jars, and %d crates." % (beans, jars, crates)

start_point = start_point / 10

print "We can also do that this way:"
print "We'd have %d beans, %d jars, and %d crates." % secret_formula(start_point) #这是函数的工作原理。记住函数内部的变量都是临时的，当你的函数返回以后，返回值可以被赋予
										  #一个变量。我这里是创建了一个新变量，用来存放函数的返回值。

whwu@master:~/script/python/LPTHW> python ex24.py
Let's practice everything.
You'd need to know 'bout escapes with \ that d
 newlines and    tabs.
----------

        The lovely world
with logic so firmly planted
cannot discern
 the needs of love
nor comprehend passion from intuition
and requires an explanation

                where there is none.

----------
This should be five : 5
With a starting point of 10000
We'd have 5000000 beans, 5000 jars, and 50 crates.
We can also do that this way:
We'd have 500000 beans, 500 jars, and 5 crates.


练习25
whwu@master:~/script/python/LPTHW> cat ex25.py
def break_words(stuff):
        """This function will break up words for us."""
        words = stuff.split(' ')
        return words

def sort_words(words):
        """Sorts the words."""
        return sorted(words)

def print_first_word(words):
        """Prints the first word after popping it off."""
        word = words.pop(0)
        print word

def print_last_word(words):
        """Prints the last word after popping it off."""
        word = words.pop(-1)
        print word

def sort_sentence(sentence):
        """Take in a full sentence and returns the sorted words."""
        words = break_words(sentence)
        return sort_word(words)

def print_first_and_last(sentence):
        """Prints the first and last words of the sentence."""
        words = break_words(sentence)
        print_first_word(words)
        print_last_word(words)

def print_first_and_last_sorted(sentence):
        """Sorts the words then prints the first and last one."""
        words = sort_sentence(sentence)
        print_first_word(words)
        print_last_word(words)

whwu@master:~/script/python/LPTHW> python
Python 2.6.6 (r266:84292, Jul 23 2015, 15:22:56)
[GCC 4.4.7 20120313 (Red Hat 4.4.7-11)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import ex25
>>> sentence = "All good things come to those who wait."
>>> words = ex25.break_words(sentence)
>>> words
['All', 'good', 'things', 'come', 'to', 'those', 'who', 'wait.']
>>> sorted_words = ex25.sort_words(words)
>>> sorted_words
['All', 'come', 'good', 'things', 'those', 'to', 'wait.', 'who']
>>> ex25.print_first_word(words)
All
>>> ex25.print_last_word(words)
wait.
>>> words
['good', 'things', 'come', 'to', 'those', 'who']
>>>
>>> ex25.print_first_word(sorted_words)
All
>>> ex25.print_last_word(sorted_words)
who
>>> sorted_words = ex25.sort_sentence(sentence)
>>> sorted_words
['All', 'come', 'good', 'things', 'those', 'to', 'wait.', 'who']
>>> ex25.print_first_and_last(sentence)
All
wait.
>>> ex25.print_first_and_last_sorted(sentence)
All
who


练习28 布尔表达式
whwu@master:~> python
Python 2.6.6 (r266:84292, Jul 23 2015, 15:22:56)
[GCC 4.4.7 20120313 (Red Hat 4.4.7-11)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> True and True
True
>>> False and True
False
>>> 1 == 1 and 2 == 1
False
>>> "test" == "test"
True
>>> 1 == 1 or 2 != 1
True
>>> True and 1 == 1
True
>>> False and 0 != 0
False
>>> True or 1 == 1
True
>>> "test" == "testing"
False
>>> 1 != 0 and 2 == 1
False
>>> "test" != "testing"
True
>>> "test" == 1
False
>>> not (True and False)
True
>>> not (1 == 1 and 0 != 1)
False
>>> not ( 10 == 1 or 1000 == 1000 )
False
>>> not ( 1 != 10 or 3 == 4)
False
>>> not ( "testing" == "testing" and "Zed" == "Cool Guy" )
True
>>> 1 == 1 and (not("testing" == 1  or 1== 0))
True
>>> "chunky" == "bacon" and (not (3 == 4 or 3 == 3))
False
>>> 3 == 3 and (not ("testing" == "testing" or "Python" == "Fun"))
False





练习29
whwu@master:~/script/python/LPTHW> python ex29.py
Too many cats! The world is doomed!
The world is dry!
People are greater than or equal to dogs.
People are less than or equal to dogs.
People are dogs.
whwu@master:~/script/python/LPTHW> cat ex29.py
people = 20
cats = 30
dogs = 15

if people < cats:
        print "Too many cats! The world is doomed!"

if people > cats:
        print "Not many cats! The world  is saved!"

if people < dogs:
        print "The world is drooled on!"

if people > dogs:
        print "The world is dry!"

dogs += 5

if people >= dogs:
        print "People are greater than or equal to dogs."

if people <= dogs:
        print "People are less than or equal to dogs."

if people == dogs:
        print "People are dogs."



练习30
people = 20
cats = 30
dogs = 15

if people < cats:
        print "Too many cats! The world is doomed!"

if people > cats:
        print "Not many cats! The world  is saved!"

if people < dogs:
        print "The world is drooled on!"

if people > dogs:
        print "The world is dry!"

dogs += 5

if people >= dogs:
        print "People are greater than or equal to dogs."

if people <= dogs:
        print "People are less than or equal to dogs."

if people == dogs:
        print "People are dogs."


练习31
whwu@master:~/script/python/LPTHW> python ex31.py
You enter a dark room with two doors. Do you go through door #1 or door #2?
> 1
There's a giant bear here eating a cheese cake. What do you do?
1.Take the cake.
2.Scream at the bear.
> 2
The bear eats your legs off. Good job!
whwu@master:~/script/python/LPTHW> python ex31.py
You enter a dark room with two doors. Do you go through door #1 or door #2?
> 2
You stare into the endless abyss at Cthulhu's retina.
1. Blueberries.
2. Yellow jacket clothespins.
3. Understanding revolvers yelling melodies.
> 1
Your body survives powered by a mind of jello. Good job!
whwu@master:~/script/python/LPTHW> cat ex31.py
print "You enter a dark room with two doors. Do you go through door #1 or door #2?"

door = raw_input("> ")

if door == "1":
        print "There's a giant bear here eating a cheese cake. What do you do?"
        print "1.Take the cake."
        print "2.Scream at the bear."

        bear = raw_input("> ")

        if bear == "1":
                print "The bear eats your face off. Good Job!"
        elif bear == "2":
                print "The bear eats your legs off. Good job!"
        else:
                print "Well, doing %s is probably better. Bear runs away." % bear

elif door == "2":
        print "You stare into the endless abyss at Cthulhu's retina."
        print "1. Blueberries."
        print "2. Yellow jacket clothespins."
        print "3. Understanding revolvers yelling melodies."

        insanity = raw_input("> ")

        if insanity == "1" or insanity == "2":
                print "Your body survives powered by a mind of jello. Good job!"
        else:
                print "You stumble around and fall on a knife and die. Good job!"


练习32
whwu@master:~/script/python/LPTHW> cat ex32.py
the_count = [1, 2, 3, 4, 5]
fruits = ['apples', 'oranges', 'pears', 'apricots']
change = [1, 'pennies', 2, 'dimes', 3, 'qarters']

# this first kind of for-loop goes through a list
for number in the_count:
        print "This is count %d" % number

# same as above
for fruit in fruits:
        print "A fruit of type: %s" % fruit

# also we can go through mixed lists too
# notice we have to use %r since we don't know what's in it
for i in change:
        print "I got %r" % i

# we can also build lists, first start with an empty one
elements = []

# then use the range function to do 0 to 5 counts
for i in range(0, 6):
        print "Adding %d to the list." % i
        # append is a function that lists understand
        elements.append(i)

# now we can print them out too
for i in elements:
        print "Element was:%d" % i

whwu@master:~/script/python/LPTHW> python ex32.py
This is count 1
This is count 2
This is count 3
This is count 4
This is count 5
A fruit of type: apples
A fruit of type: oranges
A fruit of type: pears
A fruit of type: apricots
I got 1
I got 'pennies'
I got 2
I got 'dimes'
I got 3
I got 'qarters'
Adding 0 to the list.
Adding 1 to the list.
Adding 2 to the list.
Adding 3 to the list.
Adding 4 to the list.
Adding 5 to the list.
Element was:0
Element was:1
Element was:2
Element was:3
Element was:4
Element was:5

whwu@master:~/script/python/LPTHW> cat ex32plus1.py
a = int(raw_input("> "))

element = []

for i in range(0,a):
        print "adding %d to the list." % i
        element.append(i)


print element

whwu@master:~/script/python/LPTHW> python ex32plus1.py
> 5
adding 0 to the list.
adding 1 to the list.
adding 2 to the list.
adding 3 to the list.
adding 4 to the list.
[0, 1, 2, 3, 4]

Q: 为什么 for i in range(1, 3): 只循环了两次？
 range() 函数循环的次数不包括最后一个。所以 range(1,3) 只循环到2,这是这种循环最常用的方法。





练习33
whwu@master:~/script/python/LPTHW> cat ex33.py
i = 0
numbers = []

while i < 6:
        print "At the top i is %d" % i
        numbers.append(i)	

        i = i + 1
        print "Numbers now:", numbers
        print "At the bottom i is %d" % i

print "The numbers:"

for num in numbers:	# 按顺序读出列表里的数字
        print num
whwu@master:~/script/python/LPTHW> python ex33.py
At the top i is 0
Numbers now: [0]
At the bottom i is 1
At the top i is 1
Numbers now: [0, 1]
At the bottom i is 2
At the top i is 2
Numbers now: [0, 1, 2]
At the bottom i is 3
At the top i is 3
Numbers now: [0, 1, 2, 3]
At the bottom i is 4
At the top i is 4
Numbers now: [0, 1, 2, 3, 4]
At the bottom i is 5
At the top i is 5
Numbers now: [0, 1, 2, 3, 4, 5]
At the bottom i is 6
The numbers:
0
1
2
3
4
5


whwu@master:~/script/python/LPTHW> cat ex33plus1.exe
def add(x):
        i = 0
        numbers = []

        while i < x:
                print "At the top i is %d" % i
                numbers.append(i)

                i = i + 1
                print "Numbers now:", numbers
                print "At the bottom i is %d" % i

        print "The numbers:"

        for num in numbers:
                print num

x = int(raw_input("x:"))   # 必须注意数字的格式
#x = raw_input("x:")
add(x)
whwu@master:~/script/python/LPTHW> python ex33plus1.exe
x:4
At the top i is 0
Numbers now: [0]
At the bottom i is 1
At the top i is 1
Numbers now: [0, 1]
At the bottom i is 2
At the top i is 2
Numbers now: [0, 1, 2]
At the bottom i is 3
At the top i is 3
Numbers now: [0, 1, 2, 3]
At the bottom i is 4
The numbers:
0
1
2
3



练习35
whwu@master:~/script/python/LPTHW> cat ex35.py
from sys import exit

def gold_room():
        print "This room is full of gold. How much do you take?"

        next = raw_input("> ")
        if "0" in next or "1" in next:  # 如果数字中含有0或1
                how_much = int(next)
        else:
                dead("Man, learn to type a number.")

        if how_much < 50:
                print "Nice, you're not greedy, you win!"
                exit(0)
        else:
                dead("You greedy bastard!")

def bear_room():
        print "There is a bear here."
        print "The bear has a bunch of honey."
        print "The fat bear is in front of another door."
        print "How are you going to move the bear?"
        bear_moved = False

        while True:		# 这样可以创建一个无限循环
                next = raw_input("> ")

                if next == "take honey":
                        dead("The bear looks at you then slaps your face off.")
                elif next == "taunt bear" and not bear_moved:
                        print "The bear has moved from the door. You can go through it now."
                        bear_moved = True
                elif next == "taunt bear" and bear_moved:
                        dead("The bear gets pissed off and chews your leg off.")
                elif next == "open door" and bear_moved:
                        gold_room()
                else:
                        print "I got no idea what that means."

def cthulhu_room():
        print "Here you see the great evil Cthulhu."
        print "He, it, whatever stares at you and you go insane."
        print "Do you flee for your life or eat your head?"

        next = raw_input("> ")
        if "flee" in next:
                start()
        elif "head" in next:
                dead("Well that was tasty!")
        else:
                cthulhu_room()

def dead(why):
        print why,"Good job!"
        exit(0)

def start():
        print "You are in a dark room."
        print "There is a door to your right and  left."
        print "Which one do you take?"

        next = raw_input("> ")

        if next == "left":
                bear_room()
        elif next == "right":
                cthulhu_room()
        else:
                dead("You stumble around the room until you starve.")

start()

whwu@master:~/script/python/LPTHW> python ex35.py
You are in a dark room.
There is a door to your right and  left.
Which one do you take?
> left
There is a bear here.
The bear has a bunch of honey.
The fat bear is in front of another door.
How are you going to move the bear?
> taunt bear
The bear has moved from the door. You can go through it now.
> open door
This room is full of gold. How much do you take?
> 100
You greedy bastard! Good job!


练习38
whwu@master:~/script/python/LPTHW> cat ex38plus1.py
ten_things = "Apples Oranges Crows Telephone Light Sugar"

print "Wait there are not 10 things in that list. Let's fix that."

stuff = ten_things.split(' ')	# split函数，以空格为分隔符
more_stuff = ["Day", "Night", "Song", "Frisbee", "COrn", "Banana", "Girl", "Boy"]

while len(stuff) != 10:		# len函数，判断stuff列表中元素的个数
        next_one = more_stuff.pop() # pop函数，从列表中移除并返回最后一项或obj
        print "Adding:", next_one
        stuff.append(next_one)
        print "There are %d items now." % len(stuff)

print "There we go:", stuff

print "Let's do some things with stuff."

print stuff[1]
print stuff[-1]
print stuff.pop()
print ' '.join(stuff)   #join()：   连接字符串数组。将字符串、元组、列表中的元素以指定的字符(分隔符)连接生成一个新的字
print '#'.join(stuff[3:5])

whwu@master:~/script/python/LPTHW> python ex38plus1.py
Wait there are not 10 things in that list. Let's fix that.
Adding: Boy
There are 7 items now.
Adding: Girl
There are 8 items now.
Adding: Banana
There are 9 items now.
Adding: COrn
There are 10 items now.
There we go: ['Apples', 'Oranges', 'Crows', 'Telephone', 'Light', 'Sugar', 'Boy', 'Girl', 'Banana', 'COrn']
Let's do some things with stuff.
Oranges
COrn
COrn
Apples Oranges Crows Telephone Light Sugar Boy Girl Banana
Telephone#Light



whwu@master:~/script/python/LPTHW> python		#len函数
Python 2.6.6 (r266:84292, Jul 23 2015, 15:22:56)
[GCC 4.4.7 20120313 (Red Hat 4.4.7-11)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> ten_things = "Apples Oranges Crows Telephon" # 字符串长度
>>> len(ten_things)
29
>>> ten_things_ed = ten_things.split(' ')
>>> len(ten_things_ed)			# 列表中元素个数
4
>>> ten_things_ed
['Apples', 'Oranges', 'Crows', 'Telephon']




练习39
>>> stuff = {'name':'Zed', 'age': 39, 'height': 6 * 12 + 2}
>>> print stuff['name']
Zed
>>> print stuff['age']
39
>>> print stuff['height']
74
>>> stuff['city'] = "San Francisco"
>>> stuff
{'city': 'San Francisco', 'age': 39, 'name': 'Zed', 'height': 74}
>>> stuff["haha"] = "xixi"
>>> stuff
{'city': 'San Francisco', 'age': 39, 'haha': 'xixi', 'name': 'Zed', 'height': 74}


whwu@master:~/script/python/LPTHW> cat ex38.py
# create a mapping of state to abbreviation

states = {					# 定义一个叫states的字典
        'Oregon': 'OR',
        'Florida': 'FL',
        'California': 'CA',
        'New York': 'NY',
        'Michigan': 'MI'
}

# create a basic set of states and some cities in them
cities = {					# 定义一个叫cities的字典
        'CA': 'San Francisco',
        'MI': 'Detroit',
        'FL': 'Jacksonville'
}

# add some more cities
cities['NY'] = 'New York'			# 在cities的字典中增加'NY':'New York'
cities['OR'] = 'Portland'			# 在cities的字典中增加'OR':'Portland'

# print out some cities
print '-' * 10
print "NY state has: ", cities['NY']		# 在cities这个字典中，通过键（key）来找到所需的值
print "OR state has: ", cities['OR']

# print some states
print '-' * 10
print "Michigan's abbreviation is: ", states['Michigan']
print "Florida's abbreviation is: ", states['Florida']

# do it by using the state then cities dict
print '-'*10
print "Michigan has:", cities[states['Michigan']]	# 在字典states中，得到键'Michigan'的值，再在cities这个字典中找
print "Florida has:", cities[states['Florida']]

# print every state abbreviation
print '-' * 10
for state, abbrev in states.items():
        print "%s is abbreviated %s" % (state, abbrev)		# item函数 item()方法把字典中每对key和value组成一个元组，并把这些元组放在列表中返回。

# print every city in state
print '-' * 10
for abbrev, city in cities.items():
        print "%s has the city %s" % (abbrev, city)

# now do both at the same time
print '-' * 10
for state, abbrev in states.items():
        print "%s state is abbreviated %s and has city %s" % (
                state, abbrev, cities[abbrev])

print '-' * 10

# safely get a abbreviation by state that might not be there
state = states.get('Texas', None)			# get函数Python 字典(Dictionary) get() 函数返回指定键的值，如果值不在字典中返回默认值。
							# get()方法语法：dict.get(key, default=None) key -- 字典中要查找的键。default -- 如果指定键的值不存在时，返回该默认值值None。
if not state:
        print "Sorry, no Texas."

# get a city with a default value
city = cities.get('TX', 'Does Not Exist')
print "The city for the state 'TX' is: %s" % city


whwu@master:~/script/python/LPTHW> python ex38.py
----------
NY state has:  New York
OR state has:  Portland
----------
Michigan's abbreviation is:  MI
Florida's abbreviation is:  FL
----------
Michigan has: Detroit
Florida has: Jacksonville
----------
California is abbreviated CA
Michigan is abbreviated MI
New York is abbreviated NY
Florida is abbreviated FL
Oregon is abbreviated OR
----------
FL has the city Jacksonville
CA has the city San Francisco
MI has the city Detroit
OR has the city Portland
NY has the city New York
----------
California state is abbreviated CA and has city San Francisco
Michigan state is abbreviated MI and has city Detroit
New York state is abbreviated NY and has city New York
Florida state is abbreviated FL and has city Jacksonville
Oregon state is abbreviated OR and has city Portland
----------
Sorry, no Texas.
The city for the state 'TX' is: Does Not Exist

whwu@master:~/script/python/LPTHW> cat ex38plus1.py
ten_things = "Apples Oranges Crows Telephone Light Sugar"

print "Wait there are not 10 things in that list. Let's fix that."

stuff = ten_things.split(' ')	# split函数，以空格为分隔符
more_stuff = ["Day", "Night", "Song", "Frisbee", "COrn", "Banana", "Girl", "Boy"]

while len(stuff) != 10:		# len函数，判断stuff列表中元素的个数
        next_one = more_stuff.pop() # pop函数，从列表中移除并返回最后一项或obj
        print "Adding:", next_one
        stuff.append(next_one)
        print "There are %d items now." % len(stuff)

print "There we go:", stuff

print "Let's do some things with stuff."

print stuff[1]
print stuff[-1]
print stuff.pop()
print ' '.join(stuff)   #join()：   连接字符串数组。将字符串、元组、列表中的元素以指定的字符(分隔符)连接生成一个新的字
print '#'.join(stuff[3:5])

whwu@master:~/script/python/LPTHW> python ex38plus1.py
Wait there are not 10 things in that list. Let's fix that.
Adding: Boy
There are 7 items now.
Adding: Girl
There are 8 items now.
Adding: Banana
There are 9 items now.
Adding: COrn
There are 10 items now.
There we go: ['Apples', 'Oranges', 'Crows', 'Telephone', 'Light', 'Sugar', 'Boy', 'Girl', 'Banana', 'COrn']
Let's do some things with stuff.
Oranges
COrn
COrn
Apples Oranges Crows Telephone Light Sugar Boy Girl Banana
Telephone#Light


whwu@master:~/script/python/LPTHW> python		#len函数
Python 2.6.6 (r266:84292, Jul 23 2015, 15:22:56)
[GCC 4.4.7 20120313 (Red Hat 4.4.7-11)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> ten_things = "Apples Oranges Crows Telephon" # 字符串长度
>>> len(ten_things)
29
>>> ten_things_ed = ten_things.split(' ')
>>> len(ten_things_ed)			# 列表中元素个数
4
>>> ten_things_ed
['Apples', 'Oranges', 'Crows', 'Telephon']




练习40
whwu@master:~/script/python/LPTHW> cat ex40.py
class Song(object):
        def __init__(self, lyrics):
                self.lyrics = lyrics

        def sing_me_a_song(self):
                for line in self.lyrics:
                        print line

happy_bday = Song(["Happy birthday to you",   #  Song.__int__(happy_bday, ....)
                "I don't want to get sued",
                "So I'll stop right there"])

bulls_on_parade = Song(["They rally around the family",
                        "With pockets full of shells"])

happy_bday.sing_me_a_song( )


bulls_on_parade.sing_me_a_song( )


whwu@master:~/script/python/LPTHW> python ex40.py
Happy birthday to you
I don't want to get sued
So I'll stop right there
They rally around the family
With pockets full of shells

为什么创建 __init__ 或者别的类函数时需要多加一个 self 变量？
如果你不加 self ， cheese = 'Frank' 这样的代码意义就不明确了，它指的既可能
是实例的 cheese 属性，或者一个叫做 cheese 的局部变量。有了 self.cheese =
'Frank' 你就清楚地知道了这指的是实例的属性 self.cheese 。


whwu@master:~/script/python/LPTHW> cat ex40plus1.py
class TheThing(object):
        def __init__(self):
                self.number = 0

        def some_function(self):
                print "I got called."

        def add_me_up(self, more):
                self.number +=more
                return self.number

# two different things
a = TheThing()   # 生成两个实例
b = TheThing()

a.some_function() # 运行程序some_function(a)
b.some_function()

print a.add_me_up(20)
print b.add_me_up(30)

print a.number
print b.number

# study this.This is how you pass a variable
# from one class to another. You will need this.

class TheMultiplier(object):
        def __init__(self, base):
                self.base = base

        def do_it(self, m):
                return m * self.base

x = TheMultiplier(a.number)
print x.do_it(b.number)
whwu@master:~/script/python/LPTHW> python ex40plus1.py
I got called.
I got called.
20
30
20
30
600


whwu@master:~/script/python/LPTHW> python MyStuff.py
I am classy apples!
And now a thousand years between
whwu@master:~/script/python/LPTHW> cat MyStuff.py
class MyStuff(object):
        def __init__(self):
                self.tangerine = "And now a thousand years between"

        def apple(self):
                print "I am classy apples!"

thing = MyStuff()
thing.apple()
print thing.tangerine


练习41
程序不用总是从头开始读

strip函数
Python strip() 方法用于移除字符串头尾指定的字符（默认为空格）。
语法：
	str.strip([chars]) --- 移除指定字符
>>> str = "00000hahaha00000"
>>> print str.strip('0')
hahaha


capitalize函数
Python  capitalize()将字符串的第一个字母变成大写
语法：
	str.captialize()


>>> str = "this is string example...wow!!"
>>> print str.capitalize()
This is string example...wow!!


shuffle函数
>>> import random
>>>
>>> list = [20, 16, 10. 5];
>>> list = [20, 16, 10, 5];
>>> random.shuffle(list)
>>> print list
[5, 16, 10, 20]


sample函数
random.sample的函数原型为：random.sample(sequence, k)，从指定序列中随机获取指定长度的片断。sample函数不会修改原有序列。
>>> random.sample('abcdefghij', 3)
['e', 'c', 'd']


count函数
count()方法就可以统计某个元素在列表中出现了多少次
>>> x = [1, 2, 'a', [1,2], [1,2]]
>>> x.count([1, 2])
2


randint()函数
random.randint()的函数原型为：random.randint(a, b)，用于生成一个指定范围内的整数。其中参数a是下限，参数b是上限，生成的随机数n: a <= n <= b
>>> random.randint(16,20)
18
>>> random.randint(16,20)
16


replace函数
Python replace() 方法把字符串中的 old（旧字符串） 替换成 new(新字符串)，如果指定第三个参数max，则替换不超过 max 次。
>>> str ="is is is is"
>>> print str.replace("is", "was", 3)
was was was is


join函数
join()方法语法：
str.join(sequence)

>>> seq = ['a', 'b', 'c']
>>> print str.join(seq)
a-b-c





import random
from urllib import urlopen  #urllib 库提供了一个从指定的 URL 地址获取网页数据，然后对其进行分析处理，获取想要的数据。
import sys

WORD_URL = "http://learncodethehardway.org/words.txt"
WORDS = []

PHRASES = {
	"class %%%(%%%):":
	   "Make a class named %%% that is-a %%%.",
	"class %%%(object):\n\tdef __innit__(self, ***)":
	   "class %%% has-a __init__ that takes self and *** parameters.",
	"class %%%(object):\n\tdef ***(self, @@@)":
	   "class %%% has-a function named *** that takes self and @@@ parameters.",
	"*** = %%%()":
	   "Set *** to an instance of class %%%.",
	"***.***(@@@)":
	    "From *** get the *** function, and call it with parameters self, @@@.",
	"***.***  = '***'":
	    "From *** get the *** attribute and set it to '***'."
}


# do they want to drill phrases first
if len(sys.argv) == 2 and sys.argv[1] = "english":
	PHRASE_FIRST = True
else:
	PHRASE_FIRST = False

# load up the words from the website
for word in urlopen(WORD_URL).readlines():
	WORDS.append(word.strip())    # strip函数 生成一个名字为WORDS的列表


def convert(snippet, phrase):
	class_names = [w.captalize() for w in   #captalize函数
			random.sample(WORDS, snippet.count("%%%"))]
	other_names = random.sample(WORDS, snippet.count("***"))
	results = []
	para_names = []

	for i in range(0, snippet.count("@@@")):  # count函数--返回snippet中@@@的个数
		param_count = random.randint(1, 3)	# randint函数 生成一个1到3之间的整数
		param_names.append(', '.join(random.sample(WORDS, param_count))) # 从WORDS中选取para_count个单词

	for sentence in snippet, phrase:
		result = sentence[:]

	# fake class names
	for word in class_names:
		result = result.replace("%%%", word, 1)
	
	# fake other names
	for word in other_names:
		result = result.replace("%%%", word, 1)

	# fake parameter lists
	for word in para_names:
		result = result.replace("@@@", word, 1)

	results.append(result)

return results



# keep going until they hit CTRL-D
try：
	while True:
		snippets = PHRASES.keys()  # 将PHRASES中的键值命名为snippets
		random.shuffle(snippets)   # shuffle函数 返回随机排序后的序列

		for snippet in snippets：	# 在列表snippets中的元素，命名为snippet
			phrase = PHRASES[snippet]	# 在字典PHRASES中键为snippet 的值命名为phrase
			question,answer = convert(snippet, phrase) # convert的return值是一个列表，列表中有两个元素，分别命名为question以及answer
			if PHRASE_FIRST:
				question, answer = answer, question
			
			print question
			
			raw_input("> ")
			print "ANSWER: %s\n\n" % answer
except EOFError:
	print "\nBye"

whwu@master:~/script/python/LPTHW> python ex41.py english
Set drug to an instance of class Beast.
>
ANSWER: drug = Beast()


class Cemetery has-a __init__ that takes self and butto parameters.
>
ANSWER: class Cemetery(object):
        def __init__(self, butto)


From cherry get the bulb function, and  call it with parameters self, dad, band.
>
Bye

练习43
from sys import exit
from random import randint

class Scene(object):
	def enter(self):
		print "This scene is not yet configured. Subclass it and implement enter()."
		exit(1)

class Engine(object):
	def __init__(self, scene_map):
		self.scene_map = scene_map

	def play(self):
		current_scene = self.scene_map.opening_scene()
		last_scene = self.scene_map.next_scene('finished')

		while current_scene != last_scene:
			next_scene_name = current_scene.enter()		# 将current_scene.enter()的return值返回给next_scene_name
			current_scene = self.scene_map.next_scene(next_scene_name)

		# be sure to print out the last scene
		current_scene.enter()

class Death(Scene):

	quips = [
		" You died. You kinda suck at this.",
		"Your mom would be proud...if she were smarter.",
		"Such a luser.",
		"I have a small puppy that's better at this."
		]

	def enter(self):
		print Death.quips[randint(0, len(self.quips)-1)]
		exit(1)


class CentralCorridor(Scene):

	def enter(self):
		print "The Gothons of Planet Percal #25 have invaded your ship and destroyed"
		print "your entire crew. You are the last surviving member and your last"
		print "mission is to get the neutron destruct bomb from the Weapons Armory,"
		print "put it in the bridge, and blow the ship up after getting into an"
		print "escape pod."
		print "\n"
		print "You're running down the central corridir to the Weapons Armory when"
		print "a Gothon jumps out, red scaly skin, dark grimy teeth, and evil clown costume"
		print "flowing around his hate filled body. He's blocking the door to the"
		print "Armory and about to pull a weapon to blast you."

		action = raw_input("> ")
		
		if action == "shoot!":
			print "Quick on the draw you yank out your blaster and fire it at the Gothon."
			print "His clown costume is flowing and moving around his body, which throws"
			print "off your aim. Your laser hits his costume but misses him entirely. This"
			print "completely ruins his brand new costume his mother bought him, which"
			print "makes himfly into an insane rage and blast you repeatedly in the face until"
			print "you are dead. Then he eats you."
			return 'death'

		elif action == "dodge!":
			print "Like a world class boxer you dodge, weave, slip and slide right"
			print "as the Gothon's blaster cranks a laser past your head."
			print "In the middle of your artful dodge your foot slips and you"
			print "bang your head on the metal wall and pass out."
			print "You wake up shortly after only to die as the Gothon stomps on"
			print "your head and eats you."
			return 'death'

		elif action == "tell a joke":
			print "Lucky for you they made you learn Gothon insults in the academy."
			print "You tell the one Gothon joke you know:"
			print "Lbhe zbgure vf fb sng, jura fur fvgf nebhaq gur ubhfr, fur fvgf nebhaq gur ubhfr."
			print "The Gothon stops, tries not to laugh, then busts out laughing and can't move."
			print "While heis laughing you run up and shoot him square in the head"
			print "putting him down, then jump  through the Weapon Armory door."
			return 'laser_weapon_armory'

		else:
			print "DOES NOT COMPUTE!"
			return 'central_corridor'

class LaserWeaponArmory(Scene):
	
	def enter(self):
		print "You do a dive roll into the Weapon Armory, crouch and scan the room"
		print "for more Gothons that might be hiding. It's dead quiet, too quiet."
		print "You stand up and run to the far side of the room and find the"
		print "and you need the code to get the bomb out. If you get the code"
		print "wrong 10 times then the lock closes forever and you can't"
		print "get the bomb. The code is 3 digits."
		code = "%d%d%d" % (randint(1,9), randint(1,9), randint(1,9))
		guess = raw_input("[keypad]> ")
		guesses = 0

		while guess != code and guesses < 10:
			print "BZZZEDDD!"
			guesses += 1
			guess = raw_input("[keypad]> ")

		if guess == code:
			print "The container clicks open and the seal breaks, letting gas out."
			print "You grab the neutron bomb and run as fast as you can to the"
			print "bridge where you must place it in the right spot."
			return 'the_bridge'
		else:
			print "The lock buzzes one last time and then you hear a sickening."
			print "melting sound as the mechanism is fused together."
			print "You decide to sit there, and finally the Gothons blow up the"
			print "ship from their ship and you die."
			return 'death'

class TheBridge(Scene):
	
	def enter(self):
		print "You burst onto the Bridge with the netron destruct bomb"
		print "under your arm and surprise 5 Gothons who are trying to"
		print "tkae control of the ship. Each of them has an even uglier"
		print "clown costume than the last. They haven't pulled their"
		print "weapons out yet, as they see the active bomb under your"
		print "arm and  don't want to set it off."

		action = raw_input("> ")
		
		if action == "throw the bomb":
			print "In a panic you throw the bomb at the group of Gothons"
			print "and make a leap for the door. Right as you drop it a"
			print "Gothon shoots you right in the back killing you."
			print "As you die you see another Gothon fantically try to disarm"
			print "the bomb. You die knowing they will probably blow up when"
			print "it goes off."
			return 'death'

		elif action == "slowly place the bomb":
            		print "You point your blaster at the bomb under your arm"
            		print "and the Gothons put their hands up and start to sweat."
            		print "You inch backward to the door, open it, and then carefully"
            		print "place the bomb on the floor, pointing your blaster at it."
            		print "You then jump back through the door, punch the close button"
            		print "and blast the lock so the Gothons can't get out."
            		print "Now that the bomb is placed you run to the escape pod to"
           		print "get off this tin can."
            		return 'escape_pod'
		else:
			print "DOES NOT COMPUTE!"
			return "the_bridge"



class EscapePod(Scene):
	
	def enter(self):
		print "You rush through the ship desperately trying to make it to"
		print "the escage pod before the whole ship explodes. It seems like"
		print "hardly any Gothons are on the ship, so your run is clear of"
		print "interference. You get to the chamber with the escape pods, and"
		print "now need to pick one to take. Some of them could be damaged"
		print "but you don't have time to look. There's 5 pods, which one"
		print "do you take?"

		good_pod = randint(1, 5)
		guess = raw_input("[pod #]> ")

		if int(guess) != good_pod:
			print "You jump into pod %s and hit the eject button." % guess
			print "The pod escapes out into the void of space, then"
			print "implodes as the hull ruptures, crushing your body"
			print "into jam jelly."
			return 'death'
		else:
			print "You jump into pod %s and hit the eject buttion." % guess
			print "The pod easily slides out into space heading to"
			print "the planet below. As it flies to the planet, you look"
			print "back and see your ship implode then explode like a"
			print "brighter star, taking out the Gothon ship at the same"
			print "time. You won!"

			return 'finished'

class Finished(Scene):
	
	def enter(self):
		print "You won! Good job."
		return 'finished'


class Map(object):

	scenes = {
		'central_corridor': CentralCorridor(),
		'laser_weapon_armory': LaserWeaponArmory(),
		'the_bridge': TheBridge(),
		'escape_pod': EscapePod(),
		'death': Death(),
		'finished': Finished(),
	}

	def __init__(self, start_scene):
		self.start_scene = start_scene

	def next_scene(slef, scene_name):
		val = Map.scenes.get(scene_name)
		return val
	
	def opening_scene(self):
		return self.next_scene(self.start_scene)




a_map = Map('central_corridor')
a_game = Engine(a_map)
a_game.play()



class Engine(object):
	def __init__(self, scene_map):
		self.scene_map = scene_map

	def play(self):
		current_scene = self.scene_map.opening_scene()
		last_scene = self.scene_map.next_scene('finished')

		while current_scene != last_scene:
			next_scene_name = current_scene.enter()
			current_scene = self.scene_map.next_scene(next_scene_name)

		# be sure to print out the last scene
		current_scene.enter()


















python脚本阅读
whwu@master:~/script/python/LPTHW> cat script1.py
import random
secret = random.randint(1,99)
guess = 0
tries = 0
print "AHOY! I'm the Script created by BAO, and I have a secret!"
print "It is a number from 1 to 99. I'll give you 10 tries."

while guess != secret and tries < 10:
        guess = input("What's your guess?")	# 必须是input，因为input返回的是数值型数据，例如int，float等， 而raw_input返回的是字符串类型
        if guess < secret:
                print "Too low, scurvey dog!"
        elif guess > secret:
                print "Too high, landlubber!"

        tries = tries + 1

if guess == secret:
        print "Hey man! You got it! Found my secret, you did!"
else:
        print "No more guesses! Better luck next time, matey!"
        print "The secret number was", secret

whwu@master:~/script/python/LPTHW> python script1.py
AHOY! I'm the Script created by BAO, and I have a secret!
It is a number from 1 to 99. I'll give you 10 tries.
What's your guess?3
Too low, scurvey dog!
What's your guess?50
Too high, landlubber!
What's your guess?25
Too high, landlubber!
What's your guess?12
Too low, scurvey dog!
What's your guess?19
Too low, scurvey dog!
What's your guess?23
Too high, landlubber!
What's your guess?20
Hey man! You got it! Found my secret, you did!




