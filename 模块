#######################################
#################模块##################
#######################################

whwu@master:~/script/python> cat modele1.py
def printer(x):
        print x

>>> import modele1		# 得到模块
>>> modele1.printer('Hello world!')	# 限定性取得名字（模块.名字）
Hello world!
>>>
>>> from modele1 import printer		# 得到一个输出
>>> printer('Hello world!')		# 不需要限定名
Hello world!


whwu@master:~/script/python> cat module2.py
print('starting to load...')

import sys
name=42

def func():pass

class klass:pass

print('done loading.')

首先模块被导入（或者作为程序运行），Python从头到尾执行它的语句。
有的语句的作用只是在模块名字空间空间中生成名字，不过其他的语句
在import运行的时候做一些实际的工作。例如，这个文件中的两个print
语句在导入的时候会运行：
>>> import module2
starting to load...
done loading.
>>> module2.sys
<module 'sys' (built-in)>
>>> module2.name
42
>>> module2.func
<function func at 0x2b39615d0c08>
>>> module2.klass
<class module2.klass at 0x2b39615d7770>
>>> module2.__dict__.keys()
['name', '__builtins__', '__file__', '__package__', 'sys', 'klass', 'func', '__name__', '__doc__']

#在模块名字空间里的一些名字都是Python为我们加的：例如__file__给出载入的模块文件名，__name__把知道的名字给导入者
（不带有.py扩展名和路径）


##导入只发生一次##

模块在第一次import和from的时候载入并运行。
运行一个模块的代码生成它的顶层名字。
以后的import或from操作取一个已经载入的模块。

whwu@master:~/script/python> cat simple.py
print 'hello'
spam=1		# 初始化变量

>>> import simple	# 第一次导入：载入并运行代码
hello
>>> simple.spam		# 赋值生成一个属性
1
>>> simple.spam=2	# 在模块中改变属性
>>>
>>> import simple	# 只是取到已经载入的模块
>>>
>>> simple.spam		# 代码不重新运行：属性没有改变
2
在这个例子中，print和=语句在模块导入的第一次运行，第二个导入不
不重新运行模块的代码，只是取得python内部模块表中已经生成的模块


##import或from都是赋值
%cat small.py
x=1
y=[1,2]

>>> from small import x,y	# 把两个名字拷贝出来
>>> x=42			# 只改变局部的x
>>> y[0]=21			# 在远处改变可变的共享对象
>>>
>>> import small		# 得到模块名字
>>> small.x			# small的x不是局部的x
1
>>> small.y			# 不过我们共享一个改变了的可变对象
[21, 2]


