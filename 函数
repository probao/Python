Enter file contents here#######################################
#################函数##################
#######################################

def <名字> (arg1，arg2，。。。，argN）
	<语句>
return <值>

>>> def times(x,y): # 生成并赋值函数
...     return x*y  # 在调用的时候函数体执行
...
>>> times(5,5)	# 括号内的参数
25
>>> times(5,5.5) # 函数是“无类型的”
27.5
>>> times('Ni',4)
'NiNiNiNi'



>>> def intersect(seq1, seq2):
...     res=[]		# 开始为空
...     for x in seq1:	# 扫描seq1
...             if x in seq2:	# 公共项？
...                     res.append(x)	#添加到尾部
...     return res
...
>>> s1='SPAM'
>>> s2='SCAM'
>>> intersect(s1,s2)	# 字符串
['S', 'A', 'M']
>>> intersect([1,2,3],(1,2,4))	# 混合类型
[1, 2]


--函数中的作用域规则--
>>> x=99	# x和func在模块中被赋值：全局的
>>> def func(Y):	# Y和Z在函数中被赋值：局部的
...     Z=x+Y		# x没被赋值，所以是全局的
...     return Z
...
>>> func(1)
100

>>> y,z=1,2		# 模块中的全局变量
>>> def all_global():
...     global x	# 声明全局的赋值
...     x=y+z
...     return x	# 无需声明y，z 作用域规则
...
>>> all_global()
3
>>> x
3


--参数传递--
参数通过局部名字传递
	函数参数现在已经是我们熟悉的领域了：它们只是工作中Python赋值的
	又一个例子而已。函数参数（可能）是对共享对象的引用，被调用者所引用。

在一个函数中对参数名赋值不影响调用者
	函数首部中的参数名当函数运行时在作用域中成为新的局部名字。函数的参
	数名字不是调用者使用的名字的别名。

在一个函数中改变一个可变的对象参数可能影响调用者
	在另一个方面，既然参数只是简单的赋值给对象，函数能改变被传递的可变
	对象，结果可能影响调用者


>>> def changer(x,y):
...     x=2	# 只改变局部的名字值，数字是不可改变的，因此新生成的局部变量指向全局变量的值
...     y[0]='spam'	# 列表是可变的，在该位置改变共享对象
...
>>> x=1
>>> l=[1,2]
>>> changer(x,l)
>>>
>>> x,l
(1, ['spam', 2])

http://winterttr.me/2015/10/24/python-passing-arguments-as-value-or-reference/
http://www.jb51.net/article/63416.htm


--return的应用--
return可以返回任何种类的对象，通过在一个元组中
打包它们，它可以返回多个值。

>>> x=1
>>> L=[1,2]
>>> x,L=multiple(x,L)
>>> x,L
(1, [1, 2])

>>> def multiple(x,y):
...     x=2	# 只改变局部名
...     y=[3,4]
...     return x,y	# 在一个元组中返回新值
...
>>> x=1
>>> L=[1,2]
>>> x,L=multiple(x,L)	# 对调用者的名字赋值结果
>>> x,L
(2, [3, 4])


--特殊参数匹配模式--

#example1
>>> def func(spam,eggs,toast=0,ham=0):
...     print(spam,eggs,toast,ham)
...
>>> func(1,2)
(1, 2, 0, 0)
>>> func(1,ham=4,eggs=0) # python通过名字而不是位置匹配，调用者必须为spam和eggs提供值，但它们可以通过位置或名字匹配。
(1, 0, 0, 4)
>>> func(spam=4,eggs=0)
(4, 0, 0, 0)
>>> func(toast=1,eggs=2,spam=3)
(3, 2, 1, 0)
>>> func(1,2,3,4)
(1, 2, 3, 4)

#example1
whwu@master:~/script> cat inter2.py
def intersect(*args):		# 通过*args收集所有的参数
        res=[]
        for x in args[0]:
                for other in args[1:]:
                        if x not in other:
                                break
                else:
                        res.append(x)
        return res


def union(*args):
        res=[]
        for seq in args:
                for x in seq:
                        if not x in res:
                                res.append(x)
        return res

>>> from inter2 import intersect,union
>>> s1,s2,s3="SPAM","SCAM","SLAM"
>>> intersect(s1,s2,s3),union(s1,s2,s3)
(['S', 'A', 'M'], ['S', 'P', 'A', 'M', 'C', 'L'])


lambda表达式
一般形式：
	lambda 参数1，参数2，...参数N：使用参数的表达式

>>> def func(x,y,z):return x+y+z
...
>>> func(2,3,4)
9
>>> f=lambda x,y,z:x+y+z
>>> f(2,3,4)
9


内置的apply函数
apply程序可以调用任意的函数，而无须事先知道它们的名字或参数。
函数格式为：apply(func,*args,**kwargs)
用途：当一个函数的参数存在于一个元组或者一个字典中时，用来间接的调用这个函数，并肩元组或者字典中的参数按照顺序传递给参数
解析：args是一个包含按照函数所需参数传递的位置参数的一个元组，是不是很拗口，意思就是，假如A函数的函数位置为 A(a=1,b=2),
那么这个元组中就必须严格按照这个参数的位置顺序进行传递(a=3,b=4)，而不能是(b=4,a=3)这样的顺序
kwargs是一个包含关键字参数的字典，而其中args如果不传递，kwargs需要传递，则必须在args的位置留空

apply的返回值就是函数func函数的返回值

>>> f=lambda x,y,z:x+y+z
>>> apply(f,(2,3,4))
9
>>> def noargs_fun():
...     print "No args functions"
...
>>> def tup_fun(arg1,arg2):
...     print arg1,arg2
...
>>> def dic_fun(arg1=1,arg2=2):
...     print arg1,arg2
...
>>>
>>> if __name__=='__main__':
...     apply(noargs_fun)
...     apply(tup_fun,("aa","bb"))
...     kw={"arg1":"aa","arg2":"bb"}
...     apply(dic_fun,(),kw)
...
No args functions
aa bb
aa bb


内置函数map

>>> counters=[1,2,3,4]
>>>
>>> updated=[]
>>> for x in counters:
...     updated.append(x+10)
...
>>> updated
[11, 12, 13, 14]

map函数对在一个常列对象中的每一项都调用了一个传递的函数，
并返回一个包含所有调用结果的列表
>>> def inc(x):
...     return x+10
...
>>> map(inc,counters)
[11, 12, 13, 14]

map(function, iterable, ...) 

1、对可迭代函数'iterable'中的每一个元素应用‘function’方法，将结果作为list返回。 
来个例子：
>>> def add100(x):
...     return x+100
...
>>> hh=[11,22,33]
>>> map(add100,hh)
[111, 122, 133]


2、如果给出了额外的可迭代参数，则对每个可迭代参数中的元素‘并行’的应用‘function’。（翻译的不好，这里的关键是‘并行’） 
>>> def abc(a,b,c):
...     return a*1000+b*100+c
...
>>> list1=[1,2,3]
>>> list2=[1,2,3]
>>> list3=[1,2,3]
>>>
>>> map(abc,list1,list2,list3)
[1101, 2202, 3303]


stackoverflow上有人说可以这样理解map()： 
>>> def add100(x):
...     return x+100
...
>>> list1=[11,22,33]
>>>
>>> map(add100,list1)
[111, 122, 133]
>>>
>>>
>>> [add100(i) for i in list1]
[111, 122, 133]

哦，输出结果一样。原来map()就是列表推导式啊！要是这样想就错了：这里只是表面现象！再来个例子看看：
>>> def abc(a,b,c):
...     return a*100+b*10+c
...
>>> list1=[1,2,3]
>>> list2=[1,2,3]
>>> list3=[1,2,3]
>>>
>>> map(abc,list1,list2,list3)
[111, 222, 333]
>>>
>>>
>>>
>>> [abc(a,b,c) for a in list1 for b in list2 for c in list3]
[111, 112, 113, 121, 122, 123, 131, 132, 133, 211, 212, 213, 221, 222, 223, 231, 232, 233, 311, 312, 313, 321, 322, 323, 331, 332, 333]
上面便是列表推导的过程


python的过程
在python函数中，return语句是可选的。当一个函数无法准确的返回值时，函数就
跳至尾部并退出。严格地说，所有的函数都返回一个值，若你不能提供一个返回值，
你的函数自动返回None对象

>>> def addlist(list):
...     list.append(4)
...     return list
...
>>> list=[1,2,3]
>>> addlist(list)  #执行函数，结果返回list
[1, 2, 3, 4]

>>> def addlist(list):
...     list.append(4)
...
>>> addlist(list) #执行函数，结果返回none，空行
>>> print list
[1, 2, 3, 4, 4]


函数是对象：非直接调用
>>> def echo(message):	#回显对一个对象的赋值
...     print message
...
>>> x=echo
>>> x('Hello world!')	# 现在x也引用它
Hello world!		# 通过添加（）调用对象


既然参数通过赋值传递，传递函数参数同传其他参数一样简单。
被调用者可以在括号中添加参数来调用传递的函数：
>>> def indirect(func,arg):
...     func(arg)	# 通过添加（）来调用对象
...
>>> indirect(echo,'Hello jello!')	# 传递函数到一个函数
Hello jello!


>>> schedule=[(echo,'Spam!'),(echo,'Ham!')]
>>> for(func,arg) in schedule:
...     apply(func,(arg,))
...
Spam!
Ham!
这段代码简单的遍历了schedule表，每次用一个参数调用echo函数。

函数的常见问题

局部名字静态检测
Python如何静态地探测局部作用域：是在Python编译代码时检测，而不是通过它们在运行时的赋值。
>>> x=99
>>> def selector():
...     print x
...
>>> selector()
99
>>> def selector():
...     print x
...     x=88
...
>>> selector()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 2, in selector
UnboundLocalError: local variable 'x' referenced before assignment  # 不能对同一个简单的名字同时使用局部和全局的形式。







